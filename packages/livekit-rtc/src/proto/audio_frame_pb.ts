// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file audio_frame.proto (package livekit.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { TrackSource } from "./track_pb.js";
import { FfiOwnedHandle } from "./handle_pb.js";

/**
 * @generated from enum livekit.proto.AudioStreamType
 */
export enum AudioStreamType {
  /**
   * @generated from enum value: AUDIO_STREAM_NATIVE = 0;
   */
  AUDIO_STREAM_NATIVE = 0,

  /**
   * @generated from enum value: AUDIO_STREAM_HTML = 1;
   */
  AUDIO_STREAM_HTML = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(AudioStreamType)
proto3.util.setEnumType(AudioStreamType, "livekit.proto.AudioStreamType", [
  { no: 0, name: "AUDIO_STREAM_NATIVE" },
  { no: 1, name: "AUDIO_STREAM_HTML" },
]);

/**
 * @generated from enum livekit.proto.AudioSourceType
 */
export enum AudioSourceType {
  /**
   * @generated from enum value: AUDIO_SOURCE_NATIVE = 0;
   */
  AUDIO_SOURCE_NATIVE = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(AudioSourceType)
proto3.util.setEnumType(AudioSourceType, "livekit.proto.AudioSourceType", [
  { no: 0, name: "AUDIO_SOURCE_NATIVE" },
]);

/**
 * Create a new AudioStream
 * AudioStream is used to receive audio frames from a track
 *
 * @generated from message livekit.proto.NewAudioStreamRequest
 */
export class NewAudioStreamRequest extends Message<NewAudioStreamRequest> {
  /**
   * @generated from field: uint64 track_handle = 1;
   */
  trackHandle = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.AudioStreamType type = 2;
   */
  type = AudioStreamType.AUDIO_STREAM_NATIVE;

  /**
   * @generated from field: uint32 sample_rate = 3;
   */
  sampleRate = 0;

  /**
   * @generated from field: uint32 num_channels = 4;
   */
  numChannels = 0;

  constructor(data?: PartialMessage<NewAudioStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NewAudioStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "track_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AudioStreamType) },
    { no: 3, name: "sample_rate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "num_channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAudioStreamRequest {
    return new NewAudioStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAudioStreamRequest {
    return new NewAudioStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAudioStreamRequest {
    return new NewAudioStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewAudioStreamRequest | PlainMessage<NewAudioStreamRequest> | undefined, b: NewAudioStreamRequest | PlainMessage<NewAudioStreamRequest> | undefined): boolean {
    return proto3.util.equals(NewAudioStreamRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.NewAudioStreamResponse
 */
export class NewAudioStreamResponse extends Message<NewAudioStreamResponse> {
  /**
   * @generated from field: livekit.proto.OwnedAudioStream stream = 1;
   */
  stream?: OwnedAudioStream;

  constructor(data?: PartialMessage<NewAudioStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NewAudioStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream", kind: "message", T: OwnedAudioStream },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAudioStreamResponse {
    return new NewAudioStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAudioStreamResponse {
    return new NewAudioStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAudioStreamResponse {
    return new NewAudioStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewAudioStreamResponse | PlainMessage<NewAudioStreamResponse> | undefined, b: NewAudioStreamResponse | PlainMessage<NewAudioStreamResponse> | undefined): boolean {
    return proto3.util.equals(NewAudioStreamResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioStreamFromParticipantRequest
 */
export class AudioStreamFromParticipantRequest extends Message<AudioStreamFromParticipantRequest> {
  /**
   * @generated from field: uint64 participant_handle = 1;
   */
  participantHandle = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.AudioStreamType type = 2;
   */
  type = AudioStreamType.AUDIO_STREAM_NATIVE;

  /**
   * @generated from field: optional livekit.proto.TrackSource track_source = 3;
   */
  trackSource?: TrackSource;

  /**
   * @generated from field: uint32 sample_rate = 5;
   */
  sampleRate = 0;

  /**
   * @generated from field: uint32 num_channels = 6;
   */
  numChannels = 0;

  constructor(data?: PartialMessage<AudioStreamFromParticipantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioStreamFromParticipantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AudioStreamType) },
    { no: 3, name: "track_source", kind: "enum", T: proto3.getEnumType(TrackSource), opt: true },
    { no: 5, name: "sample_rate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "num_channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioStreamFromParticipantRequest {
    return new AudioStreamFromParticipantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioStreamFromParticipantRequest {
    return new AudioStreamFromParticipantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioStreamFromParticipantRequest {
    return new AudioStreamFromParticipantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AudioStreamFromParticipantRequest | PlainMessage<AudioStreamFromParticipantRequest> | undefined, b: AudioStreamFromParticipantRequest | PlainMessage<AudioStreamFromParticipantRequest> | undefined): boolean {
    return proto3.util.equals(AudioStreamFromParticipantRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioStreamFromParticipantResponse
 */
export class AudioStreamFromParticipantResponse extends Message<AudioStreamFromParticipantResponse> {
  /**
   * @generated from field: livekit.proto.OwnedAudioStream stream = 1;
   */
  stream?: OwnedAudioStream;

  constructor(data?: PartialMessage<AudioStreamFromParticipantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioStreamFromParticipantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream", kind: "message", T: OwnedAudioStream },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioStreamFromParticipantResponse {
    return new AudioStreamFromParticipantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioStreamFromParticipantResponse {
    return new AudioStreamFromParticipantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioStreamFromParticipantResponse {
    return new AudioStreamFromParticipantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AudioStreamFromParticipantResponse | PlainMessage<AudioStreamFromParticipantResponse> | undefined, b: AudioStreamFromParticipantResponse | PlainMessage<AudioStreamFromParticipantResponse> | undefined): boolean {
    return proto3.util.equals(AudioStreamFromParticipantResponse, a, b);
  }
}

/**
 * Create a new AudioSource
 *
 * @generated from message livekit.proto.NewAudioSourceRequest
 */
export class NewAudioSourceRequest extends Message<NewAudioSourceRequest> {
  /**
   * @generated from field: livekit.proto.AudioSourceType type = 1;
   */
  type = AudioSourceType.AUDIO_SOURCE_NATIVE;

  /**
   * @generated from field: optional livekit.proto.AudioSourceOptions options = 2;
   */
  options?: AudioSourceOptions;

  /**
   * @generated from field: uint32 sample_rate = 3;
   */
  sampleRate = 0;

  /**
   * @generated from field: uint32 num_channels = 4;
   */
  numChannels = 0;

  /**
   * @generated from field: optional bool enable_queue = 5;
   */
  enableQueue?: boolean;

  constructor(data?: PartialMessage<NewAudioSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NewAudioSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(AudioSourceType) },
    { no: 2, name: "options", kind: "message", T: AudioSourceOptions, opt: true },
    { no: 3, name: "sample_rate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "num_channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "enable_queue", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAudioSourceRequest {
    return new NewAudioSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAudioSourceRequest {
    return new NewAudioSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAudioSourceRequest {
    return new NewAudioSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewAudioSourceRequest | PlainMessage<NewAudioSourceRequest> | undefined, b: NewAudioSourceRequest | PlainMessage<NewAudioSourceRequest> | undefined): boolean {
    return proto3.util.equals(NewAudioSourceRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.NewAudioSourceResponse
 */
export class NewAudioSourceResponse extends Message<NewAudioSourceResponse> {
  /**
   * @generated from field: livekit.proto.OwnedAudioSource source = 1;
   */
  source?: OwnedAudioSource;

  constructor(data?: PartialMessage<NewAudioSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NewAudioSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "message", T: OwnedAudioSource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAudioSourceResponse {
    return new NewAudioSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAudioSourceResponse {
    return new NewAudioSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAudioSourceResponse {
    return new NewAudioSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewAudioSourceResponse | PlainMessage<NewAudioSourceResponse> | undefined, b: NewAudioSourceResponse | PlainMessage<NewAudioSourceResponse> | undefined): boolean {
    return proto3.util.equals(NewAudioSourceResponse, a, b);
  }
}

/**
 * Push a frame to an AudioSource 
 * The data provided must be available as long as the client receive the callback.
 *
 * @generated from message livekit.proto.CaptureAudioFrameRequest
 */
export class CaptureAudioFrameRequest extends Message<CaptureAudioFrameRequest> {
  /**
   * @generated from field: uint64 source_handle = 1;
   */
  sourceHandle = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.AudioFrameBufferInfo buffer = 2;
   */
  buffer?: AudioFrameBufferInfo;

  constructor(data?: PartialMessage<CaptureAudioFrameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CaptureAudioFrameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "buffer", kind: "message", T: AudioFrameBufferInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaptureAudioFrameRequest {
    return new CaptureAudioFrameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaptureAudioFrameRequest {
    return new CaptureAudioFrameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaptureAudioFrameRequest {
    return new CaptureAudioFrameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CaptureAudioFrameRequest | PlainMessage<CaptureAudioFrameRequest> | undefined, b: CaptureAudioFrameRequest | PlainMessage<CaptureAudioFrameRequest> | undefined): boolean {
    return proto3.util.equals(CaptureAudioFrameRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.CaptureAudioFrameResponse
 */
export class CaptureAudioFrameResponse extends Message<CaptureAudioFrameResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<CaptureAudioFrameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CaptureAudioFrameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaptureAudioFrameResponse {
    return new CaptureAudioFrameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaptureAudioFrameResponse {
    return new CaptureAudioFrameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaptureAudioFrameResponse {
    return new CaptureAudioFrameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CaptureAudioFrameResponse | PlainMessage<CaptureAudioFrameResponse> | undefined, b: CaptureAudioFrameResponse | PlainMessage<CaptureAudioFrameResponse> | undefined): boolean {
    return proto3.util.equals(CaptureAudioFrameResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.CaptureAudioFrameCallback
 */
export class CaptureAudioFrameCallback extends Message<CaptureAudioFrameCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<CaptureAudioFrameCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CaptureAudioFrameCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaptureAudioFrameCallback {
    return new CaptureAudioFrameCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaptureAudioFrameCallback {
    return new CaptureAudioFrameCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaptureAudioFrameCallback {
    return new CaptureAudioFrameCallback().fromJsonString(jsonString, options);
  }

  static equals(a: CaptureAudioFrameCallback | PlainMessage<CaptureAudioFrameCallback> | undefined, b: CaptureAudioFrameCallback | PlainMessage<CaptureAudioFrameCallback> | undefined): boolean {
    return proto3.util.equals(CaptureAudioFrameCallback, a, b);
  }
}

/**
 * Create a new AudioResampler
 *
 * @generated from message livekit.proto.NewAudioResamplerRequest
 */
export class NewAudioResamplerRequest extends Message<NewAudioResamplerRequest> {
  constructor(data?: PartialMessage<NewAudioResamplerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NewAudioResamplerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAudioResamplerRequest {
    return new NewAudioResamplerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAudioResamplerRequest {
    return new NewAudioResamplerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAudioResamplerRequest {
    return new NewAudioResamplerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewAudioResamplerRequest | PlainMessage<NewAudioResamplerRequest> | undefined, b: NewAudioResamplerRequest | PlainMessage<NewAudioResamplerRequest> | undefined): boolean {
    return proto3.util.equals(NewAudioResamplerRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.NewAudioResamplerResponse
 */
export class NewAudioResamplerResponse extends Message<NewAudioResamplerResponse> {
  /**
   * @generated from field: livekit.proto.OwnedAudioResampler resampler = 1;
   */
  resampler?: OwnedAudioResampler;

  constructor(data?: PartialMessage<NewAudioResamplerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.NewAudioResamplerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resampler", kind: "message", T: OwnedAudioResampler },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewAudioResamplerResponse {
    return new NewAudioResamplerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewAudioResamplerResponse {
    return new NewAudioResamplerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewAudioResamplerResponse {
    return new NewAudioResamplerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewAudioResamplerResponse | PlainMessage<NewAudioResamplerResponse> | undefined, b: NewAudioResamplerResponse | PlainMessage<NewAudioResamplerResponse> | undefined): boolean {
    return proto3.util.equals(NewAudioResamplerResponse, a, b);
  }
}

/**
 * Remix and resample an audio frame
 *
 * @generated from message livekit.proto.RemixAndResampleRequest
 */
export class RemixAndResampleRequest extends Message<RemixAndResampleRequest> {
  /**
   * @generated from field: uint64 resampler_handle = 1;
   */
  resamplerHandle = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.AudioFrameBufferInfo buffer = 2;
   */
  buffer?: AudioFrameBufferInfo;

  /**
   * @generated from field: uint32 num_channels = 3;
   */
  numChannels = 0;

  /**
   * @generated from field: uint32 sample_rate = 4;
   */
  sampleRate = 0;

  constructor(data?: PartialMessage<RemixAndResampleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RemixAndResampleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resampler_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "buffer", kind: "message", T: AudioFrameBufferInfo },
    { no: 3, name: "num_channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "sample_rate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemixAndResampleRequest {
    return new RemixAndResampleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemixAndResampleRequest {
    return new RemixAndResampleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemixAndResampleRequest {
    return new RemixAndResampleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemixAndResampleRequest | PlainMessage<RemixAndResampleRequest> | undefined, b: RemixAndResampleRequest | PlainMessage<RemixAndResampleRequest> | undefined): boolean {
    return proto3.util.equals(RemixAndResampleRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.RemixAndResampleResponse
 */
export class RemixAndResampleResponse extends Message<RemixAndResampleResponse> {
  /**
   * @generated from field: livekit.proto.OwnedAudioFrameBuffer buffer = 1;
   */
  buffer?: OwnedAudioFrameBuffer;

  constructor(data?: PartialMessage<RemixAndResampleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RemixAndResampleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "buffer", kind: "message", T: OwnedAudioFrameBuffer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemixAndResampleResponse {
    return new RemixAndResampleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemixAndResampleResponse {
    return new RemixAndResampleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemixAndResampleResponse {
    return new RemixAndResampleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemixAndResampleResponse | PlainMessage<RemixAndResampleResponse> | undefined, b: RemixAndResampleResponse | PlainMessage<RemixAndResampleResponse> | undefined): boolean {
    return proto3.util.equals(RemixAndResampleResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioFrameBufferInfo
 */
export class AudioFrameBufferInfo extends Message<AudioFrameBufferInfo> {
  /**
   * *const i16
   *
   * @generated from field: uint64 data_ptr = 1;
   */
  dataPtr = protoInt64.zero;

  /**
   * @generated from field: uint32 num_channels = 2;
   */
  numChannels = 0;

  /**
   * @generated from field: uint32 sample_rate = 3;
   */
  sampleRate = 0;

  /**
   * @generated from field: uint32 samples_per_channel = 4;
   */
  samplesPerChannel = 0;

  constructor(data?: PartialMessage<AudioFrameBufferInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioFrameBufferInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "num_channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "sample_rate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "samples_per_channel", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioFrameBufferInfo {
    return new AudioFrameBufferInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioFrameBufferInfo {
    return new AudioFrameBufferInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioFrameBufferInfo {
    return new AudioFrameBufferInfo().fromJsonString(jsonString, options);
  }

  static equals(a: AudioFrameBufferInfo | PlainMessage<AudioFrameBufferInfo> | undefined, b: AudioFrameBufferInfo | PlainMessage<AudioFrameBufferInfo> | undefined): boolean {
    return proto3.util.equals(AudioFrameBufferInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedAudioFrameBuffer
 */
export class OwnedAudioFrameBuffer extends Message<OwnedAudioFrameBuffer> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.AudioFrameBufferInfo info = 2;
   */
  info?: AudioFrameBufferInfo;

  constructor(data?: PartialMessage<OwnedAudioFrameBuffer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedAudioFrameBuffer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: AudioFrameBufferInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedAudioFrameBuffer {
    return new OwnedAudioFrameBuffer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedAudioFrameBuffer {
    return new OwnedAudioFrameBuffer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedAudioFrameBuffer {
    return new OwnedAudioFrameBuffer().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedAudioFrameBuffer | PlainMessage<OwnedAudioFrameBuffer> | undefined, b: OwnedAudioFrameBuffer | PlainMessage<OwnedAudioFrameBuffer> | undefined): boolean {
    return proto3.util.equals(OwnedAudioFrameBuffer, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioStreamInfo
 */
export class AudioStreamInfo extends Message<AudioStreamInfo> {
  /**
   * @generated from field: livekit.proto.AudioStreamType type = 1;
   */
  type = AudioStreamType.AUDIO_STREAM_NATIVE;

  constructor(data?: PartialMessage<AudioStreamInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioStreamInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(AudioStreamType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioStreamInfo {
    return new AudioStreamInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioStreamInfo {
    return new AudioStreamInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioStreamInfo {
    return new AudioStreamInfo().fromJsonString(jsonString, options);
  }

  static equals(a: AudioStreamInfo | PlainMessage<AudioStreamInfo> | undefined, b: AudioStreamInfo | PlainMessage<AudioStreamInfo> | undefined): boolean {
    return proto3.util.equals(AudioStreamInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedAudioStream
 */
export class OwnedAudioStream extends Message<OwnedAudioStream> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.AudioStreamInfo info = 2;
   */
  info?: AudioStreamInfo;

  constructor(data?: PartialMessage<OwnedAudioStream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedAudioStream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: AudioStreamInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedAudioStream {
    return new OwnedAudioStream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedAudioStream {
    return new OwnedAudioStream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedAudioStream {
    return new OwnedAudioStream().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedAudioStream | PlainMessage<OwnedAudioStream> | undefined, b: OwnedAudioStream | PlainMessage<OwnedAudioStream> | undefined): boolean {
    return proto3.util.equals(OwnedAudioStream, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioStreamEvent
 */
export class AudioStreamEvent extends Message<AudioStreamEvent> {
  /**
   * @generated from field: uint64 stream_handle = 1;
   */
  streamHandle = protoInt64.zero;

  /**
   * @generated from oneof livekit.proto.AudioStreamEvent.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.AudioFrameReceived frame_received = 2;
     */
    value: AudioFrameReceived;
    case: "frameReceived";
  } | {
    /**
     * @generated from field: livekit.proto.AudioStreamEOS eos = 3;
     */
    value: AudioStreamEOS;
    case: "eos";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AudioStreamEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioStreamEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stream_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "frame_received", kind: "message", T: AudioFrameReceived, oneof: "message" },
    { no: 3, name: "eos", kind: "message", T: AudioStreamEOS, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioStreamEvent {
    return new AudioStreamEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioStreamEvent {
    return new AudioStreamEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioStreamEvent {
    return new AudioStreamEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AudioStreamEvent | PlainMessage<AudioStreamEvent> | undefined, b: AudioStreamEvent | PlainMessage<AudioStreamEvent> | undefined): boolean {
    return proto3.util.equals(AudioStreamEvent, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioFrameReceived
 */
export class AudioFrameReceived extends Message<AudioFrameReceived> {
  /**
   * @generated from field: livekit.proto.OwnedAudioFrameBuffer frame = 1;
   */
  frame?: OwnedAudioFrameBuffer;

  constructor(data?: PartialMessage<AudioFrameReceived>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioFrameReceived";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frame", kind: "message", T: OwnedAudioFrameBuffer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioFrameReceived {
    return new AudioFrameReceived().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioFrameReceived {
    return new AudioFrameReceived().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioFrameReceived {
    return new AudioFrameReceived().fromJsonString(jsonString, options);
  }

  static equals(a: AudioFrameReceived | PlainMessage<AudioFrameReceived> | undefined, b: AudioFrameReceived | PlainMessage<AudioFrameReceived> | undefined): boolean {
    return proto3.util.equals(AudioFrameReceived, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioStreamEOS
 */
export class AudioStreamEOS extends Message<AudioStreamEOS> {
  constructor(data?: PartialMessage<AudioStreamEOS>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioStreamEOS";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioStreamEOS {
    return new AudioStreamEOS().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioStreamEOS {
    return new AudioStreamEOS().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioStreamEOS {
    return new AudioStreamEOS().fromJsonString(jsonString, options);
  }

  static equals(a: AudioStreamEOS | PlainMessage<AudioStreamEOS> | undefined, b: AudioStreamEOS | PlainMessage<AudioStreamEOS> | undefined): boolean {
    return proto3.util.equals(AudioStreamEOS, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioSourceOptions
 */
export class AudioSourceOptions extends Message<AudioSourceOptions> {
  /**
   * @generated from field: bool echo_cancellation = 1;
   */
  echoCancellation = false;

  /**
   * @generated from field: bool noise_suppression = 2;
   */
  noiseSuppression = false;

  /**
   * @generated from field: bool auto_gain_control = 3;
   */
  autoGainControl = false;

  constructor(data?: PartialMessage<AudioSourceOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioSourceOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "echo_cancellation", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "noise_suppression", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "auto_gain_control", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioSourceOptions {
    return new AudioSourceOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioSourceOptions {
    return new AudioSourceOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioSourceOptions {
    return new AudioSourceOptions().fromJsonString(jsonString, options);
  }

  static equals(a: AudioSourceOptions | PlainMessage<AudioSourceOptions> | undefined, b: AudioSourceOptions | PlainMessage<AudioSourceOptions> | undefined): boolean {
    return proto3.util.equals(AudioSourceOptions, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioSourceInfo
 */
export class AudioSourceInfo extends Message<AudioSourceInfo> {
  /**
   * @generated from field: livekit.proto.AudioSourceType type = 2;
   */
  type = AudioSourceType.AUDIO_SOURCE_NATIVE;

  constructor(data?: PartialMessage<AudioSourceInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioSourceInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AudioSourceType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioSourceInfo {
    return new AudioSourceInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioSourceInfo {
    return new AudioSourceInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioSourceInfo {
    return new AudioSourceInfo().fromJsonString(jsonString, options);
  }

  static equals(a: AudioSourceInfo | PlainMessage<AudioSourceInfo> | undefined, b: AudioSourceInfo | PlainMessage<AudioSourceInfo> | undefined): boolean {
    return proto3.util.equals(AudioSourceInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedAudioSource
 */
export class OwnedAudioSource extends Message<OwnedAudioSource> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.AudioSourceInfo info = 2;
   */
  info?: AudioSourceInfo;

  constructor(data?: PartialMessage<OwnedAudioSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedAudioSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: AudioSourceInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedAudioSource {
    return new OwnedAudioSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedAudioSource {
    return new OwnedAudioSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedAudioSource {
    return new OwnedAudioSource().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedAudioSource | PlainMessage<OwnedAudioSource> | undefined, b: OwnedAudioSource | PlainMessage<OwnedAudioSource> | undefined): boolean {
    return proto3.util.equals(OwnedAudioSource, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioResamplerInfo
 */
export class AudioResamplerInfo extends Message<AudioResamplerInfo> {
  constructor(data?: PartialMessage<AudioResamplerInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioResamplerInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioResamplerInfo {
    return new AudioResamplerInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioResamplerInfo {
    return new AudioResamplerInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioResamplerInfo {
    return new AudioResamplerInfo().fromJsonString(jsonString, options);
  }

  static equals(a: AudioResamplerInfo | PlainMessage<AudioResamplerInfo> | undefined, b: AudioResamplerInfo | PlainMessage<AudioResamplerInfo> | undefined): boolean {
    return proto3.util.equals(AudioResamplerInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedAudioResampler
 */
export class OwnedAudioResampler extends Message<OwnedAudioResampler> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.AudioResamplerInfo info = 2;
   */
  info?: AudioResamplerInfo;

  constructor(data?: PartialMessage<OwnedAudioResampler>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedAudioResampler";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: AudioResamplerInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedAudioResampler {
    return new OwnedAudioResampler().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedAudioResampler {
    return new OwnedAudioResampler().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedAudioResampler {
    return new OwnedAudioResampler().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedAudioResampler | PlainMessage<OwnedAudioResampler> | undefined, b: OwnedAudioResampler | PlainMessage<OwnedAudioResampler> | undefined): boolean {
    return proto3.util.equals(OwnedAudioResampler, a, b);
  }
}

