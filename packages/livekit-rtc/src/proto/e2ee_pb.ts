// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file e2ee.proto (package livekit.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum livekit.proto.EncryptionType
 */
export enum EncryptionType {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: GCM = 1;
   */
  GCM = 1,

  /**
   * @generated from enum value: CUSTOM = 2;
   */
  CUSTOM = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EncryptionType)
proto3.util.setEnumType(EncryptionType, "livekit.proto.EncryptionType", [
  { no: 0, name: "NONE" },
  { no: 1, name: "GCM" },
  { no: 2, name: "CUSTOM" },
]);

/**
 * @generated from enum livekit.proto.EncryptionState
 */
export enum EncryptionState {
  /**
   * @generated from enum value: NEW = 0;
   */
  NEW = 0,

  /**
   * @generated from enum value: OK = 1;
   */
  OK = 1,

  /**
   * @generated from enum value: ENCRYPTION_FAILED = 2;
   */
  ENCRYPTION_FAILED = 2,

  /**
   * @generated from enum value: DECRYPTION_FAILED = 3;
   */
  DECRYPTION_FAILED = 3,

  /**
   * @generated from enum value: MISSING_KEY = 4;
   */
  MISSING_KEY = 4,

  /**
   * @generated from enum value: KEY_RATCHETED = 5;
   */
  KEY_RATCHETED = 5,

  /**
   * @generated from enum value: INTERNAL_ERROR = 6;
   */
  INTERNAL_ERROR = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(EncryptionState)
proto3.util.setEnumType(EncryptionState, "livekit.proto.EncryptionState", [
  { no: 0, name: "NEW" },
  { no: 1, name: "OK" },
  { no: 2, name: "ENCRYPTION_FAILED" },
  { no: 3, name: "DECRYPTION_FAILED" },
  { no: 4, name: "MISSING_KEY" },
  { no: 5, name: "KEY_RATCHETED" },
  { no: 6, name: "INTERNAL_ERROR" },
]);

/**
 * @generated from message livekit.proto.FrameCryptor
 */
export class FrameCryptor extends Message<FrameCryptor> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: string track_sid = 2;
   */
  trackSid = "";

  /**
   * @generated from field: int32 key_index = 3;
   */
  keyIndex = 0;

  /**
   * @generated from field: bool enabled = 4;
   */
  enabled = false;

  constructor(data?: PartialMessage<FrameCryptor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.FrameCryptor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrameCryptor {
    return new FrameCryptor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrameCryptor {
    return new FrameCryptor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrameCryptor {
    return new FrameCryptor().fromJsonString(jsonString, options);
  }

  static equals(a: FrameCryptor | PlainMessage<FrameCryptor> | undefined, b: FrameCryptor | PlainMessage<FrameCryptor> | undefined): boolean {
    return proto3.util.equals(FrameCryptor, a, b);
  }
}

/**
 * @generated from message livekit.proto.KeyProviderOptions
 */
export class KeyProviderOptions extends Message<KeyProviderOptions> {
  /**
   * Only specify if you want to use a shared_key
   *
   * @generated from field: optional bytes shared_key = 1;
   */
  sharedKey?: Uint8Array;

  /**
   * @generated from field: int32 ratchet_window_size = 2;
   */
  ratchetWindowSize = 0;

  /**
   * @generated from field: bytes ratchet_salt = 3;
   */
  ratchetSalt = new Uint8Array(0);

  /**
   * -1 = no tolerence
   *
   * @generated from field: int32 failure_tolerance = 4;
   */
  failureTolerance = 0;

  constructor(data?: PartialMessage<KeyProviderOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.KeyProviderOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shared_key", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 2, name: "ratchet_window_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "ratchet_salt", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "failure_tolerance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyProviderOptions {
    return new KeyProviderOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyProviderOptions {
    return new KeyProviderOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyProviderOptions {
    return new KeyProviderOptions().fromJsonString(jsonString, options);
  }

  static equals(a: KeyProviderOptions | PlainMessage<KeyProviderOptions> | undefined, b: KeyProviderOptions | PlainMessage<KeyProviderOptions> | undefined): boolean {
    return proto3.util.equals(KeyProviderOptions, a, b);
  }
}

/**
 * @generated from message livekit.proto.E2eeOptions
 */
export class E2eeOptions extends Message<E2eeOptions> {
  /**
   * @generated from field: livekit.proto.EncryptionType encryption_type = 1;
   */
  encryptionType = EncryptionType.NONE;

  /**
   * @generated from field: livekit.proto.KeyProviderOptions key_provider_options = 2;
   */
  keyProviderOptions?: KeyProviderOptions;

  constructor(data?: PartialMessage<E2eeOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.E2eeOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "encryption_type", kind: "enum", T: proto3.getEnumType(EncryptionType) },
    { no: 2, name: "key_provider_options", kind: "message", T: KeyProviderOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): E2eeOptions {
    return new E2eeOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): E2eeOptions {
    return new E2eeOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): E2eeOptions {
    return new E2eeOptions().fromJsonString(jsonString, options);
  }

  static equals(a: E2eeOptions | PlainMessage<E2eeOptions> | undefined, b: E2eeOptions | PlainMessage<E2eeOptions> | undefined): boolean {
    return proto3.util.equals(E2eeOptions, a, b);
  }
}

/**
 * @generated from message livekit.proto.E2eeManagerSetEnabledRequest
 */
export class E2eeManagerSetEnabledRequest extends Message<E2eeManagerSetEnabledRequest> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  constructor(data?: PartialMessage<E2eeManagerSetEnabledRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.E2eeManagerSetEnabledRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): E2eeManagerSetEnabledRequest {
    return new E2eeManagerSetEnabledRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): E2eeManagerSetEnabledRequest {
    return new E2eeManagerSetEnabledRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): E2eeManagerSetEnabledRequest {
    return new E2eeManagerSetEnabledRequest().fromJsonString(jsonString, options);
  }

  static equals(a: E2eeManagerSetEnabledRequest | PlainMessage<E2eeManagerSetEnabledRequest> | undefined, b: E2eeManagerSetEnabledRequest | PlainMessage<E2eeManagerSetEnabledRequest> | undefined): boolean {
    return proto3.util.equals(E2eeManagerSetEnabledRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.E2eeManagerSetEnabledResponse
 */
export class E2eeManagerSetEnabledResponse extends Message<E2eeManagerSetEnabledResponse> {
  constructor(data?: PartialMessage<E2eeManagerSetEnabledResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.E2eeManagerSetEnabledResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): E2eeManagerSetEnabledResponse {
    return new E2eeManagerSetEnabledResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): E2eeManagerSetEnabledResponse {
    return new E2eeManagerSetEnabledResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): E2eeManagerSetEnabledResponse {
    return new E2eeManagerSetEnabledResponse().fromJsonString(jsonString, options);
  }

  static equals(a: E2eeManagerSetEnabledResponse | PlainMessage<E2eeManagerSetEnabledResponse> | undefined, b: E2eeManagerSetEnabledResponse | PlainMessage<E2eeManagerSetEnabledResponse> | undefined): boolean {
    return proto3.util.equals(E2eeManagerSetEnabledResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.E2eeManagerGetFrameCryptorsRequest
 */
export class E2eeManagerGetFrameCryptorsRequest extends Message<E2eeManagerGetFrameCryptorsRequest> {
  constructor(data?: PartialMessage<E2eeManagerGetFrameCryptorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.E2eeManagerGetFrameCryptorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): E2eeManagerGetFrameCryptorsRequest {
    return new E2eeManagerGetFrameCryptorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): E2eeManagerGetFrameCryptorsRequest {
    return new E2eeManagerGetFrameCryptorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): E2eeManagerGetFrameCryptorsRequest {
    return new E2eeManagerGetFrameCryptorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: E2eeManagerGetFrameCryptorsRequest | PlainMessage<E2eeManagerGetFrameCryptorsRequest> | undefined, b: E2eeManagerGetFrameCryptorsRequest | PlainMessage<E2eeManagerGetFrameCryptorsRequest> | undefined): boolean {
    return proto3.util.equals(E2eeManagerGetFrameCryptorsRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.E2eeManagerGetFrameCryptorsResponse
 */
export class E2eeManagerGetFrameCryptorsResponse extends Message<E2eeManagerGetFrameCryptorsResponse> {
  /**
   * @generated from field: repeated livekit.proto.FrameCryptor frame_cryptors = 1;
   */
  frameCryptors: FrameCryptor[] = [];

  constructor(data?: PartialMessage<E2eeManagerGetFrameCryptorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.E2eeManagerGetFrameCryptorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "frame_cryptors", kind: "message", T: FrameCryptor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): E2eeManagerGetFrameCryptorsResponse {
    return new E2eeManagerGetFrameCryptorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): E2eeManagerGetFrameCryptorsResponse {
    return new E2eeManagerGetFrameCryptorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): E2eeManagerGetFrameCryptorsResponse {
    return new E2eeManagerGetFrameCryptorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: E2eeManagerGetFrameCryptorsResponse | PlainMessage<E2eeManagerGetFrameCryptorsResponse> | undefined, b: E2eeManagerGetFrameCryptorsResponse | PlainMessage<E2eeManagerGetFrameCryptorsResponse> | undefined): boolean {
    return proto3.util.equals(E2eeManagerGetFrameCryptorsResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.FrameCryptorSetEnabledRequest
 */
export class FrameCryptorSetEnabledRequest extends Message<FrameCryptorSetEnabledRequest> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: string track_sid = 2;
   */
  trackSid = "";

  /**
   * @generated from field: bool enabled = 3;
   */
  enabled = false;

  constructor(data?: PartialMessage<FrameCryptorSetEnabledRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.FrameCryptorSetEnabledRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrameCryptorSetEnabledRequest {
    return new FrameCryptorSetEnabledRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrameCryptorSetEnabledRequest {
    return new FrameCryptorSetEnabledRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrameCryptorSetEnabledRequest {
    return new FrameCryptorSetEnabledRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FrameCryptorSetEnabledRequest | PlainMessage<FrameCryptorSetEnabledRequest> | undefined, b: FrameCryptorSetEnabledRequest | PlainMessage<FrameCryptorSetEnabledRequest> | undefined): boolean {
    return proto3.util.equals(FrameCryptorSetEnabledRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.FrameCryptorSetEnabledResponse
 */
export class FrameCryptorSetEnabledResponse extends Message<FrameCryptorSetEnabledResponse> {
  constructor(data?: PartialMessage<FrameCryptorSetEnabledResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.FrameCryptorSetEnabledResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrameCryptorSetEnabledResponse {
    return new FrameCryptorSetEnabledResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrameCryptorSetEnabledResponse {
    return new FrameCryptorSetEnabledResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrameCryptorSetEnabledResponse {
    return new FrameCryptorSetEnabledResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FrameCryptorSetEnabledResponse | PlainMessage<FrameCryptorSetEnabledResponse> | undefined, b: FrameCryptorSetEnabledResponse | PlainMessage<FrameCryptorSetEnabledResponse> | undefined): boolean {
    return proto3.util.equals(FrameCryptorSetEnabledResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.FrameCryptorSetKeyIndexRequest
 */
export class FrameCryptorSetKeyIndexRequest extends Message<FrameCryptorSetKeyIndexRequest> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: string track_sid = 2;
   */
  trackSid = "";

  /**
   * @generated from field: int32 key_index = 3;
   */
  keyIndex = 0;

  constructor(data?: PartialMessage<FrameCryptorSetKeyIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.FrameCryptorSetKeyIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrameCryptorSetKeyIndexRequest {
    return new FrameCryptorSetKeyIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrameCryptorSetKeyIndexRequest {
    return new FrameCryptorSetKeyIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrameCryptorSetKeyIndexRequest {
    return new FrameCryptorSetKeyIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FrameCryptorSetKeyIndexRequest | PlainMessage<FrameCryptorSetKeyIndexRequest> | undefined, b: FrameCryptorSetKeyIndexRequest | PlainMessage<FrameCryptorSetKeyIndexRequest> | undefined): boolean {
    return proto3.util.equals(FrameCryptorSetKeyIndexRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.FrameCryptorSetKeyIndexResponse
 */
export class FrameCryptorSetKeyIndexResponse extends Message<FrameCryptorSetKeyIndexResponse> {
  constructor(data?: PartialMessage<FrameCryptorSetKeyIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.FrameCryptorSetKeyIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrameCryptorSetKeyIndexResponse {
    return new FrameCryptorSetKeyIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrameCryptorSetKeyIndexResponse {
    return new FrameCryptorSetKeyIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrameCryptorSetKeyIndexResponse {
    return new FrameCryptorSetKeyIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FrameCryptorSetKeyIndexResponse | PlainMessage<FrameCryptorSetKeyIndexResponse> | undefined, b: FrameCryptorSetKeyIndexResponse | PlainMessage<FrameCryptorSetKeyIndexResponse> | undefined): boolean {
    return proto3.util.equals(FrameCryptorSetKeyIndexResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetSharedKeyRequest
 */
export class SetSharedKeyRequest extends Message<SetSharedKeyRequest> {
  /**
   * @generated from field: bytes shared_key = 1;
   */
  sharedKey = new Uint8Array(0);

  /**
   * @generated from field: int32 key_index = 2;
   */
  keyIndex = 0;

  constructor(data?: PartialMessage<SetSharedKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetSharedKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shared_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSharedKeyRequest {
    return new SetSharedKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSharedKeyRequest {
    return new SetSharedKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSharedKeyRequest {
    return new SetSharedKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetSharedKeyRequest | PlainMessage<SetSharedKeyRequest> | undefined, b: SetSharedKeyRequest | PlainMessage<SetSharedKeyRequest> | undefined): boolean {
    return proto3.util.equals(SetSharedKeyRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetSharedKeyResponse
 */
export class SetSharedKeyResponse extends Message<SetSharedKeyResponse> {
  constructor(data?: PartialMessage<SetSharedKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetSharedKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSharedKeyResponse {
    return new SetSharedKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSharedKeyResponse {
    return new SetSharedKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSharedKeyResponse {
    return new SetSharedKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetSharedKeyResponse | PlainMessage<SetSharedKeyResponse> | undefined, b: SetSharedKeyResponse | PlainMessage<SetSharedKeyResponse> | undefined): boolean {
    return proto3.util.equals(SetSharedKeyResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.RatchetSharedKeyRequest
 */
export class RatchetSharedKeyRequest extends Message<RatchetSharedKeyRequest> {
  /**
   * @generated from field: int32 key_index = 1;
   */
  keyIndex = 0;

  constructor(data?: PartialMessage<RatchetSharedKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RatchetSharedKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RatchetSharedKeyRequest {
    return new RatchetSharedKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RatchetSharedKeyRequest {
    return new RatchetSharedKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RatchetSharedKeyRequest {
    return new RatchetSharedKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RatchetSharedKeyRequest | PlainMessage<RatchetSharedKeyRequest> | undefined, b: RatchetSharedKeyRequest | PlainMessage<RatchetSharedKeyRequest> | undefined): boolean {
    return proto3.util.equals(RatchetSharedKeyRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.RatchetSharedKeyResponse
 */
export class RatchetSharedKeyResponse extends Message<RatchetSharedKeyResponse> {
  /**
   * @generated from field: optional bytes new_key = 1;
   */
  newKey?: Uint8Array;

  constructor(data?: PartialMessage<RatchetSharedKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RatchetSharedKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_key", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RatchetSharedKeyResponse {
    return new RatchetSharedKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RatchetSharedKeyResponse {
    return new RatchetSharedKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RatchetSharedKeyResponse {
    return new RatchetSharedKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RatchetSharedKeyResponse | PlainMessage<RatchetSharedKeyResponse> | undefined, b: RatchetSharedKeyResponse | PlainMessage<RatchetSharedKeyResponse> | undefined): boolean {
    return proto3.util.equals(RatchetSharedKeyResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.GetSharedKeyRequest
 */
export class GetSharedKeyRequest extends Message<GetSharedKeyRequest> {
  /**
   * @generated from field: int32 key_index = 1;
   */
  keyIndex = 0;

  constructor(data?: PartialMessage<GetSharedKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.GetSharedKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSharedKeyRequest {
    return new GetSharedKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSharedKeyRequest {
    return new GetSharedKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSharedKeyRequest {
    return new GetSharedKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSharedKeyRequest | PlainMessage<GetSharedKeyRequest> | undefined, b: GetSharedKeyRequest | PlainMessage<GetSharedKeyRequest> | undefined): boolean {
    return proto3.util.equals(GetSharedKeyRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.GetSharedKeyResponse
 */
export class GetSharedKeyResponse extends Message<GetSharedKeyResponse> {
  /**
   * @generated from field: optional bytes key = 1;
   */
  key?: Uint8Array;

  constructor(data?: PartialMessage<GetSharedKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.GetSharedKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSharedKeyResponse {
    return new GetSharedKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSharedKeyResponse {
    return new GetSharedKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSharedKeyResponse {
    return new GetSharedKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSharedKeyResponse | PlainMessage<GetSharedKeyResponse> | undefined, b: GetSharedKeyResponse | PlainMessage<GetSharedKeyResponse> | undefined): boolean {
    return proto3.util.equals(GetSharedKeyResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetKeyRequest
 */
export class SetKeyRequest extends Message<SetKeyRequest> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: bytes key = 2;
   */
  key = new Uint8Array(0);

  /**
   * @generated from field: int32 key_index = 3;
   */
  keyIndex = 0;

  constructor(data?: PartialMessage<SetKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetKeyRequest {
    return new SetKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetKeyRequest {
    return new SetKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetKeyRequest {
    return new SetKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetKeyRequest | PlainMessage<SetKeyRequest> | undefined, b: SetKeyRequest | PlainMessage<SetKeyRequest> | undefined): boolean {
    return proto3.util.equals(SetKeyRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetKeyResponse
 */
export class SetKeyResponse extends Message<SetKeyResponse> {
  constructor(data?: PartialMessage<SetKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetKeyResponse {
    return new SetKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetKeyResponse {
    return new SetKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetKeyResponse {
    return new SetKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetKeyResponse | PlainMessage<SetKeyResponse> | undefined, b: SetKeyResponse | PlainMessage<SetKeyResponse> | undefined): boolean {
    return proto3.util.equals(SetKeyResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.RatchetKeyRequest
 */
export class RatchetKeyRequest extends Message<RatchetKeyRequest> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: int32 key_index = 2;
   */
  keyIndex = 0;

  constructor(data?: PartialMessage<RatchetKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RatchetKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RatchetKeyRequest {
    return new RatchetKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RatchetKeyRequest {
    return new RatchetKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RatchetKeyRequest {
    return new RatchetKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RatchetKeyRequest | PlainMessage<RatchetKeyRequest> | undefined, b: RatchetKeyRequest | PlainMessage<RatchetKeyRequest> | undefined): boolean {
    return proto3.util.equals(RatchetKeyRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.RatchetKeyResponse
 */
export class RatchetKeyResponse extends Message<RatchetKeyResponse> {
  /**
   * @generated from field: optional bytes new_key = 1;
   */
  newKey?: Uint8Array;

  constructor(data?: PartialMessage<RatchetKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RatchetKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_key", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RatchetKeyResponse {
    return new RatchetKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RatchetKeyResponse {
    return new RatchetKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RatchetKeyResponse {
    return new RatchetKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RatchetKeyResponse | PlainMessage<RatchetKeyResponse> | undefined, b: RatchetKeyResponse | PlainMessage<RatchetKeyResponse> | undefined): boolean {
    return proto3.util.equals(RatchetKeyResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.GetKeyRequest
 */
export class GetKeyRequest extends Message<GetKeyRequest> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: int32 key_index = 2;
   */
  keyIndex = 0;

  constructor(data?: PartialMessage<GetKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.GetKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key_index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyRequest {
    return new GetKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyRequest {
    return new GetKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyRequest {
    return new GetKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyRequest | PlainMessage<GetKeyRequest> | undefined, b: GetKeyRequest | PlainMessage<GetKeyRequest> | undefined): boolean {
    return proto3.util.equals(GetKeyRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.GetKeyResponse
 */
export class GetKeyResponse extends Message<GetKeyResponse> {
  /**
   * @generated from field: optional bytes key = 1;
   */
  key?: Uint8Array;

  constructor(data?: PartialMessage<GetKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.GetKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyResponse {
    return new GetKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyResponse {
    return new GetKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyResponse {
    return new GetKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyResponse | PlainMessage<GetKeyResponse> | undefined, b: GetKeyResponse | PlainMessage<GetKeyResponse> | undefined): boolean {
    return proto3.util.equals(GetKeyResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.E2eeRequest
 */
export class E2eeRequest extends Message<E2eeRequest> {
  /**
   * @generated from field: uint64 room_handle = 1;
   */
  roomHandle = protoInt64.zero;

  /**
   * @generated from oneof livekit.proto.E2eeRequest.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.E2eeManagerSetEnabledRequest manager_set_enabled = 2;
     */
    value: E2eeManagerSetEnabledRequest;
    case: "managerSetEnabled";
  } | {
    /**
     * @generated from field: livekit.proto.E2eeManagerGetFrameCryptorsRequest manager_get_frame_cryptors = 3;
     */
    value: E2eeManagerGetFrameCryptorsRequest;
    case: "managerGetFrameCryptors";
  } | {
    /**
     * @generated from field: livekit.proto.FrameCryptorSetEnabledRequest cryptor_set_enabled = 4;
     */
    value: FrameCryptorSetEnabledRequest;
    case: "cryptorSetEnabled";
  } | {
    /**
     * @generated from field: livekit.proto.FrameCryptorSetKeyIndexRequest cryptor_set_key_index = 5;
     */
    value: FrameCryptorSetKeyIndexRequest;
    case: "cryptorSetKeyIndex";
  } | {
    /**
     * @generated from field: livekit.proto.SetSharedKeyRequest set_shared_key = 6;
     */
    value: SetSharedKeyRequest;
    case: "setSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.RatchetSharedKeyRequest ratchet_shared_key = 7;
     */
    value: RatchetSharedKeyRequest;
    case: "ratchetSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.GetSharedKeyRequest get_shared_key = 8;
     */
    value: GetSharedKeyRequest;
    case: "getSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.SetKeyRequest set_key = 9;
     */
    value: SetKeyRequest;
    case: "setKey";
  } | {
    /**
     * @generated from field: livekit.proto.RatchetKeyRequest ratchet_key = 10;
     */
    value: RatchetKeyRequest;
    case: "ratchetKey";
  } | {
    /**
     * @generated from field: livekit.proto.GetKeyRequest get_key = 11;
     */
    value: GetKeyRequest;
    case: "getKey";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<E2eeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.E2eeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "manager_set_enabled", kind: "message", T: E2eeManagerSetEnabledRequest, oneof: "message" },
    { no: 3, name: "manager_get_frame_cryptors", kind: "message", T: E2eeManagerGetFrameCryptorsRequest, oneof: "message" },
    { no: 4, name: "cryptor_set_enabled", kind: "message", T: FrameCryptorSetEnabledRequest, oneof: "message" },
    { no: 5, name: "cryptor_set_key_index", kind: "message", T: FrameCryptorSetKeyIndexRequest, oneof: "message" },
    { no: 6, name: "set_shared_key", kind: "message", T: SetSharedKeyRequest, oneof: "message" },
    { no: 7, name: "ratchet_shared_key", kind: "message", T: RatchetSharedKeyRequest, oneof: "message" },
    { no: 8, name: "get_shared_key", kind: "message", T: GetSharedKeyRequest, oneof: "message" },
    { no: 9, name: "set_key", kind: "message", T: SetKeyRequest, oneof: "message" },
    { no: 10, name: "ratchet_key", kind: "message", T: RatchetKeyRequest, oneof: "message" },
    { no: 11, name: "get_key", kind: "message", T: GetKeyRequest, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): E2eeRequest {
    return new E2eeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): E2eeRequest {
    return new E2eeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): E2eeRequest {
    return new E2eeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: E2eeRequest | PlainMessage<E2eeRequest> | undefined, b: E2eeRequest | PlainMessage<E2eeRequest> | undefined): boolean {
    return proto3.util.equals(E2eeRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.E2eeResponse
 */
export class E2eeResponse extends Message<E2eeResponse> {
  /**
   * @generated from oneof livekit.proto.E2eeResponse.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.E2eeManagerSetEnabledResponse manager_set_enabled = 1;
     */
    value: E2eeManagerSetEnabledResponse;
    case: "managerSetEnabled";
  } | {
    /**
     * @generated from field: livekit.proto.E2eeManagerGetFrameCryptorsResponse manager_get_frame_cryptors = 2;
     */
    value: E2eeManagerGetFrameCryptorsResponse;
    case: "managerGetFrameCryptors";
  } | {
    /**
     * @generated from field: livekit.proto.FrameCryptorSetEnabledResponse cryptor_set_enabled = 3;
     */
    value: FrameCryptorSetEnabledResponse;
    case: "cryptorSetEnabled";
  } | {
    /**
     * @generated from field: livekit.proto.FrameCryptorSetKeyIndexResponse cryptor_set_key_index = 4;
     */
    value: FrameCryptorSetKeyIndexResponse;
    case: "cryptorSetKeyIndex";
  } | {
    /**
     * @generated from field: livekit.proto.SetSharedKeyResponse set_shared_key = 5;
     */
    value: SetSharedKeyResponse;
    case: "setSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.RatchetSharedKeyResponse ratchet_shared_key = 6;
     */
    value: RatchetSharedKeyResponse;
    case: "ratchetSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.GetSharedKeyResponse get_shared_key = 7;
     */
    value: GetSharedKeyResponse;
    case: "getSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.SetKeyResponse set_key = 8;
     */
    value: SetKeyResponse;
    case: "setKey";
  } | {
    /**
     * @generated from field: livekit.proto.RatchetKeyResponse ratchet_key = 9;
     */
    value: RatchetKeyResponse;
    case: "ratchetKey";
  } | {
    /**
     * @generated from field: livekit.proto.GetKeyResponse get_key = 10;
     */
    value: GetKeyResponse;
    case: "getKey";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<E2eeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.E2eeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "manager_set_enabled", kind: "message", T: E2eeManagerSetEnabledResponse, oneof: "message" },
    { no: 2, name: "manager_get_frame_cryptors", kind: "message", T: E2eeManagerGetFrameCryptorsResponse, oneof: "message" },
    { no: 3, name: "cryptor_set_enabled", kind: "message", T: FrameCryptorSetEnabledResponse, oneof: "message" },
    { no: 4, name: "cryptor_set_key_index", kind: "message", T: FrameCryptorSetKeyIndexResponse, oneof: "message" },
    { no: 5, name: "set_shared_key", kind: "message", T: SetSharedKeyResponse, oneof: "message" },
    { no: 6, name: "ratchet_shared_key", kind: "message", T: RatchetSharedKeyResponse, oneof: "message" },
    { no: 7, name: "get_shared_key", kind: "message", T: GetSharedKeyResponse, oneof: "message" },
    { no: 8, name: "set_key", kind: "message", T: SetKeyResponse, oneof: "message" },
    { no: 9, name: "ratchet_key", kind: "message", T: RatchetKeyResponse, oneof: "message" },
    { no: 10, name: "get_key", kind: "message", T: GetKeyResponse, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): E2eeResponse {
    return new E2eeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): E2eeResponse {
    return new E2eeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): E2eeResponse {
    return new E2eeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: E2eeResponse | PlainMessage<E2eeResponse> | undefined, b: E2eeResponse | PlainMessage<E2eeResponse> | undefined): boolean {
    return proto3.util.equals(E2eeResponse, a, b);
  }
}

