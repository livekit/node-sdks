// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.2.0 with parameter "target=ts,import_extension=js"
// @generated from file e2ee.proto (package livekit.proto, syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file e2ee.proto.
 */
export const file_e2ee: GenFile = /*@__PURE__*/
  fileDesc("CgplMmVlLnByb3RvEg1saXZla2l0LnByb3RvImMKDEZyYW1lQ3J5cHRvchIcChRwYXJ0aWNpcGFudF9pZGVudGl0eRgBIAIoCRIRCgl0cmFja19zaWQYAiACKAkSEQoJa2V5X2luZGV4GAMgAigFEg8KB2VuYWJsZWQYBCACKAgidgoSS2V5UHJvdmlkZXJPcHRpb25zEhIKCnNoYXJlZF9rZXkYASABKAwSGwoTcmF0Y2hldF93aW5kb3dfc2l6ZRgCIAIoBRIUCgxyYXRjaGV0X3NhbHQYAyACKAwSGQoRZmFpbHVyZV90b2xlcmFuY2UYBCACKAUihgEKC0UyZWVPcHRpb25zEjYKD2VuY3J5cHRpb25fdHlwZRgBIAIoDjIdLmxpdmVraXQucHJvdG8uRW5jcnlwdGlvblR5cGUSPwoUa2V5X3Byb3ZpZGVyX29wdGlvbnMYAiACKAsyIS5saXZla2l0LnByb3RvLktleVByb3ZpZGVyT3B0aW9ucyIvChxFMmVlTWFuYWdlclNldEVuYWJsZWRSZXF1ZXN0Eg8KB2VuYWJsZWQYASACKAgiHwodRTJlZU1hbmFnZXJTZXRFbmFibGVkUmVzcG9uc2UiJAoiRTJlZU1hbmFnZXJHZXRGcmFtZUNyeXB0b3JzUmVxdWVzdCJaCiNFMmVlTWFuYWdlckdldEZyYW1lQ3J5cHRvcnNSZXNwb25zZRIzCg5mcmFtZV9jcnlwdG9ycxgBIAMoCzIbLmxpdmVraXQucHJvdG8uRnJhbWVDcnlwdG9yImEKHUZyYW1lQ3J5cHRvclNldEVuYWJsZWRSZXF1ZXN0EhwKFHBhcnRpY2lwYW50X2lkZW50aXR5GAEgAigJEhEKCXRyYWNrX3NpZBgCIAIoCRIPCgdlbmFibGVkGAMgAigIIiAKHkZyYW1lQ3J5cHRvclNldEVuYWJsZWRSZXNwb25zZSJkCh5GcmFtZUNyeXB0b3JTZXRLZXlJbmRleFJlcXVlc3QSHAoUcGFydGljaXBhbnRfaWRlbnRpdHkYASACKAkSEQoJdHJhY2tfc2lkGAIgAigJEhEKCWtleV9pbmRleBgDIAIoBSIhCh9GcmFtZUNyeXB0b3JTZXRLZXlJbmRleFJlc3BvbnNlIjwKE1NldFNoYXJlZEtleVJlcXVlc3QSEgoKc2hhcmVkX2tleRgBIAIoDBIRCglrZXlfaW5kZXgYAiACKAUiFgoUU2V0U2hhcmVkS2V5UmVzcG9uc2UiLAoXUmF0Y2hldFNoYXJlZEtleVJlcXVlc3QSEQoJa2V5X2luZGV4GAEgAigFIisKGFJhdGNoZXRTaGFyZWRLZXlSZXNwb25zZRIPCgduZXdfa2V5GAEgASgMIigKE0dldFNoYXJlZEtleVJlcXVlc3QSEQoJa2V5X2luZGV4GAEgAigFIiMKFEdldFNoYXJlZEtleVJlc3BvbnNlEgsKA2tleRgBIAEoDCJNCg1TZXRLZXlSZXF1ZXN0EhwKFHBhcnRpY2lwYW50X2lkZW50aXR5GAEgAigJEgsKA2tleRgCIAIoDBIRCglrZXlfaW5kZXgYAyACKAUiEAoOU2V0S2V5UmVzcG9uc2UiRAoRUmF0Y2hldEtleVJlcXVlc3QSHAoUcGFydGljaXBhbnRfaWRlbnRpdHkYASACKAkSEQoJa2V5X2luZGV4GAIgAigFIiUKElJhdGNoZXRLZXlSZXNwb25zZRIPCgduZXdfa2V5GAEgASgMIkAKDUdldEtleVJlcXVlc3QSHAoUcGFydGljaXBhbnRfaWRlbnRpdHkYASACKAkSEQoJa2V5X2luZGV4GAIgAigFIh0KDkdldEtleVJlc3BvbnNlEgsKA2tleRgBIAEoDCLMBQoLRTJlZVJlcXVlc3QSEwoLcm9vbV9oYW5kbGUYASACKAQSSgoTbWFuYWdlcl9zZXRfZW5hYmxlZBgCIAEoCzIrLmxpdmVraXQucHJvdG8uRTJlZU1hbmFnZXJTZXRFbmFibGVkUmVxdWVzdEgAElcKGm1hbmFnZXJfZ2V0X2ZyYW1lX2NyeXB0b3JzGAMgASgLMjEubGl2ZWtpdC5wcm90by5FMmVlTWFuYWdlckdldEZyYW1lQ3J5cHRvcnNSZXF1ZXN0SAASSwoTY3J5cHRvcl9zZXRfZW5hYmxlZBgEIAEoCzIsLmxpdmVraXQucHJvdG8uRnJhbWVDcnlwdG9yU2V0RW5hYmxlZFJlcXVlc3RIABJOChVjcnlwdG9yX3NldF9rZXlfaW5kZXgYBSABKAsyLS5saXZla2l0LnByb3RvLkZyYW1lQ3J5cHRvclNldEtleUluZGV4UmVxdWVzdEgAEjwKDnNldF9zaGFyZWRfa2V5GAYgASgLMiIubGl2ZWtpdC5wcm90by5TZXRTaGFyZWRLZXlSZXF1ZXN0SAASRAoScmF0Y2hldF9zaGFyZWRfa2V5GAcgASgLMiYubGl2ZWtpdC5wcm90by5SYXRjaGV0U2hhcmVkS2V5UmVxdWVzdEgAEjwKDmdldF9zaGFyZWRfa2V5GAggASgLMiIubGl2ZWtpdC5wcm90by5HZXRTaGFyZWRLZXlSZXF1ZXN0SAASLwoHc2V0X2tleRgJIAEoCzIcLmxpdmVraXQucHJvdG8uU2V0S2V5UmVxdWVzdEgAEjcKC3JhdGNoZXRfa2V5GAogASgLMiAubGl2ZWtpdC5wcm90by5SYXRjaGV0S2V5UmVxdWVzdEgAEi8KB2dldF9rZXkYCyABKAsyHC5saXZla2l0LnByb3RvLkdldEtleVJlcXVlc3RIAEIJCgdtZXNzYWdlIsIFCgxFMmVlUmVzcG9uc2USSwoTbWFuYWdlcl9zZXRfZW5hYmxlZBgBIAEoCzIsLmxpdmVraXQucHJvdG8uRTJlZU1hbmFnZXJTZXRFbmFibGVkUmVzcG9uc2VIABJYChptYW5hZ2VyX2dldF9mcmFtZV9jcnlwdG9ycxgCIAEoCzIyLmxpdmVraXQucHJvdG8uRTJlZU1hbmFnZXJHZXRGcmFtZUNyeXB0b3JzUmVzcG9uc2VIABJMChNjcnlwdG9yX3NldF9lbmFibGVkGAMgASgLMi0ubGl2ZWtpdC5wcm90by5GcmFtZUNyeXB0b3JTZXRFbmFibGVkUmVzcG9uc2VIABJPChVjcnlwdG9yX3NldF9rZXlfaW5kZXgYBCABKAsyLi5saXZla2l0LnByb3RvLkZyYW1lQ3J5cHRvclNldEtleUluZGV4UmVzcG9uc2VIABI9Cg5zZXRfc2hhcmVkX2tleRgFIAEoCzIjLmxpdmVraXQucHJvdG8uU2V0U2hhcmVkS2V5UmVzcG9uc2VIABJFChJyYXRjaGV0X3NoYXJlZF9rZXkYBiABKAsyJy5saXZla2l0LnByb3RvLlJhdGNoZXRTaGFyZWRLZXlSZXNwb25zZUgAEj0KDmdldF9zaGFyZWRfa2V5GAcgASgLMiMubGl2ZWtpdC5wcm90by5HZXRTaGFyZWRLZXlSZXNwb25zZUgAEjAKB3NldF9rZXkYCCABKAsyHS5saXZla2l0LnByb3RvLlNldEtleVJlc3BvbnNlSAASOAoLcmF0Y2hldF9rZXkYCSABKAsyIS5saXZla2l0LnByb3RvLlJhdGNoZXRLZXlSZXNwb25zZUgAEjAKB2dldF9rZXkYCiABKAsyHS5saXZla2l0LnByb3RvLkdldEtleVJlc3BvbnNlSABCCQoHbWVzc2FnZSovCg5FbmNyeXB0aW9uVHlwZRIICgROT05FEAASBwoDR0NNEAESCgoGQ1VTVE9NEAIqiAEKD0VuY3J5cHRpb25TdGF0ZRIHCgNORVcQABIGCgJPSxABEhUKEUVOQ1JZUFRJT05fRkFJTEVEEAISFQoRREVDUllQVElPTl9GQUlMRUQQAxIPCgtNSVNTSU5HX0tFWRAEEhEKDUtFWV9SQVRDSEVURUQQBRISCg5JTlRFUk5BTF9FUlJPUhAGQhCqAg1MaXZlS2l0LlByb3Rv");

/**
 * @generated from message livekit.proto.FrameCryptor
 */
export type FrameCryptor = Message<"livekit.proto.FrameCryptor"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string track_sid = 2;
   */
  trackSid: string;

  /**
   * @generated from field: required int32 key_index = 3;
   */
  keyIndex: number;

  /**
   * @generated from field: required bool enabled = 4;
   */
  enabled: boolean;
};

/**
 * Describes the message livekit.proto.FrameCryptor.
 * Use `create(FrameCryptorSchema)` to create a new message.
 */
export const FrameCryptorSchema: GenMessage<FrameCryptor> = /*@__PURE__*/
  messageDesc(file_e2ee, 0);

/**
 * @generated from message livekit.proto.KeyProviderOptions
 */
export type KeyProviderOptions = Message<"livekit.proto.KeyProviderOptions"> & {
  /**
   * Only specify if you want to use a shared_key
   *
   * @generated from field: optional bytes shared_key = 1;
   */
  sharedKey: Uint8Array;

  /**
   * @generated from field: required int32 ratchet_window_size = 2;
   */
  ratchetWindowSize: number;

  /**
   * @generated from field: required bytes ratchet_salt = 3;
   */
  ratchetSalt: Uint8Array;

  /**
   * -1 = no tolerance
   *
   * @generated from field: required int32 failure_tolerance = 4;
   */
  failureTolerance: number;
};

/**
 * Describes the message livekit.proto.KeyProviderOptions.
 * Use `create(KeyProviderOptionsSchema)` to create a new message.
 */
export const KeyProviderOptionsSchema: GenMessage<KeyProviderOptions> = /*@__PURE__*/
  messageDesc(file_e2ee, 1);

/**
 * @generated from message livekit.proto.E2eeOptions
 */
export type E2eeOptions = Message<"livekit.proto.E2eeOptions"> & {
  /**
   * @generated from field: required livekit.proto.EncryptionType encryption_type = 1;
   */
  encryptionType: EncryptionType;

  /**
   * @generated from field: required livekit.proto.KeyProviderOptions key_provider_options = 2;
   */
  keyProviderOptions?: KeyProviderOptions;
};

/**
 * Describes the message livekit.proto.E2eeOptions.
 * Use `create(E2eeOptionsSchema)` to create a new message.
 */
export const E2eeOptionsSchema: GenMessage<E2eeOptions> = /*@__PURE__*/
  messageDesc(file_e2ee, 2);

/**
 * @generated from message livekit.proto.E2eeManagerSetEnabledRequest
 */
export type E2eeManagerSetEnabledRequest = Message<"livekit.proto.E2eeManagerSetEnabledRequest"> & {
  /**
   * @generated from field: required bool enabled = 1;
   */
  enabled: boolean;
};

/**
 * Describes the message livekit.proto.E2eeManagerSetEnabledRequest.
 * Use `create(E2eeManagerSetEnabledRequestSchema)` to create a new message.
 */
export const E2eeManagerSetEnabledRequestSchema: GenMessage<E2eeManagerSetEnabledRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 3);

/**
 * @generated from message livekit.proto.E2eeManagerSetEnabledResponse
 */
export type E2eeManagerSetEnabledResponse = Message<"livekit.proto.E2eeManagerSetEnabledResponse"> & {
};

/**
 * Describes the message livekit.proto.E2eeManagerSetEnabledResponse.
 * Use `create(E2eeManagerSetEnabledResponseSchema)` to create a new message.
 */
export const E2eeManagerSetEnabledResponseSchema: GenMessage<E2eeManagerSetEnabledResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 4);

/**
 * @generated from message livekit.proto.E2eeManagerGetFrameCryptorsRequest
 */
export type E2eeManagerGetFrameCryptorsRequest = Message<"livekit.proto.E2eeManagerGetFrameCryptorsRequest"> & {
};

/**
 * Describes the message livekit.proto.E2eeManagerGetFrameCryptorsRequest.
 * Use `create(E2eeManagerGetFrameCryptorsRequestSchema)` to create a new message.
 */
export const E2eeManagerGetFrameCryptorsRequestSchema: GenMessage<E2eeManagerGetFrameCryptorsRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 5);

/**
 * @generated from message livekit.proto.E2eeManagerGetFrameCryptorsResponse
 */
export type E2eeManagerGetFrameCryptorsResponse = Message<"livekit.proto.E2eeManagerGetFrameCryptorsResponse"> & {
  /**
   * @generated from field: repeated livekit.proto.FrameCryptor frame_cryptors = 1;
   */
  frameCryptors: FrameCryptor[];
};

/**
 * Describes the message livekit.proto.E2eeManagerGetFrameCryptorsResponse.
 * Use `create(E2eeManagerGetFrameCryptorsResponseSchema)` to create a new message.
 */
export const E2eeManagerGetFrameCryptorsResponseSchema: GenMessage<E2eeManagerGetFrameCryptorsResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 6);

/**
 * @generated from message livekit.proto.FrameCryptorSetEnabledRequest
 */
export type FrameCryptorSetEnabledRequest = Message<"livekit.proto.FrameCryptorSetEnabledRequest"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string track_sid = 2;
   */
  trackSid: string;

  /**
   * @generated from field: required bool enabled = 3;
   */
  enabled: boolean;
};

/**
 * Describes the message livekit.proto.FrameCryptorSetEnabledRequest.
 * Use `create(FrameCryptorSetEnabledRequestSchema)` to create a new message.
 */
export const FrameCryptorSetEnabledRequestSchema: GenMessage<FrameCryptorSetEnabledRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 7);

/**
 * @generated from message livekit.proto.FrameCryptorSetEnabledResponse
 */
export type FrameCryptorSetEnabledResponse = Message<"livekit.proto.FrameCryptorSetEnabledResponse"> & {
};

/**
 * Describes the message livekit.proto.FrameCryptorSetEnabledResponse.
 * Use `create(FrameCryptorSetEnabledResponseSchema)` to create a new message.
 */
export const FrameCryptorSetEnabledResponseSchema: GenMessage<FrameCryptorSetEnabledResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 8);

/**
 * @generated from message livekit.proto.FrameCryptorSetKeyIndexRequest
 */
export type FrameCryptorSetKeyIndexRequest = Message<"livekit.proto.FrameCryptorSetKeyIndexRequest"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string track_sid = 2;
   */
  trackSid: string;

  /**
   * @generated from field: required int32 key_index = 3;
   */
  keyIndex: number;
};

/**
 * Describes the message livekit.proto.FrameCryptorSetKeyIndexRequest.
 * Use `create(FrameCryptorSetKeyIndexRequestSchema)` to create a new message.
 */
export const FrameCryptorSetKeyIndexRequestSchema: GenMessage<FrameCryptorSetKeyIndexRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 9);

/**
 * @generated from message livekit.proto.FrameCryptorSetKeyIndexResponse
 */
export type FrameCryptorSetKeyIndexResponse = Message<"livekit.proto.FrameCryptorSetKeyIndexResponse"> & {
};

/**
 * Describes the message livekit.proto.FrameCryptorSetKeyIndexResponse.
 * Use `create(FrameCryptorSetKeyIndexResponseSchema)` to create a new message.
 */
export const FrameCryptorSetKeyIndexResponseSchema: GenMessage<FrameCryptorSetKeyIndexResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 10);

/**
 * @generated from message livekit.proto.SetSharedKeyRequest
 */
export type SetSharedKeyRequest = Message<"livekit.proto.SetSharedKeyRequest"> & {
  /**
   * @generated from field: required bytes shared_key = 1;
   */
  sharedKey: Uint8Array;

  /**
   * @generated from field: required int32 key_index = 2;
   */
  keyIndex: number;
};

/**
 * Describes the message livekit.proto.SetSharedKeyRequest.
 * Use `create(SetSharedKeyRequestSchema)` to create a new message.
 */
export const SetSharedKeyRequestSchema: GenMessage<SetSharedKeyRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 11);

/**
 * @generated from message livekit.proto.SetSharedKeyResponse
 */
export type SetSharedKeyResponse = Message<"livekit.proto.SetSharedKeyResponse"> & {
};

/**
 * Describes the message livekit.proto.SetSharedKeyResponse.
 * Use `create(SetSharedKeyResponseSchema)` to create a new message.
 */
export const SetSharedKeyResponseSchema: GenMessage<SetSharedKeyResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 12);

/**
 * @generated from message livekit.proto.RatchetSharedKeyRequest
 */
export type RatchetSharedKeyRequest = Message<"livekit.proto.RatchetSharedKeyRequest"> & {
  /**
   * @generated from field: required int32 key_index = 1;
   */
  keyIndex: number;
};

/**
 * Describes the message livekit.proto.RatchetSharedKeyRequest.
 * Use `create(RatchetSharedKeyRequestSchema)` to create a new message.
 */
export const RatchetSharedKeyRequestSchema: GenMessage<RatchetSharedKeyRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 13);

/**
 * @generated from message livekit.proto.RatchetSharedKeyResponse
 */
export type RatchetSharedKeyResponse = Message<"livekit.proto.RatchetSharedKeyResponse"> & {
  /**
   * @generated from field: optional bytes new_key = 1;
   */
  newKey: Uint8Array;
};

/**
 * Describes the message livekit.proto.RatchetSharedKeyResponse.
 * Use `create(RatchetSharedKeyResponseSchema)` to create a new message.
 */
export const RatchetSharedKeyResponseSchema: GenMessage<RatchetSharedKeyResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 14);

/**
 * @generated from message livekit.proto.GetSharedKeyRequest
 */
export type GetSharedKeyRequest = Message<"livekit.proto.GetSharedKeyRequest"> & {
  /**
   * @generated from field: required int32 key_index = 1;
   */
  keyIndex: number;
};

/**
 * Describes the message livekit.proto.GetSharedKeyRequest.
 * Use `create(GetSharedKeyRequestSchema)` to create a new message.
 */
export const GetSharedKeyRequestSchema: GenMessage<GetSharedKeyRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 15);

/**
 * @generated from message livekit.proto.GetSharedKeyResponse
 */
export type GetSharedKeyResponse = Message<"livekit.proto.GetSharedKeyResponse"> & {
  /**
   * @generated from field: optional bytes key = 1;
   */
  key: Uint8Array;
};

/**
 * Describes the message livekit.proto.GetSharedKeyResponse.
 * Use `create(GetSharedKeyResponseSchema)` to create a new message.
 */
export const GetSharedKeyResponseSchema: GenMessage<GetSharedKeyResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 16);

/**
 * @generated from message livekit.proto.SetKeyRequest
 */
export type SetKeyRequest = Message<"livekit.proto.SetKeyRequest"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required bytes key = 2;
   */
  key: Uint8Array;

  /**
   * @generated from field: required int32 key_index = 3;
   */
  keyIndex: number;
};

/**
 * Describes the message livekit.proto.SetKeyRequest.
 * Use `create(SetKeyRequestSchema)` to create a new message.
 */
export const SetKeyRequestSchema: GenMessage<SetKeyRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 17);

/**
 * @generated from message livekit.proto.SetKeyResponse
 */
export type SetKeyResponse = Message<"livekit.proto.SetKeyResponse"> & {
};

/**
 * Describes the message livekit.proto.SetKeyResponse.
 * Use `create(SetKeyResponseSchema)` to create a new message.
 */
export const SetKeyResponseSchema: GenMessage<SetKeyResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 18);

/**
 * @generated from message livekit.proto.RatchetKeyRequest
 */
export type RatchetKeyRequest = Message<"livekit.proto.RatchetKeyRequest"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required int32 key_index = 2;
   */
  keyIndex: number;
};

/**
 * Describes the message livekit.proto.RatchetKeyRequest.
 * Use `create(RatchetKeyRequestSchema)` to create a new message.
 */
export const RatchetKeyRequestSchema: GenMessage<RatchetKeyRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 19);

/**
 * @generated from message livekit.proto.RatchetKeyResponse
 */
export type RatchetKeyResponse = Message<"livekit.proto.RatchetKeyResponse"> & {
  /**
   * @generated from field: optional bytes new_key = 1;
   */
  newKey: Uint8Array;
};

/**
 * Describes the message livekit.proto.RatchetKeyResponse.
 * Use `create(RatchetKeyResponseSchema)` to create a new message.
 */
export const RatchetKeyResponseSchema: GenMessage<RatchetKeyResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 20);

/**
 * @generated from message livekit.proto.GetKeyRequest
 */
export type GetKeyRequest = Message<"livekit.proto.GetKeyRequest"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required int32 key_index = 2;
   */
  keyIndex: number;
};

/**
 * Describes the message livekit.proto.GetKeyRequest.
 * Use `create(GetKeyRequestSchema)` to create a new message.
 */
export const GetKeyRequestSchema: GenMessage<GetKeyRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 21);

/**
 * @generated from message livekit.proto.GetKeyResponse
 */
export type GetKeyResponse = Message<"livekit.proto.GetKeyResponse"> & {
  /**
   * @generated from field: optional bytes key = 1;
   */
  key: Uint8Array;
};

/**
 * Describes the message livekit.proto.GetKeyResponse.
 * Use `create(GetKeyResponseSchema)` to create a new message.
 */
export const GetKeyResponseSchema: GenMessage<GetKeyResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 22);

/**
 * @generated from message livekit.proto.E2eeRequest
 */
export type E2eeRequest = Message<"livekit.proto.E2eeRequest"> & {
  /**
   * @generated from field: required uint64 room_handle = 1;
   */
  roomHandle: bigint;

  /**
   * @generated from oneof livekit.proto.E2eeRequest.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.E2eeManagerSetEnabledRequest manager_set_enabled = 2;
     */
    value: E2eeManagerSetEnabledRequest;
    case: "managerSetEnabled";
  } | {
    /**
     * @generated from field: livekit.proto.E2eeManagerGetFrameCryptorsRequest manager_get_frame_cryptors = 3;
     */
    value: E2eeManagerGetFrameCryptorsRequest;
    case: "managerGetFrameCryptors";
  } | {
    /**
     * @generated from field: livekit.proto.FrameCryptorSetEnabledRequest cryptor_set_enabled = 4;
     */
    value: FrameCryptorSetEnabledRequest;
    case: "cryptorSetEnabled";
  } | {
    /**
     * @generated from field: livekit.proto.FrameCryptorSetKeyIndexRequest cryptor_set_key_index = 5;
     */
    value: FrameCryptorSetKeyIndexRequest;
    case: "cryptorSetKeyIndex";
  } | {
    /**
     * @generated from field: livekit.proto.SetSharedKeyRequest set_shared_key = 6;
     */
    value: SetSharedKeyRequest;
    case: "setSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.RatchetSharedKeyRequest ratchet_shared_key = 7;
     */
    value: RatchetSharedKeyRequest;
    case: "ratchetSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.GetSharedKeyRequest get_shared_key = 8;
     */
    value: GetSharedKeyRequest;
    case: "getSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.SetKeyRequest set_key = 9;
     */
    value: SetKeyRequest;
    case: "setKey";
  } | {
    /**
     * @generated from field: livekit.proto.RatchetKeyRequest ratchet_key = 10;
     */
    value: RatchetKeyRequest;
    case: "ratchetKey";
  } | {
    /**
     * @generated from field: livekit.proto.GetKeyRequest get_key = 11;
     */
    value: GetKeyRequest;
    case: "getKey";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.E2eeRequest.
 * Use `create(E2eeRequestSchema)` to create a new message.
 */
export const E2eeRequestSchema: GenMessage<E2eeRequest> = /*@__PURE__*/
  messageDesc(file_e2ee, 23);

/**
 * @generated from message livekit.proto.E2eeResponse
 */
export type E2eeResponse = Message<"livekit.proto.E2eeResponse"> & {
  /**
   * @generated from oneof livekit.proto.E2eeResponse.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.E2eeManagerSetEnabledResponse manager_set_enabled = 1;
     */
    value: E2eeManagerSetEnabledResponse;
    case: "managerSetEnabled";
  } | {
    /**
     * @generated from field: livekit.proto.E2eeManagerGetFrameCryptorsResponse manager_get_frame_cryptors = 2;
     */
    value: E2eeManagerGetFrameCryptorsResponse;
    case: "managerGetFrameCryptors";
  } | {
    /**
     * @generated from field: livekit.proto.FrameCryptorSetEnabledResponse cryptor_set_enabled = 3;
     */
    value: FrameCryptorSetEnabledResponse;
    case: "cryptorSetEnabled";
  } | {
    /**
     * @generated from field: livekit.proto.FrameCryptorSetKeyIndexResponse cryptor_set_key_index = 4;
     */
    value: FrameCryptorSetKeyIndexResponse;
    case: "cryptorSetKeyIndex";
  } | {
    /**
     * @generated from field: livekit.proto.SetSharedKeyResponse set_shared_key = 5;
     */
    value: SetSharedKeyResponse;
    case: "setSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.RatchetSharedKeyResponse ratchet_shared_key = 6;
     */
    value: RatchetSharedKeyResponse;
    case: "ratchetSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.GetSharedKeyResponse get_shared_key = 7;
     */
    value: GetSharedKeyResponse;
    case: "getSharedKey";
  } | {
    /**
     * @generated from field: livekit.proto.SetKeyResponse set_key = 8;
     */
    value: SetKeyResponse;
    case: "setKey";
  } | {
    /**
     * @generated from field: livekit.proto.RatchetKeyResponse ratchet_key = 9;
     */
    value: RatchetKeyResponse;
    case: "ratchetKey";
  } | {
    /**
     * @generated from field: livekit.proto.GetKeyResponse get_key = 10;
     */
    value: GetKeyResponse;
    case: "getKey";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.E2eeResponse.
 * Use `create(E2eeResponseSchema)` to create a new message.
 */
export const E2eeResponseSchema: GenMessage<E2eeResponse> = /*@__PURE__*/
  messageDesc(file_e2ee, 24);

/**
 * @generated from enum livekit.proto.EncryptionType
 */
export enum EncryptionType {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: GCM = 1;
   */
  GCM = 1,

  /**
   * @generated from enum value: CUSTOM = 2;
   */
  CUSTOM = 2,
}

/**
 * Describes the enum livekit.proto.EncryptionType.
 */
export const EncryptionTypeSchema: GenEnum<EncryptionType> = /*@__PURE__*/
  enumDesc(file_e2ee, 0);

/**
 * @generated from enum livekit.proto.EncryptionState
 */
export enum EncryptionState {
  /**
   * @generated from enum value: NEW = 0;
   */
  NEW = 0,

  /**
   * @generated from enum value: OK = 1;
   */
  OK = 1,

  /**
   * @generated from enum value: ENCRYPTION_FAILED = 2;
   */
  ENCRYPTION_FAILED = 2,

  /**
   * @generated from enum value: DECRYPTION_FAILED = 3;
   */
  DECRYPTION_FAILED = 3,

  /**
   * @generated from enum value: MISSING_KEY = 4;
   */
  MISSING_KEY = 4,

  /**
   * @generated from enum value: KEY_RATCHETED = 5;
   */
  KEY_RATCHETED = 5,

  /**
   * @generated from enum value: INTERNAL_ERROR = 6;
   */
  INTERNAL_ERROR = 6,
}

/**
 * Describes the enum livekit.proto.EncryptionState.
 */
export const EncryptionStateSchema: GenEnum<EncryptionState> = /*@__PURE__*/
  enumDesc(file_e2ee, 1);

