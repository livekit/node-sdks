// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.2.0 with parameter "target=ts,import_extension=js"
// @generated from file ffi.proto (package livekit.proto, syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { E2eeRequest, E2eeResponse } from "./e2ee_pb.js";
import { file_e2ee } from "./e2ee_pb.js";
import type { CreateAudioTrackRequest, CreateAudioTrackResponse, CreateVideoTrackRequest, CreateVideoTrackResponse, EnableRemoteTrackRequest, EnableRemoteTrackResponse, GetStatsCallback, GetStatsRequest, GetStatsResponse, LocalTrackMuteRequest, LocalTrackMuteResponse, TrackEvent } from "./track_pb.js";
import { file_track } from "./track_pb.js";
import type { ConnectCallback, ConnectRequest, ConnectResponse, DisconnectCallback, DisconnectRequest, DisconnectResponse, EditChatMessageRequest, GetSessionStatsCallback, GetSessionStatsRequest, GetSessionStatsResponse, PublishDataCallback, PublishDataRequest, PublishDataResponse, PublishSipDtmfCallback, PublishSipDtmfRequest, PublishSipDtmfResponse, PublishTrackCallback, PublishTrackRequest, PublishTrackResponse, PublishTranscriptionCallback, PublishTranscriptionRequest, PublishTranscriptionResponse, RoomEvent, SendChatMessageCallback, SendChatMessageRequest, SendChatMessageResponse, SetLocalAttributesCallback, SetLocalAttributesRequest, SetLocalAttributesResponse, SetLocalMetadataCallback, SetLocalMetadataRequest, SetLocalMetadataResponse, SetLocalNameCallback, SetLocalNameRequest, SetLocalNameResponse, SetSubscribedRequest, SetSubscribedResponse, UnpublishTrackCallback, UnpublishTrackRequest, UnpublishTrackResponse } from "./room_pb.js";
import { file_room } from "./room_pb.js";
import type { CaptureVideoFrameRequest, CaptureVideoFrameResponse, NewVideoSourceRequest, NewVideoSourceResponse, NewVideoStreamRequest, NewVideoStreamResponse, VideoConvertRequest, VideoConvertResponse, VideoStreamEvent, VideoStreamFromParticipantRequest, VideoStreamFromParticipantResponse } from "./video_frame_pb.js";
import { file_video_frame } from "./video_frame_pb.js";
import type { AudioStreamEvent, AudioStreamFromParticipantRequest, AudioStreamFromParticipantResponse, CaptureAudioFrameCallback, CaptureAudioFrameRequest, CaptureAudioFrameResponse, ClearAudioBufferRequest, ClearAudioBufferResponse, FlushSoxResamplerRequest, FlushSoxResamplerResponse, NewAudioResamplerRequest, NewAudioResamplerResponse, NewAudioSourceRequest, NewAudioSourceResponse, NewAudioStreamRequest, NewAudioStreamResponse, NewSoxResamplerRequest, NewSoxResamplerResponse, PushSoxResamplerRequest, PushSoxResamplerResponse, RemixAndResampleRequest, RemixAndResampleResponse } from "./audio_frame_pb.js";
import { file_audio_frame } from "./audio_frame_pb.js";
import type { PerformRpcCallback, PerformRpcRequest, PerformRpcResponse, RegisterRpcMethodRequest, RegisterRpcMethodResponse, RpcMethodInvocationEvent, RpcMethodInvocationResponseRequest, RpcMethodInvocationResponseResponse, UnregisterRpcMethodRequest, UnregisterRpcMethodResponse } from "./rpc_pb.js";
import { file_rpc } from "./rpc_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file ffi.proto.
 */
export const file_ffi: GenFile = /*@__PURE__*/
  fileDesc("CglmZmkucHJvdG8SDWxpdmVraXQucHJvdG8iphUKCkZmaVJlcXVlc3QSMAoHZGlzcG9zZRgCIAEoCzIdLmxpdmVraXQucHJvdG8uRGlzcG9zZVJlcXVlc3RIABIwCgdjb25uZWN0GAMgASgLMh0ubGl2ZWtpdC5wcm90by5Db25uZWN0UmVxdWVzdEgAEjYKCmRpc2Nvbm5lY3QYBCABKAsyIC5saXZla2l0LnByb3RvLkRpc2Nvbm5lY3RSZXF1ZXN0SAASOwoNcHVibGlzaF90cmFjaxgFIAEoCzIiLmxpdmVraXQucHJvdG8uUHVibGlzaFRyYWNrUmVxdWVzdEgAEj8KD3VucHVibGlzaF90cmFjaxgGIAEoCzIkLmxpdmVraXQucHJvdG8uVW5wdWJsaXNoVHJhY2tSZXF1ZXN0SAASOQoMcHVibGlzaF9kYXRhGAcgASgLMiEubGl2ZWtpdC5wcm90by5QdWJsaXNoRGF0YVJlcXVlc3RIABI9Cg5zZXRfc3Vic2NyaWJlZBgIIAEoCzIjLmxpdmVraXQucHJvdG8uU2V0U3Vic2NyaWJlZFJlcXVlc3RIABJEChJzZXRfbG9jYWxfbWV0YWRhdGEYCSABKAsyJi5saXZla2l0LnByb3RvLlNldExvY2FsTWV0YWRhdGFSZXF1ZXN0SAASPAoOc2V0X2xvY2FsX25hbWUYCiABKAsyIi5saXZla2l0LnByb3RvLlNldExvY2FsTmFtZVJlcXVlc3RIABJIChRzZXRfbG9jYWxfYXR0cmlidXRlcxgLIAEoCzIoLmxpdmVraXQucHJvdG8uU2V0TG9jYWxBdHRyaWJ1dGVzUmVxdWVzdEgAEkIKEWdldF9zZXNzaW9uX3N0YXRzGAwgASgLMiUubGl2ZWtpdC5wcm90by5HZXRTZXNzaW9uU3RhdHNSZXF1ZXN0SAASSwoVcHVibGlzaF90cmFuc2NyaXB0aW9uGA0gASgLMioubGl2ZWtpdC5wcm90by5QdWJsaXNoVHJhbnNjcmlwdGlvblJlcXVlc3RIABJAChBwdWJsaXNoX3NpcF9kdG1mGA4gASgLMiQubGl2ZWtpdC5wcm90by5QdWJsaXNoU2lwRHRtZlJlcXVlc3RIABJEChJjcmVhdGVfdmlkZW9fdHJhY2sYDyABKAsyJi5saXZla2l0LnByb3RvLkNyZWF0ZVZpZGVvVHJhY2tSZXF1ZXN0SAASRAoSY3JlYXRlX2F1ZGlvX3RyYWNrGBAgASgLMiYubGl2ZWtpdC5wcm90by5DcmVhdGVBdWRpb1RyYWNrUmVxdWVzdEgAEkAKEGxvY2FsX3RyYWNrX211dGUYESABKAsyJC5saXZla2l0LnByb3RvLkxvY2FsVHJhY2tNdXRlUmVxdWVzdEgAEkYKE2VuYWJsZV9yZW1vdGVfdHJhY2sYEiABKAsyJy5saXZla2l0LnByb3RvLkVuYWJsZVJlbW90ZVRyYWNrUmVxdWVzdEgAEjMKCWdldF9zdGF0cxgTIAEoCzIeLmxpdmVraXQucHJvdG8uR2V0U3RhdHNSZXF1ZXN0SAASQAoQbmV3X3ZpZGVvX3N0cmVhbRgUIAEoCzIkLmxpdmVraXQucHJvdG8uTmV3VmlkZW9TdHJlYW1SZXF1ZXN0SAASQAoQbmV3X3ZpZGVvX3NvdXJjZRgVIAEoCzIkLmxpdmVraXQucHJvdG8uTmV3VmlkZW9Tb3VyY2VSZXF1ZXN0SAASRgoTY2FwdHVyZV92aWRlb19mcmFtZRgWIAEoCzInLmxpdmVraXQucHJvdG8uQ2FwdHVyZVZpZGVvRnJhbWVSZXF1ZXN0SAASOwoNdmlkZW9fY29udmVydBgXIAEoCzIiLmxpdmVraXQucHJvdG8uVmlkZW9Db252ZXJ0UmVxdWVzdEgAElkKHXZpZGVvX3N0cmVhbV9mcm9tX3BhcnRpY2lwYW50GBggASgLMjAubGl2ZWtpdC5wcm90by5WaWRlb1N0cmVhbUZyb21QYXJ0aWNpcGFudFJlcXVlc3RIABJAChBuZXdfYXVkaW9fc3RyZWFtGBkgASgLMiQubGl2ZWtpdC5wcm90by5OZXdBdWRpb1N0cmVhbVJlcXVlc3RIABJAChBuZXdfYXVkaW9fc291cmNlGBogASgLMiQubGl2ZWtpdC5wcm90by5OZXdBdWRpb1NvdXJjZVJlcXVlc3RIABJGChNjYXB0dXJlX2F1ZGlvX2ZyYW1lGBsgASgLMicubGl2ZWtpdC5wcm90by5DYXB0dXJlQXVkaW9GcmFtZVJlcXVlc3RIABJEChJjbGVhcl9hdWRpb19idWZmZXIYHCABKAsyJi5saXZla2l0LnByb3RvLkNsZWFyQXVkaW9CdWZmZXJSZXF1ZXN0SAASRgoTbmV3X2F1ZGlvX3Jlc2FtcGxlchgdIAEoCzInLmxpdmVraXQucHJvdG8uTmV3QXVkaW9SZXNhbXBsZXJSZXF1ZXN0SAASRAoScmVtaXhfYW5kX3Jlc2FtcGxlGB4gASgLMiYubGl2ZWtpdC5wcm90by5SZW1peEFuZFJlc2FtcGxlUmVxdWVzdEgAEioKBGUyZWUYHyABKAsyGi5saXZla2l0LnByb3RvLkUyZWVSZXF1ZXN0SAASWQodYXVkaW9fc3RyZWFtX2Zyb21fcGFydGljaXBhbnQYICABKAsyMC5saXZla2l0LnByb3RvLkF1ZGlvU3RyZWFtRnJvbVBhcnRpY2lwYW50UmVxdWVzdEgAEkIKEW5ld19zb3hfcmVzYW1wbGVyGCEgASgLMiUubGl2ZWtpdC5wcm90by5OZXdTb3hSZXNhbXBsZXJSZXF1ZXN0SAASRAoScHVzaF9zb3hfcmVzYW1wbGVyGCIgASgLMiYubGl2ZWtpdC5wcm90by5QdXNoU294UmVzYW1wbGVyUmVxdWVzdEgAEkYKE2ZsdXNoX3NveF9yZXNhbXBsZXIYIyABKAsyJy5saXZla2l0LnByb3RvLkZsdXNoU294UmVzYW1wbGVyUmVxdWVzdEgAEkIKEXNlbmRfY2hhdF9tZXNzYWdlGCQgASgLMiUubGl2ZWtpdC5wcm90by5TZW5kQ2hhdE1lc3NhZ2VSZXF1ZXN0SAASQgoRZWRpdF9jaGF0X21lc3NhZ2UYJSABKAsyJS5saXZla2l0LnByb3RvLkVkaXRDaGF0TWVzc2FnZVJlcXVlc3RIABI3CgtwZXJmb3JtX3JwYxgmIAEoCzIgLmxpdmVraXQucHJvdG8uUGVyZm9ybVJwY1JlcXVlc3RIABJGChNyZWdpc3Rlcl9ycGNfbWV0aG9kGCcgASgLMicubGl2ZWtpdC5wcm90by5SZWdpc3RlclJwY01ldGhvZFJlcXVlc3RIABJKChV1bnJlZ2lzdGVyX3JwY19tZXRob2QYKCABKAsyKS5saXZla2l0LnByb3RvLlVucmVnaXN0ZXJScGNNZXRob2RSZXF1ZXN0SAASWwoecnBjX21ldGhvZF9pbnZvY2F0aW9uX3Jlc3BvbnNlGCkgASgLMjEubGl2ZWtpdC5wcm90by5ScGNNZXRob2RJbnZvY2F0aW9uUmVzcG9uc2VSZXF1ZXN0SABCCQoHbWVzc2FnZSKKFQoLRmZpUmVzcG9uc2USMQoHZGlzcG9zZRgCIAEoCzIeLmxpdmVraXQucHJvdG8uRGlzcG9zZVJlc3BvbnNlSAASMQoHY29ubmVjdBgDIAEoCzIeLmxpdmVraXQucHJvdG8uQ29ubmVjdFJlc3BvbnNlSAASNwoKZGlzY29ubmVjdBgEIAEoCzIhLmxpdmVraXQucHJvdG8uRGlzY29ubmVjdFJlc3BvbnNlSAASPAoNcHVibGlzaF90cmFjaxgFIAEoCzIjLmxpdmVraXQucHJvdG8uUHVibGlzaFRyYWNrUmVzcG9uc2VIABJACg91bnB1Ymxpc2hfdHJhY2sYBiABKAsyJS5saXZla2l0LnByb3RvLlVucHVibGlzaFRyYWNrUmVzcG9uc2VIABI6CgxwdWJsaXNoX2RhdGEYByABKAsyIi5saXZla2l0LnByb3RvLlB1Ymxpc2hEYXRhUmVzcG9uc2VIABI+Cg5zZXRfc3Vic2NyaWJlZBgIIAEoCzIkLmxpdmVraXQucHJvdG8uU2V0U3Vic2NyaWJlZFJlc3BvbnNlSAASRQoSc2V0X2xvY2FsX21ldGFkYXRhGAkgASgLMicubGl2ZWtpdC5wcm90by5TZXRMb2NhbE1ldGFkYXRhUmVzcG9uc2VIABI9Cg5zZXRfbG9jYWxfbmFtZRgKIAEoCzIjLmxpdmVraXQucHJvdG8uU2V0TG9jYWxOYW1lUmVzcG9uc2VIABJJChRzZXRfbG9jYWxfYXR0cmlidXRlcxgLIAEoCzIpLmxpdmVraXQucHJvdG8uU2V0TG9jYWxBdHRyaWJ1dGVzUmVzcG9uc2VIABJDChFnZXRfc2Vzc2lvbl9zdGF0cxgMIAEoCzImLmxpdmVraXQucHJvdG8uR2V0U2Vzc2lvblN0YXRzUmVzcG9uc2VIABJMChVwdWJsaXNoX3RyYW5zY3JpcHRpb24YDSABKAsyKy5saXZla2l0LnByb3RvLlB1Ymxpc2hUcmFuc2NyaXB0aW9uUmVzcG9uc2VIABJBChBwdWJsaXNoX3NpcF9kdG1mGA4gASgLMiUubGl2ZWtpdC5wcm90by5QdWJsaXNoU2lwRHRtZlJlc3BvbnNlSAASRQoSY3JlYXRlX3ZpZGVvX3RyYWNrGA8gASgLMicubGl2ZWtpdC5wcm90by5DcmVhdGVWaWRlb1RyYWNrUmVzcG9uc2VIABJFChJjcmVhdGVfYXVkaW9fdHJhY2sYECABKAsyJy5saXZla2l0LnByb3RvLkNyZWF0ZUF1ZGlvVHJhY2tSZXNwb25zZUgAEkEKEGxvY2FsX3RyYWNrX211dGUYESABKAsyJS5saXZla2l0LnByb3RvLkxvY2FsVHJhY2tNdXRlUmVzcG9uc2VIABJHChNlbmFibGVfcmVtb3RlX3RyYWNrGBIgASgLMigubGl2ZWtpdC5wcm90by5FbmFibGVSZW1vdGVUcmFja1Jlc3BvbnNlSAASNAoJZ2V0X3N0YXRzGBMgASgLMh8ubGl2ZWtpdC5wcm90by5HZXRTdGF0c1Jlc3BvbnNlSAASQQoQbmV3X3ZpZGVvX3N0cmVhbRgUIAEoCzIlLmxpdmVraXQucHJvdG8uTmV3VmlkZW9TdHJlYW1SZXNwb25zZUgAEkEKEG5ld192aWRlb19zb3VyY2UYFSABKAsyJS5saXZla2l0LnByb3RvLk5ld1ZpZGVvU291cmNlUmVzcG9uc2VIABJHChNjYXB0dXJlX3ZpZGVvX2ZyYW1lGBYgASgLMigubGl2ZWtpdC5wcm90by5DYXB0dXJlVmlkZW9GcmFtZVJlc3BvbnNlSAASPAoNdmlkZW9fY29udmVydBgXIAEoCzIjLmxpdmVraXQucHJvdG8uVmlkZW9Db252ZXJ0UmVzcG9uc2VIABJaCh12aWRlb19zdHJlYW1fZnJvbV9wYXJ0aWNpcGFudBgYIAEoCzIxLmxpdmVraXQucHJvdG8uVmlkZW9TdHJlYW1Gcm9tUGFydGljaXBhbnRSZXNwb25zZUgAEkEKEG5ld19hdWRpb19zdHJlYW0YGSABKAsyJS5saXZla2l0LnByb3RvLk5ld0F1ZGlvU3RyZWFtUmVzcG9uc2VIABJBChBuZXdfYXVkaW9fc291cmNlGBogASgLMiUubGl2ZWtpdC5wcm90by5OZXdBdWRpb1NvdXJjZVJlc3BvbnNlSAASRwoTY2FwdHVyZV9hdWRpb19mcmFtZRgbIAEoCzIoLmxpdmVraXQucHJvdG8uQ2FwdHVyZUF1ZGlvRnJhbWVSZXNwb25zZUgAEkUKEmNsZWFyX2F1ZGlvX2J1ZmZlchgcIAEoCzInLmxpdmVraXQucHJvdG8uQ2xlYXJBdWRpb0J1ZmZlclJlc3BvbnNlSAASRwoTbmV3X2F1ZGlvX3Jlc2FtcGxlchgdIAEoCzIoLmxpdmVraXQucHJvdG8uTmV3QXVkaW9SZXNhbXBsZXJSZXNwb25zZUgAEkUKEnJlbWl4X2FuZF9yZXNhbXBsZRgeIAEoCzInLmxpdmVraXQucHJvdG8uUmVtaXhBbmRSZXNhbXBsZVJlc3BvbnNlSAASWgodYXVkaW9fc3RyZWFtX2Zyb21fcGFydGljaXBhbnQYHyABKAsyMS5saXZla2l0LnByb3RvLkF1ZGlvU3RyZWFtRnJvbVBhcnRpY2lwYW50UmVzcG9uc2VIABIrCgRlMmVlGCAgASgLMhsubGl2ZWtpdC5wcm90by5FMmVlUmVzcG9uc2VIABJDChFuZXdfc294X3Jlc2FtcGxlchghIAEoCzImLmxpdmVraXQucHJvdG8uTmV3U294UmVzYW1wbGVyUmVzcG9uc2VIABJFChJwdXNoX3NveF9yZXNhbXBsZXIYIiABKAsyJy5saXZla2l0LnByb3RvLlB1c2hTb3hSZXNhbXBsZXJSZXNwb25zZUgAEkcKE2ZsdXNoX3NveF9yZXNhbXBsZXIYIyABKAsyKC5saXZla2l0LnByb3RvLkZsdXNoU294UmVzYW1wbGVyUmVzcG9uc2VIABJDChFzZW5kX2NoYXRfbWVzc2FnZRgkIAEoCzImLmxpdmVraXQucHJvdG8uU2VuZENoYXRNZXNzYWdlUmVzcG9uc2VIABI4CgtwZXJmb3JtX3JwYxglIAEoCzIhLmxpdmVraXQucHJvdG8uUGVyZm9ybVJwY1Jlc3BvbnNlSAASRwoTcmVnaXN0ZXJfcnBjX21ldGhvZBgmIAEoCzIoLmxpdmVraXQucHJvdG8uUmVnaXN0ZXJScGNNZXRob2RSZXNwb25zZUgAEksKFXVucmVnaXN0ZXJfcnBjX21ldGhvZBgnIAEoCzIqLmxpdmVraXQucHJvdG8uVW5yZWdpc3RlclJwY01ldGhvZFJlc3BvbnNlSAASXAoecnBjX21ldGhvZF9pbnZvY2F0aW9uX3Jlc3BvbnNlGCggASgLMjIubGl2ZWtpdC5wcm90by5ScGNNZXRob2RJbnZvY2F0aW9uUmVzcG9uc2VSZXNwb25zZUgAQgkKB21lc3NhZ2UiigsKCEZmaUV2ZW50Ei4KCnJvb21fZXZlbnQYASABKAsyGC5saXZla2l0LnByb3RvLlJvb21FdmVudEgAEjAKC3RyYWNrX2V2ZW50GAIgASgLMhkubGl2ZWtpdC5wcm90by5UcmFja0V2ZW50SAASPQoSdmlkZW9fc3RyZWFtX2V2ZW50GAMgASgLMh8ubGl2ZWtpdC5wcm90by5WaWRlb1N0cmVhbUV2ZW50SAASPQoSYXVkaW9fc3RyZWFtX2V2ZW50GAQgASgLMh8ubGl2ZWtpdC5wcm90by5BdWRpb1N0cmVhbUV2ZW50SAASMQoHY29ubmVjdBgFIAEoCzIeLmxpdmVraXQucHJvdG8uQ29ubmVjdENhbGxiYWNrSAASNwoKZGlzY29ubmVjdBgHIAEoCzIhLmxpdmVraXQucHJvdG8uRGlzY29ubmVjdENhbGxiYWNrSAASMQoHZGlzcG9zZRgIIAEoCzIeLmxpdmVraXQucHJvdG8uRGlzcG9zZUNhbGxiYWNrSAASPAoNcHVibGlzaF90cmFjaxgJIAEoCzIjLmxpdmVraXQucHJvdG8uUHVibGlzaFRyYWNrQ2FsbGJhY2tIABJACg91bnB1Ymxpc2hfdHJhY2sYCiABKAsyJS5saXZla2l0LnByb3RvLlVucHVibGlzaFRyYWNrQ2FsbGJhY2tIABI6CgxwdWJsaXNoX2RhdGEYCyABKAsyIi5saXZla2l0LnByb3RvLlB1Ymxpc2hEYXRhQ2FsbGJhY2tIABJMChVwdWJsaXNoX3RyYW5zY3JpcHRpb24YDCABKAsyKy5saXZla2l0LnByb3RvLlB1Ymxpc2hUcmFuc2NyaXB0aW9uQ2FsbGJhY2tIABJHChNjYXB0dXJlX2F1ZGlvX2ZyYW1lGA0gASgLMigubGl2ZWtpdC5wcm90by5DYXB0dXJlQXVkaW9GcmFtZUNhbGxiYWNrSAASRQoSc2V0X2xvY2FsX21ldGFkYXRhGA4gASgLMicubGl2ZWtpdC5wcm90by5TZXRMb2NhbE1ldGFkYXRhQ2FsbGJhY2tIABI9Cg5zZXRfbG9jYWxfbmFtZRgPIAEoCzIjLmxpdmVraXQucHJvdG8uU2V0TG9jYWxOYW1lQ2FsbGJhY2tIABJJChRzZXRfbG9jYWxfYXR0cmlidXRlcxgQIAEoCzIpLmxpdmVraXQucHJvdG8uU2V0TG9jYWxBdHRyaWJ1dGVzQ2FsbGJhY2tIABI0CglnZXRfc3RhdHMYESABKAsyHy5saXZla2l0LnByb3RvLkdldFN0YXRzQ2FsbGJhY2tIABInCgRsb2dzGBIgASgLMhcubGl2ZWtpdC5wcm90by5Mb2dCYXRjaEgAEkMKEWdldF9zZXNzaW9uX3N0YXRzGBMgASgLMiYubGl2ZWtpdC5wcm90by5HZXRTZXNzaW9uU3RhdHNDYWxsYmFja0gAEiUKBXBhbmljGBQgASgLMhQubGl2ZWtpdC5wcm90by5QYW5pY0gAEkEKEHB1Ymxpc2hfc2lwX2R0bWYYFSABKAsyJS5saXZla2l0LnByb3RvLlB1Ymxpc2hTaXBEdG1mQ2FsbGJhY2tIABI+CgxjaGF0X21lc3NhZ2UYFiABKAsyJi5saXZla2l0LnByb3RvLlNlbmRDaGF0TWVzc2FnZUNhbGxiYWNrSAASOAoLcGVyZm9ybV9ycGMYFyABKAsyIS5saXZla2l0LnByb3RvLlBlcmZvcm1ScGNDYWxsYmFja0gAEkgKFXJwY19tZXRob2RfaW52b2NhdGlvbhgYIAEoCzInLmxpdmVraXQucHJvdG8uUnBjTWV0aG9kSW52b2NhdGlvbkV2ZW50SABCCQoHbWVzc2FnZSIfCg5EaXNwb3NlUmVxdWVzdBINCgVhc3luYxgBIAIoCCIjCg9EaXNwb3NlUmVzcG9uc2USEAoIYXN5bmNfaWQYASABKAQiIwoPRGlzcG9zZUNhbGxiYWNrEhAKCGFzeW5jX2lkGAEgAigEIoUBCglMb2dSZWNvcmQSJgoFbGV2ZWwYASACKA4yFy5saXZla2l0LnByb3RvLkxvZ0xldmVsEg4KBnRhcmdldBgCIAIoCRITCgttb2R1bGVfcGF0aBgDIAEoCRIMCgRmaWxlGAQgASgJEgwKBGxpbmUYBSABKA0SDwoHbWVzc2FnZRgGIAIoCSI1CghMb2dCYXRjaBIpCgdyZWNvcmRzGAEgAygLMhgubGl2ZWtpdC5wcm90by5Mb2dSZWNvcmQiGAoFUGFuaWMSDwoHbWVzc2FnZRgBIAIoCSpTCghMb2dMZXZlbBINCglMT0dfRVJST1IQABIMCghMT0dfV0FSThABEgwKCExPR19JTkZPEAISDQoJTE9HX0RFQlVHEAMSDQoJTE9HX1RSQUNFEARCEKoCDUxpdmVLaXQuUHJvdG8", [file_e2ee, file_track, file_room, file_video_frame, file_audio_frame, file_rpc]);

/**
 * This is the input of livekit_ffi_request function
 * We always expect a response (FFIResponse, even if it's empty)
 *
 * @generated from message livekit.proto.FfiRequest
 */
export type FfiRequest = Message<"livekit.proto.FfiRequest"> & {
  /**
   * @generated from oneof livekit.proto.FfiRequest.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.DisposeRequest dispose = 2;
     */
    value: DisposeRequest;
    case: "dispose";
  } | {
    /**
     * Room
     *
     * @generated from field: livekit.proto.ConnectRequest connect = 3;
     */
    value: ConnectRequest;
    case: "connect";
  } | {
    /**
     * @generated from field: livekit.proto.DisconnectRequest disconnect = 4;
     */
    value: DisconnectRequest;
    case: "disconnect";
  } | {
    /**
     * @generated from field: livekit.proto.PublishTrackRequest publish_track = 5;
     */
    value: PublishTrackRequest;
    case: "publishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.UnpublishTrackRequest unpublish_track = 6;
     */
    value: UnpublishTrackRequest;
    case: "unpublishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.PublishDataRequest publish_data = 7;
     */
    value: PublishDataRequest;
    case: "publishData";
  } | {
    /**
     * @generated from field: livekit.proto.SetSubscribedRequest set_subscribed = 8;
     */
    value: SetSubscribedRequest;
    case: "setSubscribed";
  } | {
    /**
     * @generated from field: livekit.proto.SetLocalMetadataRequest set_local_metadata = 9;
     */
    value: SetLocalMetadataRequest;
    case: "setLocalMetadata";
  } | {
    /**
     * @generated from field: livekit.proto.SetLocalNameRequest set_local_name = 10;
     */
    value: SetLocalNameRequest;
    case: "setLocalName";
  } | {
    /**
     * @generated from field: livekit.proto.SetLocalAttributesRequest set_local_attributes = 11;
     */
    value: SetLocalAttributesRequest;
    case: "setLocalAttributes";
  } | {
    /**
     * @generated from field: livekit.proto.GetSessionStatsRequest get_session_stats = 12;
     */
    value: GetSessionStatsRequest;
    case: "getSessionStats";
  } | {
    /**
     * @generated from field: livekit.proto.PublishTranscriptionRequest publish_transcription = 13;
     */
    value: PublishTranscriptionRequest;
    case: "publishTranscription";
  } | {
    /**
     * @generated from field: livekit.proto.PublishSipDtmfRequest publish_sip_dtmf = 14;
     */
    value: PublishSipDtmfRequest;
    case: "publishSipDtmf";
  } | {
    /**
     * Track
     *
     * @generated from field: livekit.proto.CreateVideoTrackRequest create_video_track = 15;
     */
    value: CreateVideoTrackRequest;
    case: "createVideoTrack";
  } | {
    /**
     * @generated from field: livekit.proto.CreateAudioTrackRequest create_audio_track = 16;
     */
    value: CreateAudioTrackRequest;
    case: "createAudioTrack";
  } | {
    /**
     * @generated from field: livekit.proto.LocalTrackMuteRequest local_track_mute = 17;
     */
    value: LocalTrackMuteRequest;
    case: "localTrackMute";
  } | {
    /**
     * @generated from field: livekit.proto.EnableRemoteTrackRequest enable_remote_track = 18;
     */
    value: EnableRemoteTrackRequest;
    case: "enableRemoteTrack";
  } | {
    /**
     * @generated from field: livekit.proto.GetStatsRequest get_stats = 19;
     */
    value: GetStatsRequest;
    case: "getStats";
  } | {
    /**
     * Video
     *
     * @generated from field: livekit.proto.NewVideoStreamRequest new_video_stream = 20;
     */
    value: NewVideoStreamRequest;
    case: "newVideoStream";
  } | {
    /**
     * @generated from field: livekit.proto.NewVideoSourceRequest new_video_source = 21;
     */
    value: NewVideoSourceRequest;
    case: "newVideoSource";
  } | {
    /**
     * @generated from field: livekit.proto.CaptureVideoFrameRequest capture_video_frame = 22;
     */
    value: CaptureVideoFrameRequest;
    case: "captureVideoFrame";
  } | {
    /**
     * @generated from field: livekit.proto.VideoConvertRequest video_convert = 23;
     */
    value: VideoConvertRequest;
    case: "videoConvert";
  } | {
    /**
     * @generated from field: livekit.proto.VideoStreamFromParticipantRequest video_stream_from_participant = 24;
     */
    value: VideoStreamFromParticipantRequest;
    case: "videoStreamFromParticipant";
  } | {
    /**
     * Audio
     *
     * @generated from field: livekit.proto.NewAudioStreamRequest new_audio_stream = 25;
     */
    value: NewAudioStreamRequest;
    case: "newAudioStream";
  } | {
    /**
     * @generated from field: livekit.proto.NewAudioSourceRequest new_audio_source = 26;
     */
    value: NewAudioSourceRequest;
    case: "newAudioSource";
  } | {
    /**
     * @generated from field: livekit.proto.CaptureAudioFrameRequest capture_audio_frame = 27;
     */
    value: CaptureAudioFrameRequest;
    case: "captureAudioFrame";
  } | {
    /**
     * @generated from field: livekit.proto.ClearAudioBufferRequest clear_audio_buffer = 28;
     */
    value: ClearAudioBufferRequest;
    case: "clearAudioBuffer";
  } | {
    /**
     * @generated from field: livekit.proto.NewAudioResamplerRequest new_audio_resampler = 29;
     */
    value: NewAudioResamplerRequest;
    case: "newAudioResampler";
  } | {
    /**
     * @generated from field: livekit.proto.RemixAndResampleRequest remix_and_resample = 30;
     */
    value: RemixAndResampleRequest;
    case: "remixAndResample";
  } | {
    /**
     * @generated from field: livekit.proto.E2eeRequest e2ee = 31;
     */
    value: E2eeRequest;
    case: "e2ee";
  } | {
    /**
     * @generated from field: livekit.proto.AudioStreamFromParticipantRequest audio_stream_from_participant = 32;
     */
    value: AudioStreamFromParticipantRequest;
    case: "audioStreamFromParticipant";
  } | {
    /**
     * @generated from field: livekit.proto.NewSoxResamplerRequest new_sox_resampler = 33;
     */
    value: NewSoxResamplerRequest;
    case: "newSoxResampler";
  } | {
    /**
     * @generated from field: livekit.proto.PushSoxResamplerRequest push_sox_resampler = 34;
     */
    value: PushSoxResamplerRequest;
    case: "pushSoxResampler";
  } | {
    /**
     * @generated from field: livekit.proto.FlushSoxResamplerRequest flush_sox_resampler = 35;
     */
    value: FlushSoxResamplerRequest;
    case: "flushSoxResampler";
  } | {
    /**
     * @generated from field: livekit.proto.SendChatMessageRequest send_chat_message = 36;
     */
    value: SendChatMessageRequest;
    case: "sendChatMessage";
  } | {
    /**
     * @generated from field: livekit.proto.EditChatMessageRequest edit_chat_message = 37;
     */
    value: EditChatMessageRequest;
    case: "editChatMessage";
  } | {
    /**
     * RPC
     *
     * @generated from field: livekit.proto.PerformRpcRequest perform_rpc = 38;
     */
    value: PerformRpcRequest;
    case: "performRpc";
  } | {
    /**
     * @generated from field: livekit.proto.RegisterRpcMethodRequest register_rpc_method = 39;
     */
    value: RegisterRpcMethodRequest;
    case: "registerRpcMethod";
  } | {
    /**
     * @generated from field: livekit.proto.UnregisterRpcMethodRequest unregister_rpc_method = 40;
     */
    value: UnregisterRpcMethodRequest;
    case: "unregisterRpcMethod";
  } | {
    /**
     * @generated from field: livekit.proto.RpcMethodInvocationResponseRequest rpc_method_invocation_response = 41;
     */
    value: RpcMethodInvocationResponseRequest;
    case: "rpcMethodInvocationResponse";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.FfiRequest.
 * Use `create(FfiRequestSchema)` to create a new message.
 */
export const FfiRequestSchema: GenMessage<FfiRequest> = /*@__PURE__*/
  messageDesc(file_ffi, 0);

/**
 * This is the output of livekit_ffi_request function.
 *
 * @generated from message livekit.proto.FfiResponse
 */
export type FfiResponse = Message<"livekit.proto.FfiResponse"> & {
  /**
   * @generated from oneof livekit.proto.FfiResponse.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.DisposeResponse dispose = 2;
     */
    value: DisposeResponse;
    case: "dispose";
  } | {
    /**
     * Room
     *
     * @generated from field: livekit.proto.ConnectResponse connect = 3;
     */
    value: ConnectResponse;
    case: "connect";
  } | {
    /**
     * @generated from field: livekit.proto.DisconnectResponse disconnect = 4;
     */
    value: DisconnectResponse;
    case: "disconnect";
  } | {
    /**
     * @generated from field: livekit.proto.PublishTrackResponse publish_track = 5;
     */
    value: PublishTrackResponse;
    case: "publishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.UnpublishTrackResponse unpublish_track = 6;
     */
    value: UnpublishTrackResponse;
    case: "unpublishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.PublishDataResponse publish_data = 7;
     */
    value: PublishDataResponse;
    case: "publishData";
  } | {
    /**
     * @generated from field: livekit.proto.SetSubscribedResponse set_subscribed = 8;
     */
    value: SetSubscribedResponse;
    case: "setSubscribed";
  } | {
    /**
     * @generated from field: livekit.proto.SetLocalMetadataResponse set_local_metadata = 9;
     */
    value: SetLocalMetadataResponse;
    case: "setLocalMetadata";
  } | {
    /**
     * @generated from field: livekit.proto.SetLocalNameResponse set_local_name = 10;
     */
    value: SetLocalNameResponse;
    case: "setLocalName";
  } | {
    /**
     * @generated from field: livekit.proto.SetLocalAttributesResponse set_local_attributes = 11;
     */
    value: SetLocalAttributesResponse;
    case: "setLocalAttributes";
  } | {
    /**
     * @generated from field: livekit.proto.GetSessionStatsResponse get_session_stats = 12;
     */
    value: GetSessionStatsResponse;
    case: "getSessionStats";
  } | {
    /**
     * @generated from field: livekit.proto.PublishTranscriptionResponse publish_transcription = 13;
     */
    value: PublishTranscriptionResponse;
    case: "publishTranscription";
  } | {
    /**
     * @generated from field: livekit.proto.PublishSipDtmfResponse publish_sip_dtmf = 14;
     */
    value: PublishSipDtmfResponse;
    case: "publishSipDtmf";
  } | {
    /**
     * Track
     *
     * @generated from field: livekit.proto.CreateVideoTrackResponse create_video_track = 15;
     */
    value: CreateVideoTrackResponse;
    case: "createVideoTrack";
  } | {
    /**
     * @generated from field: livekit.proto.CreateAudioTrackResponse create_audio_track = 16;
     */
    value: CreateAudioTrackResponse;
    case: "createAudioTrack";
  } | {
    /**
     * @generated from field: livekit.proto.LocalTrackMuteResponse local_track_mute = 17;
     */
    value: LocalTrackMuteResponse;
    case: "localTrackMute";
  } | {
    /**
     * @generated from field: livekit.proto.EnableRemoteTrackResponse enable_remote_track = 18;
     */
    value: EnableRemoteTrackResponse;
    case: "enableRemoteTrack";
  } | {
    /**
     * @generated from field: livekit.proto.GetStatsResponse get_stats = 19;
     */
    value: GetStatsResponse;
    case: "getStats";
  } | {
    /**
     * Video
     *
     * @generated from field: livekit.proto.NewVideoStreamResponse new_video_stream = 20;
     */
    value: NewVideoStreamResponse;
    case: "newVideoStream";
  } | {
    /**
     * @generated from field: livekit.proto.NewVideoSourceResponse new_video_source = 21;
     */
    value: NewVideoSourceResponse;
    case: "newVideoSource";
  } | {
    /**
     * @generated from field: livekit.proto.CaptureVideoFrameResponse capture_video_frame = 22;
     */
    value: CaptureVideoFrameResponse;
    case: "captureVideoFrame";
  } | {
    /**
     * @generated from field: livekit.proto.VideoConvertResponse video_convert = 23;
     */
    value: VideoConvertResponse;
    case: "videoConvert";
  } | {
    /**
     * @generated from field: livekit.proto.VideoStreamFromParticipantResponse video_stream_from_participant = 24;
     */
    value: VideoStreamFromParticipantResponse;
    case: "videoStreamFromParticipant";
  } | {
    /**
     * Audio
     *
     * @generated from field: livekit.proto.NewAudioStreamResponse new_audio_stream = 25;
     */
    value: NewAudioStreamResponse;
    case: "newAudioStream";
  } | {
    /**
     * @generated from field: livekit.proto.NewAudioSourceResponse new_audio_source = 26;
     */
    value: NewAudioSourceResponse;
    case: "newAudioSource";
  } | {
    /**
     * @generated from field: livekit.proto.CaptureAudioFrameResponse capture_audio_frame = 27;
     */
    value: CaptureAudioFrameResponse;
    case: "captureAudioFrame";
  } | {
    /**
     * @generated from field: livekit.proto.ClearAudioBufferResponse clear_audio_buffer = 28;
     */
    value: ClearAudioBufferResponse;
    case: "clearAudioBuffer";
  } | {
    /**
     * @generated from field: livekit.proto.NewAudioResamplerResponse new_audio_resampler = 29;
     */
    value: NewAudioResamplerResponse;
    case: "newAudioResampler";
  } | {
    /**
     * @generated from field: livekit.proto.RemixAndResampleResponse remix_and_resample = 30;
     */
    value: RemixAndResampleResponse;
    case: "remixAndResample";
  } | {
    /**
     * @generated from field: livekit.proto.AudioStreamFromParticipantResponse audio_stream_from_participant = 31;
     */
    value: AudioStreamFromParticipantResponse;
    case: "audioStreamFromParticipant";
  } | {
    /**
     * @generated from field: livekit.proto.E2eeResponse e2ee = 32;
     */
    value: E2eeResponse;
    case: "e2ee";
  } | {
    /**
     * @generated from field: livekit.proto.NewSoxResamplerResponse new_sox_resampler = 33;
     */
    value: NewSoxResamplerResponse;
    case: "newSoxResampler";
  } | {
    /**
     * @generated from field: livekit.proto.PushSoxResamplerResponse push_sox_resampler = 34;
     */
    value: PushSoxResamplerResponse;
    case: "pushSoxResampler";
  } | {
    /**
     * @generated from field: livekit.proto.FlushSoxResamplerResponse flush_sox_resampler = 35;
     */
    value: FlushSoxResamplerResponse;
    case: "flushSoxResampler";
  } | {
    /**
     * @generated from field: livekit.proto.SendChatMessageResponse send_chat_message = 36;
     */
    value: SendChatMessageResponse;
    case: "sendChatMessage";
  } | {
    /**
     * RPC
     *
     * @generated from field: livekit.proto.PerformRpcResponse perform_rpc = 37;
     */
    value: PerformRpcResponse;
    case: "performRpc";
  } | {
    /**
     * @generated from field: livekit.proto.RegisterRpcMethodResponse register_rpc_method = 38;
     */
    value: RegisterRpcMethodResponse;
    case: "registerRpcMethod";
  } | {
    /**
     * @generated from field: livekit.proto.UnregisterRpcMethodResponse unregister_rpc_method = 39;
     */
    value: UnregisterRpcMethodResponse;
    case: "unregisterRpcMethod";
  } | {
    /**
     * @generated from field: livekit.proto.RpcMethodInvocationResponseResponse rpc_method_invocation_response = 40;
     */
    value: RpcMethodInvocationResponseResponse;
    case: "rpcMethodInvocationResponse";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.FfiResponse.
 * Use `create(FfiResponseSchema)` to create a new message.
 */
export const FfiResponseSchema: GenMessage<FfiResponse> = /*@__PURE__*/
  messageDesc(file_ffi, 1);

/**
 * To minimize complexity, participant events are not included in the protocol.
 * It is easily deducible from the room events and it turned out that is is easier to implement
 * on the ffi client side.
 *
 * @generated from message livekit.proto.FfiEvent
 */
export type FfiEvent = Message<"livekit.proto.FfiEvent"> & {
  /**
   * @generated from oneof livekit.proto.FfiEvent.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.RoomEvent room_event = 1;
     */
    value: RoomEvent;
    case: "roomEvent";
  } | {
    /**
     * @generated from field: livekit.proto.TrackEvent track_event = 2;
     */
    value: TrackEvent;
    case: "trackEvent";
  } | {
    /**
     * @generated from field: livekit.proto.VideoStreamEvent video_stream_event = 3;
     */
    value: VideoStreamEvent;
    case: "videoStreamEvent";
  } | {
    /**
     * @generated from field: livekit.proto.AudioStreamEvent audio_stream_event = 4;
     */
    value: AudioStreamEvent;
    case: "audioStreamEvent";
  } | {
    /**
     * @generated from field: livekit.proto.ConnectCallback connect = 5;
     */
    value: ConnectCallback;
    case: "connect";
  } | {
    /**
     * @generated from field: livekit.proto.DisconnectCallback disconnect = 7;
     */
    value: DisconnectCallback;
    case: "disconnect";
  } | {
    /**
     * @generated from field: livekit.proto.DisposeCallback dispose = 8;
     */
    value: DisposeCallback;
    case: "dispose";
  } | {
    /**
     * @generated from field: livekit.proto.PublishTrackCallback publish_track = 9;
     */
    value: PublishTrackCallback;
    case: "publishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.UnpublishTrackCallback unpublish_track = 10;
     */
    value: UnpublishTrackCallback;
    case: "unpublishTrack";
  } | {
    /**
     * @generated from field: livekit.proto.PublishDataCallback publish_data = 11;
     */
    value: PublishDataCallback;
    case: "publishData";
  } | {
    /**
     * @generated from field: livekit.proto.PublishTranscriptionCallback publish_transcription = 12;
     */
    value: PublishTranscriptionCallback;
    case: "publishTranscription";
  } | {
    /**
     * @generated from field: livekit.proto.CaptureAudioFrameCallback capture_audio_frame = 13;
     */
    value: CaptureAudioFrameCallback;
    case: "captureAudioFrame";
  } | {
    /**
     * @generated from field: livekit.proto.SetLocalMetadataCallback set_local_metadata = 14;
     */
    value: SetLocalMetadataCallback;
    case: "setLocalMetadata";
  } | {
    /**
     * @generated from field: livekit.proto.SetLocalNameCallback set_local_name = 15;
     */
    value: SetLocalNameCallback;
    case: "setLocalName";
  } | {
    /**
     * @generated from field: livekit.proto.SetLocalAttributesCallback set_local_attributes = 16;
     */
    value: SetLocalAttributesCallback;
    case: "setLocalAttributes";
  } | {
    /**
     * @generated from field: livekit.proto.GetStatsCallback get_stats = 17;
     */
    value: GetStatsCallback;
    case: "getStats";
  } | {
    /**
     * @generated from field: livekit.proto.LogBatch logs = 18;
     */
    value: LogBatch;
    case: "logs";
  } | {
    /**
     * @generated from field: livekit.proto.GetSessionStatsCallback get_session_stats = 19;
     */
    value: GetSessionStatsCallback;
    case: "getSessionStats";
  } | {
    /**
     * @generated from field: livekit.proto.Panic panic = 20;
     */
    value: Panic;
    case: "panic";
  } | {
    /**
     * @generated from field: livekit.proto.PublishSipDtmfCallback publish_sip_dtmf = 21;
     */
    value: PublishSipDtmfCallback;
    case: "publishSipDtmf";
  } | {
    /**
     * @generated from field: livekit.proto.SendChatMessageCallback chat_message = 22;
     */
    value: SendChatMessageCallback;
    case: "chatMessage";
  } | {
    /**
     * @generated from field: livekit.proto.PerformRpcCallback perform_rpc = 23;
     */
    value: PerformRpcCallback;
    case: "performRpc";
  } | {
    /**
     * @generated from field: livekit.proto.RpcMethodInvocationEvent rpc_method_invocation = 24;
     */
    value: RpcMethodInvocationEvent;
    case: "rpcMethodInvocation";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.FfiEvent.
 * Use `create(FfiEventSchema)` to create a new message.
 */
export const FfiEventSchema: GenMessage<FfiEvent> = /*@__PURE__*/
  messageDesc(file_ffi, 2);

/**
 * Stop all rooms synchronously (Do we need async here?).
 * e.g: This is used for the Unity Editor after each assemblies reload.
 * TODO(theomonnom): Implement a debug mode where we can find all leaked handles?
 *
 * @generated from message livekit.proto.DisposeRequest
 */
export type DisposeRequest = Message<"livekit.proto.DisposeRequest"> & {
  /**
   * @generated from field: required bool async = 1;
   */
  async: boolean;
};

/**
 * Describes the message livekit.proto.DisposeRequest.
 * Use `create(DisposeRequestSchema)` to create a new message.
 */
export const DisposeRequestSchema: GenMessage<DisposeRequest> = /*@__PURE__*/
  messageDesc(file_ffi, 3);

/**
 * @generated from message livekit.proto.DisposeResponse
 */
export type DisposeResponse = Message<"livekit.proto.DisposeResponse"> & {
  /**
   * None if sync
   *
   * @generated from field: optional uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.DisposeResponse.
 * Use `create(DisposeResponseSchema)` to create a new message.
 */
export const DisposeResponseSchema: GenMessage<DisposeResponse> = /*@__PURE__*/
  messageDesc(file_ffi, 4);

/**
 * @generated from message livekit.proto.DisposeCallback
 */
export type DisposeCallback = Message<"livekit.proto.DisposeCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.DisposeCallback.
 * Use `create(DisposeCallbackSchema)` to create a new message.
 */
export const DisposeCallbackSchema: GenMessage<DisposeCallback> = /*@__PURE__*/
  messageDesc(file_ffi, 5);

/**
 * @generated from message livekit.proto.LogRecord
 */
export type LogRecord = Message<"livekit.proto.LogRecord"> & {
  /**
   * @generated from field: required livekit.proto.LogLevel level = 1;
   */
  level: LogLevel;

  /**
   * e.g "livekit", "libwebrtc", "tokio-tungstenite", etc...
   *
   * @generated from field: required string target = 2;
   */
  target: string;

  /**
   * @generated from field: optional string module_path = 3;
   */
  modulePath: string;

  /**
   * @generated from field: optional string file = 4;
   */
  file: string;

  /**
   * @generated from field: optional uint32 line = 5;
   */
  line: number;

  /**
   * @generated from field: required string message = 6;
   */
  message: string;
};

/**
 * Describes the message livekit.proto.LogRecord.
 * Use `create(LogRecordSchema)` to create a new message.
 */
export const LogRecordSchema: GenMessage<LogRecord> = /*@__PURE__*/
  messageDesc(file_ffi, 6);

/**
 * @generated from message livekit.proto.LogBatch
 */
export type LogBatch = Message<"livekit.proto.LogBatch"> & {
  /**
   * @generated from field: repeated livekit.proto.LogRecord records = 1;
   */
  records: LogRecord[];
};

/**
 * Describes the message livekit.proto.LogBatch.
 * Use `create(LogBatchSchema)` to create a new message.
 */
export const LogBatchSchema: GenMessage<LogBatch> = /*@__PURE__*/
  messageDesc(file_ffi, 7);

/**
 * @generated from message livekit.proto.Panic
 */
export type Panic = Message<"livekit.proto.Panic"> & {
  /**
   * @generated from field: required string message = 1;
   */
  message: string;
};

/**
 * Describes the message livekit.proto.Panic.
 * Use `create(PanicSchema)` to create a new message.
 */
export const PanicSchema: GenMessage<Panic> = /*@__PURE__*/
  messageDesc(file_ffi, 8);

/**
 * @generated from enum livekit.proto.LogLevel
 */
export enum LogLevel {
  /**
   * @generated from enum value: LOG_ERROR = 0;
   */
  LOG_ERROR = 0,

  /**
   * @generated from enum value: LOG_WARN = 1;
   */
  LOG_WARN = 1,

  /**
   * @generated from enum value: LOG_INFO = 2;
   */
  LOG_INFO = 2,

  /**
   * @generated from enum value: LOG_DEBUG = 3;
   */
  LOG_DEBUG = 3,

  /**
   * @generated from enum value: LOG_TRACE = 4;
   */
  LOG_TRACE = 4,
}

/**
 * Describes the enum livekit.proto.LogLevel.
 */
export const LogLevelSchema: GenEnum<LogLevel> = /*@__PURE__*/
  enumDesc(file_ffi, 0);

