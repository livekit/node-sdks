// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file participant.proto (package livekit.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { FfiOwnedHandle } from "./handle_pb.js";

/**
 * @generated from enum livekit.proto.ParticipantKind
 */
export enum ParticipantKind {
  /**
   * @generated from enum value: PARTICIPANT_KIND_STANDARD = 0;
   */
  STANDARD = 0,

  /**
   * @generated from enum value: PARTICIPANT_KIND_INGRESS = 1;
   */
  INGRESS = 1,

  /**
   * @generated from enum value: PARTICIPANT_KIND_EGRESS = 2;
   */
  EGRESS = 2,

  /**
   * @generated from enum value: PARTICIPANT_KIND_SIP = 3;
   */
  SIP = 3,

  /**
   * @generated from enum value: PARTICIPANT_KIND_AGENT = 4;
   */
  AGENT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(ParticipantKind)
proto3.util.setEnumType(ParticipantKind, "livekit.proto.ParticipantKind", [
  { no: 0, name: "PARTICIPANT_KIND_STANDARD" },
  { no: 1, name: "PARTICIPANT_KIND_INGRESS" },
  { no: 2, name: "PARTICIPANT_KIND_EGRESS" },
  { no: 3, name: "PARTICIPANT_KIND_SIP" },
  { no: 4, name: "PARTICIPANT_KIND_AGENT" },
]);

/**
 * @generated from message livekit.proto.ParticipantInfo
 */
export class ParticipantInfo extends Message<ParticipantInfo> {
  /**
   * @generated from field: string sid = 1;
   */
  sid = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string identity = 3;
   */
  identity = "";

  /**
   * @generated from field: string metadata = 4;
   */
  metadata = "";

  /**
   * @generated from field: map<string, string> attributes = 5;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: livekit.proto.ParticipantKind kind = 6;
   */
  kind = ParticipantKind.STANDARD;

  constructor(data?: PartialMessage<ParticipantInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ParticipantInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "kind", kind: "enum", T: proto3.getEnumType(ParticipantKind) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantInfo {
    return new ParticipantInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantInfo {
    return new ParticipantInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantInfo {
    return new ParticipantInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantInfo | PlainMessage<ParticipantInfo> | undefined, b: ParticipantInfo | PlainMessage<ParticipantInfo> | undefined): boolean {
    return proto3.util.equals(ParticipantInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedParticipant
 */
export class OwnedParticipant extends Message<OwnedParticipant> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.ParticipantInfo info = 2;
   */
  info?: ParticipantInfo;

  constructor(data?: PartialMessage<OwnedParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: ParticipantInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedParticipant {
    return new OwnedParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedParticipant {
    return new OwnedParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedParticipant {
    return new OwnedParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedParticipant | PlainMessage<OwnedParticipant> | undefined, b: OwnedParticipant | PlainMessage<OwnedParticipant> | undefined): boolean {
    return proto3.util.equals(OwnedParticipant, a, b);
  }
}

