// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.2.0 with parameter "target=ts"
// @generated from file room.proto (package livekit.proto, syntax proto2)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { E2eeOptions, EncryptionState } from "./e2ee_pb";
import { file_e2ee } from "./e2ee_pb";
import type { FfiOwnedHandle } from "./handle_pb";
import { file_handle } from "./handle_pb";
import type { OwnedParticipant } from "./participant_pb";
import { file_participant } from "./participant_pb";
import type { OwnedTrack, OwnedTrackPublication, TrackSource } from "./track_pb";
import { file_track } from "./track_pb";
import type { VideoCodec } from "./video_frame_pb";
import { file_video_frame } from "./video_frame_pb";
import type { RtcStats } from "./stats_pb";
import { file_stats } from "./stats_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file room.proto.
 */
export const file_room: GenFile = /*@__PURE__*/
  fileDesc("", [file_e2ee, file_handle, file_participant, file_track, file_video_frame, file_stats]);

/**
 * Connect to a new LiveKit room
 *
 * @generated from message livekit.proto.ConnectRequest
 */
export type ConnectRequest = Message<"livekit.proto.ConnectRequest"> & {
  /**
   * @generated from field: required string url = 1;
   */
  url: string;

  /**
   * @generated from field: required string token = 2;
   */
  token: string;

  /**
   * @generated from field: required livekit.proto.RoomOptions options = 3;
   */
  options?: RoomOptions;
};

/**
 * Describes the message livekit.proto.ConnectRequest.
 * Use `create(ConnectRequestSchema)` to create a new message.
 */
export const ConnectRequestSchema: GenMessage<ConnectRequest> = /*@__PURE__*/
  messageDesc(file_room, 0);

/**
 * @generated from message livekit.proto.ConnectResponse
 */
export type ConnectResponse = Message<"livekit.proto.ConnectResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.ConnectResponse.
 * Use `create(ConnectResponseSchema)` to create a new message.
 */
export const ConnectResponseSchema: GenMessage<ConnectResponse> = /*@__PURE__*/
  messageDesc(file_room, 1);

/**
 * @generated from message livekit.proto.ConnectCallback
 */
export type ConnectCallback = Message<"livekit.proto.ConnectCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from oneof livekit.proto.ConnectCallback.message
   */
  message: {
    /**
     * @generated from field: string error = 2;
     */
    value: string;
    case: "error";
  } | {
    /**
     * @generated from field: livekit.proto.ConnectCallback.Result result = 3;
     */
    value: ConnectCallback_Result;
    case: "result";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.ConnectCallback.
 * Use `create(ConnectCallbackSchema)` to create a new message.
 */
export const ConnectCallbackSchema: GenMessage<ConnectCallback> = /*@__PURE__*/
  messageDesc(file_room, 2);

/**
 * @generated from message livekit.proto.ConnectCallback.ParticipantWithTracks
 */
export type ConnectCallback_ParticipantWithTracks = Message<"livekit.proto.ConnectCallback.ParticipantWithTracks"> & {
  /**
   * @generated from field: required livekit.proto.OwnedParticipant participant = 1;
   */
  participant?: OwnedParticipant;

  /**
   * TrackInfo are not needed here, if we're subscribed to a track, the FfiServer will send
   * a TrackSubscribed event
   *
   * @generated from field: repeated livekit.proto.OwnedTrackPublication publications = 2;
   */
  publications: OwnedTrackPublication[];
};

/**
 * Describes the message livekit.proto.ConnectCallback.ParticipantWithTracks.
 * Use `create(ConnectCallback_ParticipantWithTracksSchema)` to create a new message.
 */
export const ConnectCallback_ParticipantWithTracksSchema: GenMessage<ConnectCallback_ParticipantWithTracks> = /*@__PURE__*/
  messageDesc(file_room, 2, 0);

/**
 * @generated from message livekit.proto.ConnectCallback.Result
 */
export type ConnectCallback_Result = Message<"livekit.proto.ConnectCallback.Result"> & {
  /**
   * @generated from field: required livekit.proto.OwnedRoom room = 1;
   */
  room?: OwnedRoom;

  /**
   * @generated from field: required livekit.proto.OwnedParticipant local_participant = 2;
   */
  localParticipant?: OwnedParticipant;

  /**
   * @generated from field: repeated livekit.proto.ConnectCallback.ParticipantWithTracks participants = 3;
   */
  participants: ConnectCallback_ParticipantWithTracks[];
};

/**
 * Describes the message livekit.proto.ConnectCallback.Result.
 * Use `create(ConnectCallback_ResultSchema)` to create a new message.
 */
export const ConnectCallback_ResultSchema: GenMessage<ConnectCallback_Result> = /*@__PURE__*/
  messageDesc(file_room, 2, 1);

/**
 * Disconnect from the a room
 *
 * @generated from message livekit.proto.DisconnectRequest
 */
export type DisconnectRequest = Message<"livekit.proto.DisconnectRequest"> & {
  /**
   * @generated from field: required uint64 room_handle = 1;
   */
  roomHandle: bigint;
};

/**
 * Describes the message livekit.proto.DisconnectRequest.
 * Use `create(DisconnectRequestSchema)` to create a new message.
 */
export const DisconnectRequestSchema: GenMessage<DisconnectRequest> = /*@__PURE__*/
  messageDesc(file_room, 3);

/**
 * @generated from message livekit.proto.DisconnectResponse
 */
export type DisconnectResponse = Message<"livekit.proto.DisconnectResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.DisconnectResponse.
 * Use `create(DisconnectResponseSchema)` to create a new message.
 */
export const DisconnectResponseSchema: GenMessage<DisconnectResponse> = /*@__PURE__*/
  messageDesc(file_room, 4);

/**
 * @generated from message livekit.proto.DisconnectCallback
 */
export type DisconnectCallback = Message<"livekit.proto.DisconnectCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.DisconnectCallback.
 * Use `create(DisconnectCallbackSchema)` to create a new message.
 */
export const DisconnectCallbackSchema: GenMessage<DisconnectCallback> = /*@__PURE__*/
  messageDesc(file_room, 5);

/**
 * Publish a track to the room
 *
 * @generated from message livekit.proto.PublishTrackRequest
 */
export type PublishTrackRequest = Message<"livekit.proto.PublishTrackRequest"> & {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle: bigint;

  /**
   * @generated from field: required uint64 track_handle = 2;
   */
  trackHandle: bigint;

  /**
   * @generated from field: required livekit.proto.TrackPublishOptions options = 3;
   */
  options?: TrackPublishOptions;
};

/**
 * Describes the message livekit.proto.PublishTrackRequest.
 * Use `create(PublishTrackRequestSchema)` to create a new message.
 */
export const PublishTrackRequestSchema: GenMessage<PublishTrackRequest> = /*@__PURE__*/
  messageDesc(file_room, 6);

/**
 * @generated from message livekit.proto.PublishTrackResponse
 */
export type PublishTrackResponse = Message<"livekit.proto.PublishTrackResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.PublishTrackResponse.
 * Use `create(PublishTrackResponseSchema)` to create a new message.
 */
export const PublishTrackResponseSchema: GenMessage<PublishTrackResponse> = /*@__PURE__*/
  messageDesc(file_room, 7);

/**
 * @generated from message livekit.proto.PublishTrackCallback
 */
export type PublishTrackCallback = Message<"livekit.proto.PublishTrackCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from oneof livekit.proto.PublishTrackCallback.message
   */
  message: {
    /**
     * @generated from field: string error = 2;
     */
    value: string;
    case: "error";
  } | {
    /**
     * @generated from field: livekit.proto.OwnedTrackPublication publication = 3;
     */
    value: OwnedTrackPublication;
    case: "publication";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.PublishTrackCallback.
 * Use `create(PublishTrackCallbackSchema)` to create a new message.
 */
export const PublishTrackCallbackSchema: GenMessage<PublishTrackCallback> = /*@__PURE__*/
  messageDesc(file_room, 8);

/**
 * Unpublish a track from the room
 *
 * @generated from message livekit.proto.UnpublishTrackRequest
 */
export type UnpublishTrackRequest = Message<"livekit.proto.UnpublishTrackRequest"> & {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle: bigint;

  /**
   * @generated from field: required string track_sid = 2;
   */
  trackSid: string;

  /**
   * @generated from field: required bool stop_on_unpublish = 3;
   */
  stopOnUnpublish: boolean;
};

/**
 * Describes the message livekit.proto.UnpublishTrackRequest.
 * Use `create(UnpublishTrackRequestSchema)` to create a new message.
 */
export const UnpublishTrackRequestSchema: GenMessage<UnpublishTrackRequest> = /*@__PURE__*/
  messageDesc(file_room, 9);

/**
 * @generated from message livekit.proto.UnpublishTrackResponse
 */
export type UnpublishTrackResponse = Message<"livekit.proto.UnpublishTrackResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.UnpublishTrackResponse.
 * Use `create(UnpublishTrackResponseSchema)` to create a new message.
 */
export const UnpublishTrackResponseSchema: GenMessage<UnpublishTrackResponse> = /*@__PURE__*/
  messageDesc(file_room, 10);

/**
 * @generated from message livekit.proto.UnpublishTrackCallback
 */
export type UnpublishTrackCallback = Message<"livekit.proto.UnpublishTrackCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from field: optional string error = 2;
   */
  error: string;
};

/**
 * Describes the message livekit.proto.UnpublishTrackCallback.
 * Use `create(UnpublishTrackCallbackSchema)` to create a new message.
 */
export const UnpublishTrackCallbackSchema: GenMessage<UnpublishTrackCallback> = /*@__PURE__*/
  messageDesc(file_room, 11);

/**
 * Publish data to other participants
 *
 * @generated from message livekit.proto.PublishDataRequest
 */
export type PublishDataRequest = Message<"livekit.proto.PublishDataRequest"> & {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle: bigint;

  /**
   * @generated from field: required uint64 data_ptr = 2;
   */
  dataPtr: bigint;

  /**
   * @generated from field: required uint64 data_len = 3;
   */
  dataLen: bigint;

  /**
   * @generated from field: required bool reliable = 4;
   */
  reliable: boolean;

  /**
   * @generated from field: repeated string destination_sids = 5 [deprecated = true];
   * @deprecated
   */
  destinationSids: string[];

  /**
   * @generated from field: optional string topic = 6;
   */
  topic: string;

  /**
   * @generated from field: repeated string destination_identities = 7;
   */
  destinationIdentities: string[];
};

/**
 * Describes the message livekit.proto.PublishDataRequest.
 * Use `create(PublishDataRequestSchema)` to create a new message.
 */
export const PublishDataRequestSchema: GenMessage<PublishDataRequest> = /*@__PURE__*/
  messageDesc(file_room, 12);

/**
 * @generated from message livekit.proto.PublishDataResponse
 */
export type PublishDataResponse = Message<"livekit.proto.PublishDataResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.PublishDataResponse.
 * Use `create(PublishDataResponseSchema)` to create a new message.
 */
export const PublishDataResponseSchema: GenMessage<PublishDataResponse> = /*@__PURE__*/
  messageDesc(file_room, 13);

/**
 * @generated from message livekit.proto.PublishDataCallback
 */
export type PublishDataCallback = Message<"livekit.proto.PublishDataCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from field: optional string error = 2;
   */
  error: string;
};

/**
 * Describes the message livekit.proto.PublishDataCallback.
 * Use `create(PublishDataCallbackSchema)` to create a new message.
 */
export const PublishDataCallbackSchema: GenMessage<PublishDataCallback> = /*@__PURE__*/
  messageDesc(file_room, 14);

/**
 * Publish transcription messages to room
 *
 * @generated from message livekit.proto.PublishTranscriptionRequest
 */
export type PublishTranscriptionRequest = Message<"livekit.proto.PublishTranscriptionRequest"> & {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle: bigint;

  /**
   * @generated from field: required string participant_identity = 2;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string track_id = 3;
   */
  trackId: string;

  /**
   * @generated from field: repeated livekit.proto.TranscriptionSegment segments = 4;
   */
  segments: TranscriptionSegment[];
};

/**
 * Describes the message livekit.proto.PublishTranscriptionRequest.
 * Use `create(PublishTranscriptionRequestSchema)` to create a new message.
 */
export const PublishTranscriptionRequestSchema: GenMessage<PublishTranscriptionRequest> = /*@__PURE__*/
  messageDesc(file_room, 15);

/**
 * @generated from message livekit.proto.PublishTranscriptionResponse
 */
export type PublishTranscriptionResponse = Message<"livekit.proto.PublishTranscriptionResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.PublishTranscriptionResponse.
 * Use `create(PublishTranscriptionResponseSchema)` to create a new message.
 */
export const PublishTranscriptionResponseSchema: GenMessage<PublishTranscriptionResponse> = /*@__PURE__*/
  messageDesc(file_room, 16);

/**
 * @generated from message livekit.proto.PublishTranscriptionCallback
 */
export type PublishTranscriptionCallback = Message<"livekit.proto.PublishTranscriptionCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from field: optional string error = 2;
   */
  error: string;
};

/**
 * Describes the message livekit.proto.PublishTranscriptionCallback.
 * Use `create(PublishTranscriptionCallbackSchema)` to create a new message.
 */
export const PublishTranscriptionCallbackSchema: GenMessage<PublishTranscriptionCallback> = /*@__PURE__*/
  messageDesc(file_room, 17);

/**
 * Publish Sip DTMF messages to other participants
 *
 * @generated from message livekit.proto.PublishSipDtmfRequest
 */
export type PublishSipDtmfRequest = Message<"livekit.proto.PublishSipDtmfRequest"> & {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle: bigint;

  /**
   * @generated from field: required uint32 code = 2;
   */
  code: number;

  /**
   * @generated from field: required string digit = 3;
   */
  digit: string;

  /**
   * @generated from field: repeated string destination_identities = 4;
   */
  destinationIdentities: string[];
};

/**
 * Describes the message livekit.proto.PublishSipDtmfRequest.
 * Use `create(PublishSipDtmfRequestSchema)` to create a new message.
 */
export const PublishSipDtmfRequestSchema: GenMessage<PublishSipDtmfRequest> = /*@__PURE__*/
  messageDesc(file_room, 18);

/**
 * @generated from message livekit.proto.PublishSipDtmfResponse
 */
export type PublishSipDtmfResponse = Message<"livekit.proto.PublishSipDtmfResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.PublishSipDtmfResponse.
 * Use `create(PublishSipDtmfResponseSchema)` to create a new message.
 */
export const PublishSipDtmfResponseSchema: GenMessage<PublishSipDtmfResponse> = /*@__PURE__*/
  messageDesc(file_room, 19);

/**
 * @generated from message livekit.proto.PublishSipDtmfCallback
 */
export type PublishSipDtmfCallback = Message<"livekit.proto.PublishSipDtmfCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from field: optional string error = 2;
   */
  error: string;
};

/**
 * Describes the message livekit.proto.PublishSipDtmfCallback.
 * Use `create(PublishSipDtmfCallbackSchema)` to create a new message.
 */
export const PublishSipDtmfCallbackSchema: GenMessage<PublishSipDtmfCallback> = /*@__PURE__*/
  messageDesc(file_room, 20);

/**
 * Change the local participant's metadata
 *
 * @generated from message livekit.proto.SetLocalMetadataRequest
 */
export type SetLocalMetadataRequest = Message<"livekit.proto.SetLocalMetadataRequest"> & {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle: bigint;

  /**
   * @generated from field: required string metadata = 2;
   */
  metadata: string;
};

/**
 * Describes the message livekit.proto.SetLocalMetadataRequest.
 * Use `create(SetLocalMetadataRequestSchema)` to create a new message.
 */
export const SetLocalMetadataRequestSchema: GenMessage<SetLocalMetadataRequest> = /*@__PURE__*/
  messageDesc(file_room, 21);

/**
 * @generated from message livekit.proto.SetLocalMetadataResponse
 */
export type SetLocalMetadataResponse = Message<"livekit.proto.SetLocalMetadataResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.SetLocalMetadataResponse.
 * Use `create(SetLocalMetadataResponseSchema)` to create a new message.
 */
export const SetLocalMetadataResponseSchema: GenMessage<SetLocalMetadataResponse> = /*@__PURE__*/
  messageDesc(file_room, 22);

/**
 * @generated from message livekit.proto.SetLocalMetadataCallback
 */
export type SetLocalMetadataCallback = Message<"livekit.proto.SetLocalMetadataCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from field: optional string error = 2;
   */
  error: string;
};

/**
 * Describes the message livekit.proto.SetLocalMetadataCallback.
 * Use `create(SetLocalMetadataCallbackSchema)` to create a new message.
 */
export const SetLocalMetadataCallbackSchema: GenMessage<SetLocalMetadataCallback> = /*@__PURE__*/
  messageDesc(file_room, 23);

/**
 * @generated from message livekit.proto.SendChatMessageRequest
 */
export type SendChatMessageRequest = Message<"livekit.proto.SendChatMessageRequest"> & {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle: bigint;

  /**
   * @generated from field: required string message = 2;
   */
  message: string;

  /**
   * @generated from field: repeated string destination_identities = 3;
   */
  destinationIdentities: string[];

  /**
   * @generated from field: optional string sender_identity = 4;
   */
  senderIdentity: string;
};

/**
 * Describes the message livekit.proto.SendChatMessageRequest.
 * Use `create(SendChatMessageRequestSchema)` to create a new message.
 */
export const SendChatMessageRequestSchema: GenMessage<SendChatMessageRequest> = /*@__PURE__*/
  messageDesc(file_room, 24);

/**
 * @generated from message livekit.proto.EditChatMessageRequest
 */
export type EditChatMessageRequest = Message<"livekit.proto.EditChatMessageRequest"> & {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle: bigint;

  /**
   * @generated from field: required string edit_text = 2;
   */
  editText: string;

  /**
   * @generated from field: required livekit.proto.ChatMessage original_message = 3;
   */
  originalMessage?: ChatMessage;

  /**
   * @generated from field: repeated string destination_identities = 4;
   */
  destinationIdentities: string[];

  /**
   * @generated from field: optional string sender_identity = 5;
   */
  senderIdentity: string;
};

/**
 * Describes the message livekit.proto.EditChatMessageRequest.
 * Use `create(EditChatMessageRequestSchema)` to create a new message.
 */
export const EditChatMessageRequestSchema: GenMessage<EditChatMessageRequest> = /*@__PURE__*/
  messageDesc(file_room, 25);

/**
 * @generated from message livekit.proto.SendChatMessageResponse
 */
export type SendChatMessageResponse = Message<"livekit.proto.SendChatMessageResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.SendChatMessageResponse.
 * Use `create(SendChatMessageResponseSchema)` to create a new message.
 */
export const SendChatMessageResponseSchema: GenMessage<SendChatMessageResponse> = /*@__PURE__*/
  messageDesc(file_room, 26);

/**
 * @generated from message livekit.proto.SendChatMessageCallback
 */
export type SendChatMessageCallback = Message<"livekit.proto.SendChatMessageCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from oneof livekit.proto.SendChatMessageCallback.message
   */
  message: {
    /**
     * @generated from field: string error = 2;
     */
    value: string;
    case: "error";
  } | {
    /**
     * @generated from field: livekit.proto.ChatMessage chat_message = 3;
     */
    value: ChatMessage;
    case: "chatMessage";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.SendChatMessageCallback.
 * Use `create(SendChatMessageCallbackSchema)` to create a new message.
 */
export const SendChatMessageCallbackSchema: GenMessage<SendChatMessageCallback> = /*@__PURE__*/
  messageDesc(file_room, 27);

/**
 * Change the local participant's attributes
 *
 * @generated from message livekit.proto.SetLocalAttributesRequest
 */
export type SetLocalAttributesRequest = Message<"livekit.proto.SetLocalAttributesRequest"> & {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle: bigint;

  /**
   * @generated from field: repeated livekit.proto.AttributesEntry attributes = 2;
   */
  attributes: AttributesEntry[];
};

/**
 * Describes the message livekit.proto.SetLocalAttributesRequest.
 * Use `create(SetLocalAttributesRequestSchema)` to create a new message.
 */
export const SetLocalAttributesRequestSchema: GenMessage<SetLocalAttributesRequest> = /*@__PURE__*/
  messageDesc(file_room, 28);

/**
 * @generated from message livekit.proto.AttributesEntry
 */
export type AttributesEntry = Message<"livekit.proto.AttributesEntry"> & {
  /**
   * @generated from field: required string key = 1;
   */
  key: string;

  /**
   * @generated from field: required string value = 2;
   */
  value: string;
};

/**
 * Describes the message livekit.proto.AttributesEntry.
 * Use `create(AttributesEntrySchema)` to create a new message.
 */
export const AttributesEntrySchema: GenMessage<AttributesEntry> = /*@__PURE__*/
  messageDesc(file_room, 29);

/**
 * @generated from message livekit.proto.SetLocalAttributesResponse
 */
export type SetLocalAttributesResponse = Message<"livekit.proto.SetLocalAttributesResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.SetLocalAttributesResponse.
 * Use `create(SetLocalAttributesResponseSchema)` to create a new message.
 */
export const SetLocalAttributesResponseSchema: GenMessage<SetLocalAttributesResponse> = /*@__PURE__*/
  messageDesc(file_room, 30);

/**
 * @generated from message livekit.proto.SetLocalAttributesCallback
 */
export type SetLocalAttributesCallback = Message<"livekit.proto.SetLocalAttributesCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from field: optional string error = 2;
   */
  error: string;
};

/**
 * Describes the message livekit.proto.SetLocalAttributesCallback.
 * Use `create(SetLocalAttributesCallbackSchema)` to create a new message.
 */
export const SetLocalAttributesCallbackSchema: GenMessage<SetLocalAttributesCallback> = /*@__PURE__*/
  messageDesc(file_room, 31);

/**
 * Change the local participant's name
 *
 * @generated from message livekit.proto.SetLocalNameRequest
 */
export type SetLocalNameRequest = Message<"livekit.proto.SetLocalNameRequest"> & {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle: bigint;

  /**
   * @generated from field: required string name = 2;
   */
  name: string;
};

/**
 * Describes the message livekit.proto.SetLocalNameRequest.
 * Use `create(SetLocalNameRequestSchema)` to create a new message.
 */
export const SetLocalNameRequestSchema: GenMessage<SetLocalNameRequest> = /*@__PURE__*/
  messageDesc(file_room, 32);

/**
 * @generated from message livekit.proto.SetLocalNameResponse
 */
export type SetLocalNameResponse = Message<"livekit.proto.SetLocalNameResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.SetLocalNameResponse.
 * Use `create(SetLocalNameResponseSchema)` to create a new message.
 */
export const SetLocalNameResponseSchema: GenMessage<SetLocalNameResponse> = /*@__PURE__*/
  messageDesc(file_room, 33);

/**
 * @generated from message livekit.proto.SetLocalNameCallback
 */
export type SetLocalNameCallback = Message<"livekit.proto.SetLocalNameCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from field: optional string error = 2;
   */
  error: string;
};

/**
 * Describes the message livekit.proto.SetLocalNameCallback.
 * Use `create(SetLocalNameCallbackSchema)` to create a new message.
 */
export const SetLocalNameCallbackSchema: GenMessage<SetLocalNameCallback> = /*@__PURE__*/
  messageDesc(file_room, 34);

/**
 * Change the "desire" to subs2ribe to a track
 *
 * @generated from message livekit.proto.SetSubscribedRequest
 */
export type SetSubscribedRequest = Message<"livekit.proto.SetSubscribedRequest"> & {
  /**
   * @generated from field: required bool subscribe = 1;
   */
  subscribe: boolean;

  /**
   * @generated from field: required uint64 publication_handle = 2;
   */
  publicationHandle: bigint;
};

/**
 * Describes the message livekit.proto.SetSubscribedRequest.
 * Use `create(SetSubscribedRequestSchema)` to create a new message.
 */
export const SetSubscribedRequestSchema: GenMessage<SetSubscribedRequest> = /*@__PURE__*/
  messageDesc(file_room, 35);

/**
 * @generated from message livekit.proto.SetSubscribedResponse
 */
export type SetSubscribedResponse = Message<"livekit.proto.SetSubscribedResponse"> & {
};

/**
 * Describes the message livekit.proto.SetSubscribedResponse.
 * Use `create(SetSubscribedResponseSchema)` to create a new message.
 */
export const SetSubscribedResponseSchema: GenMessage<SetSubscribedResponse> = /*@__PURE__*/
  messageDesc(file_room, 36);

/**
 * @generated from message livekit.proto.GetSessionStatsRequest
 */
export type GetSessionStatsRequest = Message<"livekit.proto.GetSessionStatsRequest"> & {
  /**
   * @generated from field: required uint64 room_handle = 1;
   */
  roomHandle: bigint;
};

/**
 * Describes the message livekit.proto.GetSessionStatsRequest.
 * Use `create(GetSessionStatsRequestSchema)` to create a new message.
 */
export const GetSessionStatsRequestSchema: GenMessage<GetSessionStatsRequest> = /*@__PURE__*/
  messageDesc(file_room, 37);

/**
 * @generated from message livekit.proto.GetSessionStatsResponse
 */
export type GetSessionStatsResponse = Message<"livekit.proto.GetSessionStatsResponse"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;
};

/**
 * Describes the message livekit.proto.GetSessionStatsResponse.
 * Use `create(GetSessionStatsResponseSchema)` to create a new message.
 */
export const GetSessionStatsResponseSchema: GenMessage<GetSessionStatsResponse> = /*@__PURE__*/
  messageDesc(file_room, 38);

/**
 * @generated from message livekit.proto.GetSessionStatsCallback
 */
export type GetSessionStatsCallback = Message<"livekit.proto.GetSessionStatsCallback"> & {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId: bigint;

  /**
   * @generated from oneof livekit.proto.GetSessionStatsCallback.message
   */
  message: {
    /**
     * @generated from field: string error = 2;
     */
    value: string;
    case: "error";
  } | {
    /**
     * @generated from field: livekit.proto.GetSessionStatsCallback.Result result = 3;
     */
    value: GetSessionStatsCallback_Result;
    case: "result";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.GetSessionStatsCallback.
 * Use `create(GetSessionStatsCallbackSchema)` to create a new message.
 */
export const GetSessionStatsCallbackSchema: GenMessage<GetSessionStatsCallback> = /*@__PURE__*/
  messageDesc(file_room, 39);

/**
 * @generated from message livekit.proto.GetSessionStatsCallback.Result
 */
export type GetSessionStatsCallback_Result = Message<"livekit.proto.GetSessionStatsCallback.Result"> & {
  /**
   * @generated from field: repeated livekit.proto.RtcStats publisher_stats = 1;
   */
  publisherStats: RtcStats[];

  /**
   * @generated from field: repeated livekit.proto.RtcStats subscriber_stats = 2;
   */
  subscriberStats: RtcStats[];
};

/**
 * Describes the message livekit.proto.GetSessionStatsCallback.Result.
 * Use `create(GetSessionStatsCallback_ResultSchema)` to create a new message.
 */
export const GetSessionStatsCallback_ResultSchema: GenMessage<GetSessionStatsCallback_Result> = /*@__PURE__*/
  messageDesc(file_room, 39, 0);

/**
 * @generated from message livekit.proto.VideoEncoding
 */
export type VideoEncoding = Message<"livekit.proto.VideoEncoding"> & {
  /**
   * @generated from field: required uint64 max_bitrate = 1;
   */
  maxBitrate: bigint;

  /**
   * @generated from field: required double max_framerate = 2;
   */
  maxFramerate: number;
};

/**
 * Describes the message livekit.proto.VideoEncoding.
 * Use `create(VideoEncodingSchema)` to create a new message.
 */
export const VideoEncodingSchema: GenMessage<VideoEncoding> = /*@__PURE__*/
  messageDesc(file_room, 40);

/**
 * @generated from message livekit.proto.AudioEncoding
 */
export type AudioEncoding = Message<"livekit.proto.AudioEncoding"> & {
  /**
   * @generated from field: required uint64 max_bitrate = 1;
   */
  maxBitrate: bigint;
};

/**
 * Describes the message livekit.proto.AudioEncoding.
 * Use `create(AudioEncodingSchema)` to create a new message.
 */
export const AudioEncodingSchema: GenMessage<AudioEncoding> = /*@__PURE__*/
  messageDesc(file_room, 41);

/**
 * @generated from message livekit.proto.TrackPublishOptions
 */
export type TrackPublishOptions = Message<"livekit.proto.TrackPublishOptions"> & {
  /**
   * encodings are optional
   *
   * @generated from field: optional livekit.proto.VideoEncoding video_encoding = 1;
   */
  videoEncoding?: VideoEncoding;

  /**
   * @generated from field: optional livekit.proto.AudioEncoding audio_encoding = 2;
   */
  audioEncoding?: AudioEncoding;

  /**
   * @generated from field: required livekit.proto.VideoCodec video_codec = 3;
   */
  videoCodec: VideoCodec;

  /**
   * @generated from field: required bool dtx = 4;
   */
  dtx: boolean;

  /**
   * @generated from field: required bool red = 5;
   */
  red: boolean;

  /**
   * @generated from field: required bool simulcast = 6;
   */
  simulcast: boolean;

  /**
   * @generated from field: required livekit.proto.TrackSource source = 7;
   */
  source: TrackSource;

  /**
   * @generated from field: required string stream = 8;
   */
  stream: string;
};

/**
 * Describes the message livekit.proto.TrackPublishOptions.
 * Use `create(TrackPublishOptionsSchema)` to create a new message.
 */
export const TrackPublishOptionsSchema: GenMessage<TrackPublishOptions> = /*@__PURE__*/
  messageDesc(file_room, 42);

/**
 * @generated from message livekit.proto.IceServer
 */
export type IceServer = Message<"livekit.proto.IceServer"> & {
  /**
   * @generated from field: repeated string urls = 1;
   */
  urls: string[];

  /**
   * @generated from field: optional string username = 2;
   */
  username: string;

  /**
   * @generated from field: optional string password = 3;
   */
  password: string;
};

/**
 * Describes the message livekit.proto.IceServer.
 * Use `create(IceServerSchema)` to create a new message.
 */
export const IceServerSchema: GenMessage<IceServer> = /*@__PURE__*/
  messageDesc(file_room, 43);

/**
 * @generated from message livekit.proto.RtcConfig
 */
export type RtcConfig = Message<"livekit.proto.RtcConfig"> & {
  /**
   * @generated from field: optional livekit.proto.IceTransportType ice_transport_type = 1;
   */
  iceTransportType: IceTransportType;

  /**
   * @generated from field: optional livekit.proto.ContinualGatheringPolicy continual_gathering_policy = 2;
   */
  continualGatheringPolicy: ContinualGatheringPolicy;

  /**
   * empty fallback to default
   *
   * @generated from field: repeated livekit.proto.IceServer ice_servers = 3;
   */
  iceServers: IceServer[];
};

/**
 * Describes the message livekit.proto.RtcConfig.
 * Use `create(RtcConfigSchema)` to create a new message.
 */
export const RtcConfigSchema: GenMessage<RtcConfig> = /*@__PURE__*/
  messageDesc(file_room, 44);

/**
 * @generated from message livekit.proto.RoomOptions
 */
export type RoomOptions = Message<"livekit.proto.RoomOptions"> & {
  /**
   * @generated from field: required bool auto_subscribe = 1;
   */
  autoSubscribe: boolean;

  /**
   * @generated from field: required bool adaptive_stream = 2;
   */
  adaptiveStream: boolean;

  /**
   * @generated from field: required bool dynacast = 3;
   */
  dynacast: boolean;

  /**
   * @generated from field: optional livekit.proto.E2eeOptions e2ee = 4;
   */
  e2ee?: E2eeOptions;

  /**
   * allow to setup a custom RtcConfiguration
   *
   * @generated from field: optional livekit.proto.RtcConfig rtc_config = 5;
   */
  rtcConfig?: RtcConfig;

  /**
   * @generated from field: required uint32 join_retries = 6;
   */
  joinRetries: number;
};

/**
 * Describes the message livekit.proto.RoomOptions.
 * Use `create(RoomOptionsSchema)` to create a new message.
 */
export const RoomOptionsSchema: GenMessage<RoomOptions> = /*@__PURE__*/
  messageDesc(file_room, 45);

/**
 * @generated from message livekit.proto.TranscriptionSegment
 */
export type TranscriptionSegment = Message<"livekit.proto.TranscriptionSegment"> & {
  /**
   * @generated from field: required string id = 1;
   */
  id: string;

  /**
   * @generated from field: required string text = 2;
   */
  text: string;

  /**
   * @generated from field: required uint64 start_time = 3;
   */
  startTime: bigint;

  /**
   * @generated from field: required uint64 end_time = 4;
   */
  endTime: bigint;

  /**
   * @generated from field: required bool final = 5;
   */
  final: boolean;

  /**
   * @generated from field: required string language = 6;
   */
  language: string;
};

/**
 * Describes the message livekit.proto.TranscriptionSegment.
 * Use `create(TranscriptionSegmentSchema)` to create a new message.
 */
export const TranscriptionSegmentSchema: GenMessage<TranscriptionSegment> = /*@__PURE__*/
  messageDesc(file_room, 46);

/**
 * @generated from message livekit.proto.BufferInfo
 */
export type BufferInfo = Message<"livekit.proto.BufferInfo"> & {
  /**
   * @generated from field: required uint64 data_ptr = 1;
   */
  dataPtr: bigint;

  /**
   * @generated from field: required uint64 data_len = 2;
   */
  dataLen: bigint;
};

/**
 * Describes the message livekit.proto.BufferInfo.
 * Use `create(BufferInfoSchema)` to create a new message.
 */
export const BufferInfoSchema: GenMessage<BufferInfo> = /*@__PURE__*/
  messageDesc(file_room, 47);

/**
 * @generated from message livekit.proto.OwnedBuffer
 */
export type OwnedBuffer = Message<"livekit.proto.OwnedBuffer"> & {
  /**
   * @generated from field: required livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: required livekit.proto.BufferInfo data = 2;
   */
  data?: BufferInfo;
};

/**
 * Describes the message livekit.proto.OwnedBuffer.
 * Use `create(OwnedBufferSchema)` to create a new message.
 */
export const OwnedBufferSchema: GenMessage<OwnedBuffer> = /*@__PURE__*/
  messageDesc(file_room, 48);

/**
 * @generated from message livekit.proto.RoomEvent
 */
export type RoomEvent = Message<"livekit.proto.RoomEvent"> & {
  /**
   * @generated from field: required uint64 room_handle = 1;
   */
  roomHandle: bigint;

  /**
   * @generated from oneof livekit.proto.RoomEvent.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.ParticipantConnected participant_connected = 2;
     */
    value: ParticipantConnected;
    case: "participantConnected";
  } | {
    /**
     * @generated from field: livekit.proto.ParticipantDisconnected participant_disconnected = 3;
     */
    value: ParticipantDisconnected;
    case: "participantDisconnected";
  } | {
    /**
     * @generated from field: livekit.proto.LocalTrackPublished local_track_published = 4;
     */
    value: LocalTrackPublished;
    case: "localTrackPublished";
  } | {
    /**
     * @generated from field: livekit.proto.LocalTrackUnpublished local_track_unpublished = 5;
     */
    value: LocalTrackUnpublished;
    case: "localTrackUnpublished";
  } | {
    /**
     * @generated from field: livekit.proto.LocalTrackSubscribed local_track_subscribed = 6;
     */
    value: LocalTrackSubscribed;
    case: "localTrackSubscribed";
  } | {
    /**
     * @generated from field: livekit.proto.TrackPublished track_published = 7;
     */
    value: TrackPublished;
    case: "trackPublished";
  } | {
    /**
     * @generated from field: livekit.proto.TrackUnpublished track_unpublished = 8;
     */
    value: TrackUnpublished;
    case: "trackUnpublished";
  } | {
    /**
     * @generated from field: livekit.proto.TrackSubscribed track_subscribed = 9;
     */
    value: TrackSubscribed;
    case: "trackSubscribed";
  } | {
    /**
     * @generated from field: livekit.proto.TrackUnsubscribed track_unsubscribed = 10;
     */
    value: TrackUnsubscribed;
    case: "trackUnsubscribed";
  } | {
    /**
     * @generated from field: livekit.proto.TrackSubscriptionFailed track_subscription_failed = 11;
     */
    value: TrackSubscriptionFailed;
    case: "trackSubscriptionFailed";
  } | {
    /**
     * @generated from field: livekit.proto.TrackMuted track_muted = 12;
     */
    value: TrackMuted;
    case: "trackMuted";
  } | {
    /**
     * @generated from field: livekit.proto.TrackUnmuted track_unmuted = 13;
     */
    value: TrackUnmuted;
    case: "trackUnmuted";
  } | {
    /**
     * @generated from field: livekit.proto.ActiveSpeakersChanged active_speakers_changed = 14;
     */
    value: ActiveSpeakersChanged;
    case: "activeSpeakersChanged";
  } | {
    /**
     * @generated from field: livekit.proto.RoomMetadataChanged room_metadata_changed = 15;
     */
    value: RoomMetadataChanged;
    case: "roomMetadataChanged";
  } | {
    /**
     * @generated from field: livekit.proto.RoomSidChanged room_sid_changed = 16;
     */
    value: RoomSidChanged;
    case: "roomSidChanged";
  } | {
    /**
     * @generated from field: livekit.proto.ParticipantMetadataChanged participant_metadata_changed = 17;
     */
    value: ParticipantMetadataChanged;
    case: "participantMetadataChanged";
  } | {
    /**
     * @generated from field: livekit.proto.ParticipantNameChanged participant_name_changed = 18;
     */
    value: ParticipantNameChanged;
    case: "participantNameChanged";
  } | {
    /**
     * @generated from field: livekit.proto.ParticipantAttributesChanged participant_attributes_changed = 19;
     */
    value: ParticipantAttributesChanged;
    case: "participantAttributesChanged";
  } | {
    /**
     * @generated from field: livekit.proto.ConnectionQualityChanged connection_quality_changed = 20;
     */
    value: ConnectionQualityChanged;
    case: "connectionQualityChanged";
  } | {
    /**
     * @generated from field: livekit.proto.ConnectionStateChanged connection_state_changed = 21;
     */
    value: ConnectionStateChanged;
    case: "connectionStateChanged";
  } | {
    /**
     * Connected connected = 21;
     *
     * @generated from field: livekit.proto.Disconnected disconnected = 22;
     */
    value: Disconnected;
    case: "disconnected";
  } | {
    /**
     * @generated from field: livekit.proto.Reconnecting reconnecting = 23;
     */
    value: Reconnecting;
    case: "reconnecting";
  } | {
    /**
     * @generated from field: livekit.proto.Reconnected reconnected = 24;
     */
    value: Reconnected;
    case: "reconnected";
  } | {
    /**
     * @generated from field: livekit.proto.E2eeStateChanged e2ee_state_changed = 25;
     */
    value: E2eeStateChanged;
    case: "e2eeStateChanged";
  } | {
    /**
     * The stream of room events has ended
     *
     * @generated from field: livekit.proto.RoomEOS eos = 26;
     */
    value: RoomEOS;
    case: "eos";
  } | {
    /**
     * @generated from field: livekit.proto.DataPacketReceived data_packet_received = 27;
     */
    value: DataPacketReceived;
    case: "dataPacketReceived";
  } | {
    /**
     * @generated from field: livekit.proto.TranscriptionReceived transcription_received = 28;
     */
    value: TranscriptionReceived;
    case: "transcriptionReceived";
  } | {
    /**
     * @generated from field: livekit.proto.ChatMessageReceived chat_message = 29;
     */
    value: ChatMessageReceived;
    case: "chatMessage";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.RoomEvent.
 * Use `create(RoomEventSchema)` to create a new message.
 */
export const RoomEventSchema: GenMessage<RoomEvent> = /*@__PURE__*/
  messageDesc(file_room, 49);

/**
 * @generated from message livekit.proto.RoomInfo
 */
export type RoomInfo = Message<"livekit.proto.RoomInfo"> & {
  /**
   * @generated from field: optional string sid = 1;
   */
  sid: string;

  /**
   * @generated from field: required string name = 2;
   */
  name: string;

  /**
   * @generated from field: required string metadata = 3;
   */
  metadata: string;
};

/**
 * Describes the message livekit.proto.RoomInfo.
 * Use `create(RoomInfoSchema)` to create a new message.
 */
export const RoomInfoSchema: GenMessage<RoomInfo> = /*@__PURE__*/
  messageDesc(file_room, 50);

/**
 * @generated from message livekit.proto.OwnedRoom
 */
export type OwnedRoom = Message<"livekit.proto.OwnedRoom"> & {
  /**
   * @generated from field: required livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: required livekit.proto.RoomInfo info = 2;
   */
  info?: RoomInfo;
};

/**
 * Describes the message livekit.proto.OwnedRoom.
 * Use `create(OwnedRoomSchema)` to create a new message.
 */
export const OwnedRoomSchema: GenMessage<OwnedRoom> = /*@__PURE__*/
  messageDesc(file_room, 51);

/**
 * @generated from message livekit.proto.ParticipantConnected
 */
export type ParticipantConnected = Message<"livekit.proto.ParticipantConnected"> & {
  /**
   * @generated from field: required livekit.proto.OwnedParticipant info = 1;
   */
  info?: OwnedParticipant;
};

/**
 * Describes the message livekit.proto.ParticipantConnected.
 * Use `create(ParticipantConnectedSchema)` to create a new message.
 */
export const ParticipantConnectedSchema: GenMessage<ParticipantConnected> = /*@__PURE__*/
  messageDesc(file_room, 52);

/**
 * @generated from message livekit.proto.ParticipantDisconnected
 */
export type ParticipantDisconnected = Message<"livekit.proto.ParticipantDisconnected"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;
};

/**
 * Describes the message livekit.proto.ParticipantDisconnected.
 * Use `create(ParticipantDisconnectedSchema)` to create a new message.
 */
export const ParticipantDisconnectedSchema: GenMessage<ParticipantDisconnected> = /*@__PURE__*/
  messageDesc(file_room, 53);

/**
 * @generated from message livekit.proto.LocalTrackPublished
 */
export type LocalTrackPublished = Message<"livekit.proto.LocalTrackPublished"> & {
  /**
   * The TrackPublicationInfo comes from the PublishTrack response
   * and the FfiClient musts wait for it before firing this event
   *
   * @generated from field: required string track_sid = 1;
   */
  trackSid: string;
};

/**
 * Describes the message livekit.proto.LocalTrackPublished.
 * Use `create(LocalTrackPublishedSchema)` to create a new message.
 */
export const LocalTrackPublishedSchema: GenMessage<LocalTrackPublished> = /*@__PURE__*/
  messageDesc(file_room, 54);

/**
 * @generated from message livekit.proto.LocalTrackUnpublished
 */
export type LocalTrackUnpublished = Message<"livekit.proto.LocalTrackUnpublished"> & {
  /**
   * @generated from field: required string publication_sid = 1;
   */
  publicationSid: string;
};

/**
 * Describes the message livekit.proto.LocalTrackUnpublished.
 * Use `create(LocalTrackUnpublishedSchema)` to create a new message.
 */
export const LocalTrackUnpublishedSchema: GenMessage<LocalTrackUnpublished> = /*@__PURE__*/
  messageDesc(file_room, 55);

/**
 * @generated from message livekit.proto.LocalTrackSubscribed
 */
export type LocalTrackSubscribed = Message<"livekit.proto.LocalTrackSubscribed"> & {
  /**
   * @generated from field: required string track_sid = 2;
   */
  trackSid: string;
};

/**
 * Describes the message livekit.proto.LocalTrackSubscribed.
 * Use `create(LocalTrackSubscribedSchema)` to create a new message.
 */
export const LocalTrackSubscribedSchema: GenMessage<LocalTrackSubscribed> = /*@__PURE__*/
  messageDesc(file_room, 56);

/**
 * @generated from message livekit.proto.TrackPublished
 */
export type TrackPublished = Message<"livekit.proto.TrackPublished"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required livekit.proto.OwnedTrackPublication publication = 2;
   */
  publication?: OwnedTrackPublication;
};

/**
 * Describes the message livekit.proto.TrackPublished.
 * Use `create(TrackPublishedSchema)` to create a new message.
 */
export const TrackPublishedSchema: GenMessage<TrackPublished> = /*@__PURE__*/
  messageDesc(file_room, 57);

/**
 * @generated from message livekit.proto.TrackUnpublished
 */
export type TrackUnpublished = Message<"livekit.proto.TrackUnpublished"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string publication_sid = 2;
   */
  publicationSid: string;
};

/**
 * Describes the message livekit.proto.TrackUnpublished.
 * Use `create(TrackUnpublishedSchema)` to create a new message.
 */
export const TrackUnpublishedSchema: GenMessage<TrackUnpublished> = /*@__PURE__*/
  messageDesc(file_room, 58);

/**
 * Publication isn't needed for subscription events on the FFI
 * The FFI will retrieve the publication using the Track sid
 *
 * @generated from message livekit.proto.TrackSubscribed
 */
export type TrackSubscribed = Message<"livekit.proto.TrackSubscribed"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required livekit.proto.OwnedTrack track = 2;
   */
  track?: OwnedTrack;
};

/**
 * Describes the message livekit.proto.TrackSubscribed.
 * Use `create(TrackSubscribedSchema)` to create a new message.
 */
export const TrackSubscribedSchema: GenMessage<TrackSubscribed> = /*@__PURE__*/
  messageDesc(file_room, 59);

/**
 * @generated from message livekit.proto.TrackUnsubscribed
 */
export type TrackUnsubscribed = Message<"livekit.proto.TrackUnsubscribed"> & {
  /**
   * The FFI language can dispose/remove the VideoSink here
   *
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string track_sid = 2;
   */
  trackSid: string;
};

/**
 * Describes the message livekit.proto.TrackUnsubscribed.
 * Use `create(TrackUnsubscribedSchema)` to create a new message.
 */
export const TrackUnsubscribedSchema: GenMessage<TrackUnsubscribed> = /*@__PURE__*/
  messageDesc(file_room, 60);

/**
 * @generated from message livekit.proto.TrackSubscriptionFailed
 */
export type TrackSubscriptionFailed = Message<"livekit.proto.TrackSubscriptionFailed"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string track_sid = 2;
   */
  trackSid: string;

  /**
   * @generated from field: required string error = 3;
   */
  error: string;
};

/**
 * Describes the message livekit.proto.TrackSubscriptionFailed.
 * Use `create(TrackSubscriptionFailedSchema)` to create a new message.
 */
export const TrackSubscriptionFailedSchema: GenMessage<TrackSubscriptionFailed> = /*@__PURE__*/
  messageDesc(file_room, 61);

/**
 * @generated from message livekit.proto.TrackMuted
 */
export type TrackMuted = Message<"livekit.proto.TrackMuted"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string track_sid = 2;
   */
  trackSid: string;
};

/**
 * Describes the message livekit.proto.TrackMuted.
 * Use `create(TrackMutedSchema)` to create a new message.
 */
export const TrackMutedSchema: GenMessage<TrackMuted> = /*@__PURE__*/
  messageDesc(file_room, 62);

/**
 * @generated from message livekit.proto.TrackUnmuted
 */
export type TrackUnmuted = Message<"livekit.proto.TrackUnmuted"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string track_sid = 2;
   */
  trackSid: string;
};

/**
 * Describes the message livekit.proto.TrackUnmuted.
 * Use `create(TrackUnmutedSchema)` to create a new message.
 */
export const TrackUnmutedSchema: GenMessage<TrackUnmuted> = /*@__PURE__*/
  messageDesc(file_room, 63);

/**
 * @generated from message livekit.proto.E2eeStateChanged
 */
export type E2eeStateChanged = Message<"livekit.proto.E2eeStateChanged"> & {
  /**
   * Using sid instead of identity for ffi communication
   *
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required livekit.proto.EncryptionState state = 2;
   */
  state: EncryptionState;
};

/**
 * Describes the message livekit.proto.E2eeStateChanged.
 * Use `create(E2eeStateChangedSchema)` to create a new message.
 */
export const E2eeStateChangedSchema: GenMessage<E2eeStateChanged> = /*@__PURE__*/
  messageDesc(file_room, 64);

/**
 * @generated from message livekit.proto.ActiveSpeakersChanged
 */
export type ActiveSpeakersChanged = Message<"livekit.proto.ActiveSpeakersChanged"> & {
  /**
   * @generated from field: repeated string participant_identities = 1;
   */
  participantIdentities: string[];
};

/**
 * Describes the message livekit.proto.ActiveSpeakersChanged.
 * Use `create(ActiveSpeakersChangedSchema)` to create a new message.
 */
export const ActiveSpeakersChangedSchema: GenMessage<ActiveSpeakersChanged> = /*@__PURE__*/
  messageDesc(file_room, 65);

/**
 * @generated from message livekit.proto.RoomMetadataChanged
 */
export type RoomMetadataChanged = Message<"livekit.proto.RoomMetadataChanged"> & {
  /**
   * @generated from field: required string metadata = 1;
   */
  metadata: string;
};

/**
 * Describes the message livekit.proto.RoomMetadataChanged.
 * Use `create(RoomMetadataChangedSchema)` to create a new message.
 */
export const RoomMetadataChangedSchema: GenMessage<RoomMetadataChanged> = /*@__PURE__*/
  messageDesc(file_room, 66);

/**
 * @generated from message livekit.proto.RoomSidChanged
 */
export type RoomSidChanged = Message<"livekit.proto.RoomSidChanged"> & {
  /**
   * @generated from field: required string sid = 1;
   */
  sid: string;
};

/**
 * Describes the message livekit.proto.RoomSidChanged.
 * Use `create(RoomSidChangedSchema)` to create a new message.
 */
export const RoomSidChangedSchema: GenMessage<RoomSidChanged> = /*@__PURE__*/
  messageDesc(file_room, 67);

/**
 * @generated from message livekit.proto.ParticipantMetadataChanged
 */
export type ParticipantMetadataChanged = Message<"livekit.proto.ParticipantMetadataChanged"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string metadata = 2;
   */
  metadata: string;
};

/**
 * Describes the message livekit.proto.ParticipantMetadataChanged.
 * Use `create(ParticipantMetadataChangedSchema)` to create a new message.
 */
export const ParticipantMetadataChangedSchema: GenMessage<ParticipantMetadataChanged> = /*@__PURE__*/
  messageDesc(file_room, 68);

/**
 * @generated from message livekit.proto.ParticipantAttributesChanged
 */
export type ParticipantAttributesChanged = Message<"livekit.proto.ParticipantAttributesChanged"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: repeated livekit.proto.AttributesEntry attributes = 2;
   */
  attributes: AttributesEntry[];

  /**
   * @generated from field: repeated livekit.proto.AttributesEntry changed_attributes = 3;
   */
  changedAttributes: AttributesEntry[];
};

/**
 * Describes the message livekit.proto.ParticipantAttributesChanged.
 * Use `create(ParticipantAttributesChangedSchema)` to create a new message.
 */
export const ParticipantAttributesChangedSchema: GenMessage<ParticipantAttributesChanged> = /*@__PURE__*/
  messageDesc(file_room, 69);

/**
 * @generated from message livekit.proto.ParticipantNameChanged
 */
export type ParticipantNameChanged = Message<"livekit.proto.ParticipantNameChanged"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required string name = 2;
   */
  name: string;
};

/**
 * Describes the message livekit.proto.ParticipantNameChanged.
 * Use `create(ParticipantNameChangedSchema)` to create a new message.
 */
export const ParticipantNameChangedSchema: GenMessage<ParticipantNameChanged> = /*@__PURE__*/
  messageDesc(file_room, 70);

/**
 * @generated from message livekit.proto.ConnectionQualityChanged
 */
export type ConnectionQualityChanged = Message<"livekit.proto.ConnectionQualityChanged"> & {
  /**
   * @generated from field: required string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: required livekit.proto.ConnectionQuality quality = 2;
   */
  quality: ConnectionQuality;
};

/**
 * Describes the message livekit.proto.ConnectionQualityChanged.
 * Use `create(ConnectionQualityChangedSchema)` to create a new message.
 */
export const ConnectionQualityChangedSchema: GenMessage<ConnectionQualityChanged> = /*@__PURE__*/
  messageDesc(file_room, 71);

/**
 * @generated from message livekit.proto.UserPacket
 */
export type UserPacket = Message<"livekit.proto.UserPacket"> & {
  /**
   * @generated from field: required livekit.proto.OwnedBuffer data = 1;
   */
  data?: OwnedBuffer;

  /**
   * @generated from field: optional string topic = 2;
   */
  topic: string;
};

/**
 * Describes the message livekit.proto.UserPacket.
 * Use `create(UserPacketSchema)` to create a new message.
 */
export const UserPacketSchema: GenMessage<UserPacket> = /*@__PURE__*/
  messageDesc(file_room, 72);

/**
 * @generated from message livekit.proto.ChatMessage
 */
export type ChatMessage = Message<"livekit.proto.ChatMessage"> & {
  /**
   * @generated from field: required string id = 1;
   */
  id: string;

  /**
   * @generated from field: required int64 timestamp = 2;
   */
  timestamp: bigint;

  /**
   * @generated from field: required string message = 3;
   */
  message: string;

  /**
   * @generated from field: optional int64 edit_timestamp = 4;
   */
  editTimestamp: bigint;

  /**
   * @generated from field: optional bool deleted = 5;
   */
  deleted: boolean;

  /**
   * @generated from field: optional bool generated = 6;
   */
  generated: boolean;
};

/**
 * Describes the message livekit.proto.ChatMessage.
 * Use `create(ChatMessageSchema)` to create a new message.
 */
export const ChatMessageSchema: GenMessage<ChatMessage> = /*@__PURE__*/
  messageDesc(file_room, 73);

/**
 * @generated from message livekit.proto.ChatMessageReceived
 */
export type ChatMessageReceived = Message<"livekit.proto.ChatMessageReceived"> & {
  /**
   * @generated from field: required livekit.proto.ChatMessage message = 1;
   */
  message?: ChatMessage;

  /**
   * @generated from field: required string participant_identity = 2;
   */
  participantIdentity: string;
};

/**
 * Describes the message livekit.proto.ChatMessageReceived.
 * Use `create(ChatMessageReceivedSchema)` to create a new message.
 */
export const ChatMessageReceivedSchema: GenMessage<ChatMessageReceived> = /*@__PURE__*/
  messageDesc(file_room, 74);

/**
 * @generated from message livekit.proto.SipDTMF
 */
export type SipDTMF = Message<"livekit.proto.SipDTMF"> & {
  /**
   * @generated from field: required uint32 code = 1;
   */
  code: number;

  /**
   * @generated from field: optional string digit = 2;
   */
  digit: string;
};

/**
 * Describes the message livekit.proto.SipDTMF.
 * Use `create(SipDTMFSchema)` to create a new message.
 */
export const SipDTMFSchema: GenMessage<SipDTMF> = /*@__PURE__*/
  messageDesc(file_room, 75);

/**
 * @generated from message livekit.proto.DataPacketReceived
 */
export type DataPacketReceived = Message<"livekit.proto.DataPacketReceived"> & {
  /**
   * @generated from field: required livekit.proto.DataPacketKind kind = 1;
   */
  kind: DataPacketKind;

  /**
   * Can be empty if the data is sent a server SDK
   *
   * @generated from field: required string participant_identity = 2;
   */
  participantIdentity: string;

  /**
   * @generated from oneof livekit.proto.DataPacketReceived.value
   */
  value: {
    /**
     * @generated from field: livekit.proto.UserPacket user = 4;
     */
    value: UserPacket;
    case: "user";
  } | {
    /**
     * @generated from field: livekit.proto.SipDTMF sip_dtmf = 5;
     */
    value: SipDTMF;
    case: "sipDtmf";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message livekit.proto.DataPacketReceived.
 * Use `create(DataPacketReceivedSchema)` to create a new message.
 */
export const DataPacketReceivedSchema: GenMessage<DataPacketReceived> = /*@__PURE__*/
  messageDesc(file_room, 76);

/**
 * @generated from message livekit.proto.TranscriptionReceived
 */
export type TranscriptionReceived = Message<"livekit.proto.TranscriptionReceived"> & {
  /**
   * @generated from field: optional string participant_identity = 1;
   */
  participantIdentity: string;

  /**
   * @generated from field: optional string track_sid = 2;
   */
  trackSid: string;

  /**
   * @generated from field: repeated livekit.proto.TranscriptionSegment segments = 3;
   */
  segments: TranscriptionSegment[];
};

/**
 * Describes the message livekit.proto.TranscriptionReceived.
 * Use `create(TranscriptionReceivedSchema)` to create a new message.
 */
export const TranscriptionReceivedSchema: GenMessage<TranscriptionReceived> = /*@__PURE__*/
  messageDesc(file_room, 77);

/**
 * @generated from message livekit.proto.ConnectionStateChanged
 */
export type ConnectionStateChanged = Message<"livekit.proto.ConnectionStateChanged"> & {
  /**
   * @generated from field: required livekit.proto.ConnectionState state = 1;
   */
  state: ConnectionState;
};

/**
 * Describes the message livekit.proto.ConnectionStateChanged.
 * Use `create(ConnectionStateChangedSchema)` to create a new message.
 */
export const ConnectionStateChangedSchema: GenMessage<ConnectionStateChanged> = /*@__PURE__*/
  messageDesc(file_room, 78);

/**
 * @generated from message livekit.proto.Connected
 */
export type Connected = Message<"livekit.proto.Connected"> & {
};

/**
 * Describes the message livekit.proto.Connected.
 * Use `create(ConnectedSchema)` to create a new message.
 */
export const ConnectedSchema: GenMessage<Connected> = /*@__PURE__*/
  messageDesc(file_room, 79);

/**
 * @generated from message livekit.proto.Disconnected
 */
export type Disconnected = Message<"livekit.proto.Disconnected"> & {
  /**
   * @generated from field: required livekit.proto.DisconnectReason reason = 1;
   */
  reason: DisconnectReason;
};

/**
 * Describes the message livekit.proto.Disconnected.
 * Use `create(DisconnectedSchema)` to create a new message.
 */
export const DisconnectedSchema: GenMessage<Disconnected> = /*@__PURE__*/
  messageDesc(file_room, 80);

/**
 * @generated from message livekit.proto.Reconnecting
 */
export type Reconnecting = Message<"livekit.proto.Reconnecting"> & {
};

/**
 * Describes the message livekit.proto.Reconnecting.
 * Use `create(ReconnectingSchema)` to create a new message.
 */
export const ReconnectingSchema: GenMessage<Reconnecting> = /*@__PURE__*/
  messageDesc(file_room, 81);

/**
 * @generated from message livekit.proto.Reconnected
 */
export type Reconnected = Message<"livekit.proto.Reconnected"> & {
};

/**
 * Describes the message livekit.proto.Reconnected.
 * Use `create(ReconnectedSchema)` to create a new message.
 */
export const ReconnectedSchema: GenMessage<Reconnected> = /*@__PURE__*/
  messageDesc(file_room, 82);

/**
 * @generated from message livekit.proto.RoomEOS
 */
export type RoomEOS = Message<"livekit.proto.RoomEOS"> & {
};

/**
 * Describes the message livekit.proto.RoomEOS.
 * Use `create(RoomEOSSchema)` to create a new message.
 */
export const RoomEOSSchema: GenMessage<RoomEOS> = /*@__PURE__*/
  messageDesc(file_room, 83);

/**
 * @generated from enum livekit.proto.IceTransportType
 */
export enum IceTransportType {
  /**
   * @generated from enum value: TRANSPORT_RELAY = 0;
   */
  TRANSPORT_RELAY = 0,

  /**
   * @generated from enum value: TRANSPORT_NOHOST = 1;
   */
  TRANSPORT_NOHOST = 1,

  /**
   * @generated from enum value: TRANSPORT_ALL = 2;
   */
  TRANSPORT_ALL = 2,
}

/**
 * Describes the enum livekit.proto.IceTransportType.
 */
export const IceTransportTypeSchema: GenEnum<IceTransportType> = /*@__PURE__*/
  enumDesc(file_room, 0);

/**
 * @generated from enum livekit.proto.ContinualGatheringPolicy
 */
export enum ContinualGatheringPolicy {
  /**
   * @generated from enum value: GATHER_ONCE = 0;
   */
  GATHER_ONCE = 0,

  /**
   * @generated from enum value: GATHER_CONTINUALLY = 1;
   */
  GATHER_CONTINUALLY = 1,
}

/**
 * Describes the enum livekit.proto.ContinualGatheringPolicy.
 */
export const ContinualGatheringPolicySchema: GenEnum<ContinualGatheringPolicy> = /*@__PURE__*/
  enumDesc(file_room, 1);

/**
 * @generated from enum livekit.proto.ConnectionQuality
 */
export enum ConnectionQuality {
  /**
   * @generated from enum value: QUALITY_POOR = 0;
   */
  QUALITY_POOR = 0,

  /**
   * @generated from enum value: QUALITY_GOOD = 1;
   */
  QUALITY_GOOD = 1,

  /**
   * @generated from enum value: QUALITY_EXCELLENT = 2;
   */
  QUALITY_EXCELLENT = 2,

  /**
   * @generated from enum value: QUALITY_LOST = 3;
   */
  QUALITY_LOST = 3,
}

/**
 * Describes the enum livekit.proto.ConnectionQuality.
 */
export const ConnectionQualitySchema: GenEnum<ConnectionQuality> = /*@__PURE__*/
  enumDesc(file_room, 2);

/**
 * @generated from enum livekit.proto.ConnectionState
 */
export enum ConnectionState {
  /**
   * @generated from enum value: CONN_DISCONNECTED = 0;
   */
  CONN_DISCONNECTED = 0,

  /**
   * @generated from enum value: CONN_CONNECTED = 1;
   */
  CONN_CONNECTED = 1,

  /**
   * @generated from enum value: CONN_RECONNECTING = 2;
   */
  CONN_RECONNECTING = 2,
}

/**
 * Describes the enum livekit.proto.ConnectionState.
 */
export const ConnectionStateSchema: GenEnum<ConnectionState> = /*@__PURE__*/
  enumDesc(file_room, 3);

/**
 * @generated from enum livekit.proto.DataPacketKind
 */
export enum DataPacketKind {
  /**
   * @generated from enum value: KIND_LOSSY = 0;
   */
  KIND_LOSSY = 0,

  /**
   * @generated from enum value: KIND_RELIABLE = 1;
   */
  KIND_RELIABLE = 1,
}

/**
 * Describes the enum livekit.proto.DataPacketKind.
 */
export const DataPacketKindSchema: GenEnum<DataPacketKind> = /*@__PURE__*/
  enumDesc(file_room, 4);

/**
 * @generated from enum livekit.proto.DisconnectReason
 */
export enum DisconnectReason {
  /**
   * @generated from enum value: UNKNOWN_REASON = 0;
   */
  UNKNOWN_REASON = 0,

  /**
   * the client initiated the disconnect
   *
   * @generated from enum value: CLIENT_INITIATED = 1;
   */
  CLIENT_INITIATED = 1,

  /**
   * another participant with the same identity has joined the room
   *
   * @generated from enum value: DUPLICATE_IDENTITY = 2;
   */
  DUPLICATE_IDENTITY = 2,

  /**
   * the server instance is shutting down
   *
   * @generated from enum value: SERVER_SHUTDOWN = 3;
   */
  SERVER_SHUTDOWN = 3,

  /**
   * RoomService.RemoveParticipant was called
   *
   * @generated from enum value: PARTICIPANT_REMOVED = 4;
   */
  PARTICIPANT_REMOVED = 4,

  /**
   * RoomService.DeleteRoom was called
   *
   * @generated from enum value: ROOM_DELETED = 5;
   */
  ROOM_DELETED = 5,

  /**
   * the client is attempting to resume a session, but server is not aware of it
   *
   * @generated from enum value: STATE_MISMATCH = 6;
   */
  STATE_MISMATCH = 6,

  /**
   * client was unable to connect fully
   *
   * @generated from enum value: JOIN_FAILURE = 7;
   */
  JOIN_FAILURE = 7,

  /**
   * Cloud-only, the server requested Participant to migrate the connection elsewhere
   *
   * @generated from enum value: MIGRATION = 8;
   */
  MIGRATION = 8,

  /**
   * the signal websocket was closed unexpectedly
   *
   * @generated from enum value: SIGNAL_CLOSE = 9;
   */
  SIGNAL_CLOSE = 9,

  /**
   * the room was closed, due to all Standard and Ingress participants having left
   *
   * @generated from enum value: ROOM_CLOSED = 10;
   */
  ROOM_CLOSED = 10,
}

/**
 * Describes the enum livekit.proto.DisconnectReason.
 */
export const DisconnectReasonSchema: GenEnum<DisconnectReason> = /*@__PURE__*/
  enumDesc(file_room, 5);

