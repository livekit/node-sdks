// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file room.proto (package livekit.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { OwnedParticipant } from "./participant_pb.js";
import { OwnedTrack, OwnedTrackPublication, TrackSource } from "./track_pb.js";
import { RtcStats } from "./stats_pb.js";
import { VideoCodec } from "./video_frame_pb.js";
import { E2eeOptions, EncryptionState } from "./e2ee_pb.js";
import { FfiOwnedHandle } from "./handle_pb.js";

/**
 * @generated from enum livekit.proto.IceTransportType
 */
export enum IceTransportType {
  /**
   * @generated from enum value: TRANSPORT_RELAY = 0;
   */
  TRANSPORT_RELAY = 0,

  /**
   * @generated from enum value: TRANSPORT_NOHOST = 1;
   */
  TRANSPORT_NOHOST = 1,

  /**
   * @generated from enum value: TRANSPORT_ALL = 2;
   */
  TRANSPORT_ALL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(IceTransportType)
proto3.util.setEnumType(IceTransportType, "livekit.proto.IceTransportType", [
  { no: 0, name: "TRANSPORT_RELAY" },
  { no: 1, name: "TRANSPORT_NOHOST" },
  { no: 2, name: "TRANSPORT_ALL" },
]);

/**
 * @generated from enum livekit.proto.ContinualGatheringPolicy
 */
export enum ContinualGatheringPolicy {
  /**
   * @generated from enum value: GATHER_ONCE = 0;
   */
  GATHER_ONCE = 0,

  /**
   * @generated from enum value: GATHER_CONTINUALLY = 1;
   */
  GATHER_CONTINUALLY = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ContinualGatheringPolicy)
proto3.util.setEnumType(ContinualGatheringPolicy, "livekit.proto.ContinualGatheringPolicy", [
  { no: 0, name: "GATHER_ONCE" },
  { no: 1, name: "GATHER_CONTINUALLY" },
]);

/**
 * @generated from enum livekit.proto.ConnectionQuality
 */
export enum ConnectionQuality {
  /**
   * @generated from enum value: QUALITY_POOR = 0;
   */
  QUALITY_POOR = 0,

  /**
   * @generated from enum value: QUALITY_GOOD = 1;
   */
  QUALITY_GOOD = 1,

  /**
   * @generated from enum value: QUALITY_EXCELLENT = 2;
   */
  QUALITY_EXCELLENT = 2,

  /**
   * @generated from enum value: QUALITY_LOST = 3;
   */
  QUALITY_LOST = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ConnectionQuality)
proto3.util.setEnumType(ConnectionQuality, "livekit.proto.ConnectionQuality", [
  { no: 0, name: "QUALITY_POOR" },
  { no: 1, name: "QUALITY_GOOD" },
  { no: 2, name: "QUALITY_EXCELLENT" },
  { no: 3, name: "QUALITY_LOST" },
]);

/**
 * @generated from enum livekit.proto.ConnectionState
 */
export enum ConnectionState {
  /**
   * @generated from enum value: CONN_DISCONNECTED = 0;
   */
  CONN_DISCONNECTED = 0,

  /**
   * @generated from enum value: CONN_CONNECTED = 1;
   */
  CONN_CONNECTED = 1,

  /**
   * @generated from enum value: CONN_RECONNECTING = 2;
   */
  CONN_RECONNECTING = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ConnectionState)
proto3.util.setEnumType(ConnectionState, "livekit.proto.ConnectionState", [
  { no: 0, name: "CONN_DISCONNECTED" },
  { no: 1, name: "CONN_CONNECTED" },
  { no: 2, name: "CONN_RECONNECTING" },
]);

/**
 * @generated from enum livekit.proto.DataPacketKind
 */
export enum DataPacketKind {
  /**
   * @generated from enum value: KIND_LOSSY = 0;
   */
  KIND_LOSSY = 0,

  /**
   * @generated from enum value: KIND_RELIABLE = 1;
   */
  KIND_RELIABLE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(DataPacketKind)
proto3.util.setEnumType(DataPacketKind, "livekit.proto.DataPacketKind", [
  { no: 0, name: "KIND_LOSSY" },
  { no: 1, name: "KIND_RELIABLE" },
]);

/**
 * @generated from enum livekit.proto.DisconnectReason
 */
export enum DisconnectReason {
  /**
   * @generated from enum value: UNKNOWN_REASON = 0;
   */
  UNKNOWN_REASON = 0,

  /**
   * the client initiated the disconnect
   *
   * @generated from enum value: CLIENT_INITIATED = 1;
   */
  CLIENT_INITIATED = 1,

  /**
   * another participant with the same identity has joined the room
   *
   * @generated from enum value: DUPLICATE_IDENTITY = 2;
   */
  DUPLICATE_IDENTITY = 2,

  /**
   * the server instance is shutting down
   *
   * @generated from enum value: SERVER_SHUTDOWN = 3;
   */
  SERVER_SHUTDOWN = 3,

  /**
   * RoomService.RemoveParticipant was called
   *
   * @generated from enum value: PARTICIPANT_REMOVED = 4;
   */
  PARTICIPANT_REMOVED = 4,

  /**
   * RoomService.DeleteRoom was called
   *
   * @generated from enum value: ROOM_DELETED = 5;
   */
  ROOM_DELETED = 5,

  /**
   * the client is attempting to resume a session, but server is not aware of it
   *
   * @generated from enum value: STATE_MISMATCH = 6;
   */
  STATE_MISMATCH = 6,

  /**
   * client was unable to connect fully
   *
   * @generated from enum value: JOIN_FAILURE = 7;
   */
  JOIN_FAILURE = 7,

  /**
   * Cloud-only, the server requested Participant to migrate the connection elsewhere
   *
   * @generated from enum value: MIGRATION = 8;
   */
  MIGRATION = 8,

  /**
   * the signal websocket was closed unexpectedly
   *
   * @generated from enum value: SIGNAL_CLOSE = 9;
   */
  SIGNAL_CLOSE = 9,

  /**
   * the room was closed, due to all Standard and Ingress participants having left
   *
   * @generated from enum value: ROOM_CLOSED = 10;
   */
  ROOM_CLOSED = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(DisconnectReason)
proto3.util.setEnumType(DisconnectReason, "livekit.proto.DisconnectReason", [
  { no: 0, name: "UNKNOWN_REASON" },
  { no: 1, name: "CLIENT_INITIATED" },
  { no: 2, name: "DUPLICATE_IDENTITY" },
  { no: 3, name: "SERVER_SHUTDOWN" },
  { no: 4, name: "PARTICIPANT_REMOVED" },
  { no: 5, name: "ROOM_DELETED" },
  { no: 6, name: "STATE_MISMATCH" },
  { no: 7, name: "JOIN_FAILURE" },
  { no: 8, name: "MIGRATION" },
  { no: 9, name: "SIGNAL_CLOSE" },
  { no: 10, name: "ROOM_CLOSED" },
]);

/**
 * Connect to a new LiveKit room
 *
 * @generated from message livekit.proto.ConnectRequest
 */
export class ConnectRequest extends Message<ConnectRequest> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string token = 2;
   */
  token = "";

  /**
   * @generated from field: livekit.proto.RoomOptions options = 3;
   */
  options?: RoomOptions;

  constructor(data?: PartialMessage<ConnectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ConnectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: RoomOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectRequest {
    return new ConnectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectRequest | PlainMessage<ConnectRequest> | undefined, b: ConnectRequest | PlainMessage<ConnectRequest> | undefined): boolean {
    return proto3.util.equals(ConnectRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.ConnectResponse
 */
export class ConnectResponse extends Message<ConnectResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<ConnectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ConnectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectResponse {
    return new ConnectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectResponse {
    return new ConnectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectResponse {
    return new ConnectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectResponse | PlainMessage<ConnectResponse> | undefined, b: ConnectResponse | PlainMessage<ConnectResponse> | undefined): boolean {
    return proto3.util.equals(ConnectResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.ConnectCallback
 */
export class ConnectCallback extends Message<ConnectCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  /**
   * @generated from field: livekit.proto.OwnedRoom room = 3;
   */
  room?: OwnedRoom;

  /**
   * @generated from field: livekit.proto.OwnedParticipant local_participant = 4;
   */
  localParticipant?: OwnedParticipant;

  /**
   * @generated from field: repeated livekit.proto.ConnectCallback.ParticipantWithTracks participants = 5;
   */
  participants: ConnectCallback_ParticipantWithTracks[] = [];

  constructor(data?: PartialMessage<ConnectCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ConnectCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "room", kind: "message", T: OwnedRoom },
    { no: 4, name: "local_participant", kind: "message", T: OwnedParticipant },
    { no: 5, name: "participants", kind: "message", T: ConnectCallback_ParticipantWithTracks, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectCallback {
    return new ConnectCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectCallback {
    return new ConnectCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectCallback {
    return new ConnectCallback().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectCallback | PlainMessage<ConnectCallback> | undefined, b: ConnectCallback | PlainMessage<ConnectCallback> | undefined): boolean {
    return proto3.util.equals(ConnectCallback, a, b);
  }
}

/**
 * @generated from message livekit.proto.ConnectCallback.ParticipantWithTracks
 */
export class ConnectCallback_ParticipantWithTracks extends Message<ConnectCallback_ParticipantWithTracks> {
  /**
   * @generated from field: livekit.proto.OwnedParticipant participant = 1;
   */
  participant?: OwnedParticipant;

  /**
   * TrackInfo are not needed here, if we're subscribed to a track, the FfiServer will send
   * a TrackSubscribed event
   *
   * @generated from field: repeated livekit.proto.OwnedTrackPublication publications = 2;
   */
  publications: OwnedTrackPublication[] = [];

  constructor(data?: PartialMessage<ConnectCallback_ParticipantWithTracks>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ConnectCallback.ParticipantWithTracks";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant", kind: "message", T: OwnedParticipant },
    { no: 2, name: "publications", kind: "message", T: OwnedTrackPublication, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectCallback_ParticipantWithTracks {
    return new ConnectCallback_ParticipantWithTracks().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectCallback_ParticipantWithTracks {
    return new ConnectCallback_ParticipantWithTracks().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectCallback_ParticipantWithTracks {
    return new ConnectCallback_ParticipantWithTracks().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectCallback_ParticipantWithTracks | PlainMessage<ConnectCallback_ParticipantWithTracks> | undefined, b: ConnectCallback_ParticipantWithTracks | PlainMessage<ConnectCallback_ParticipantWithTracks> | undefined): boolean {
    return proto3.util.equals(ConnectCallback_ParticipantWithTracks, a, b);
  }
}

/**
 * Disconnect from the a room
 *
 * @generated from message livekit.proto.DisconnectRequest
 */
export class DisconnectRequest extends Message<DisconnectRequest> {
  /**
   * @generated from field: uint64 room_handle = 1;
   */
  roomHandle = protoInt64.zero;

  constructor(data?: PartialMessage<DisconnectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.DisconnectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisconnectRequest {
    return new DisconnectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisconnectRequest {
    return new DisconnectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisconnectRequest {
    return new DisconnectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DisconnectRequest | PlainMessage<DisconnectRequest> | undefined, b: DisconnectRequest | PlainMessage<DisconnectRequest> | undefined): boolean {
    return proto3.util.equals(DisconnectRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.DisconnectResponse
 */
export class DisconnectResponse extends Message<DisconnectResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<DisconnectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.DisconnectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisconnectResponse {
    return new DisconnectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisconnectResponse {
    return new DisconnectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisconnectResponse {
    return new DisconnectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DisconnectResponse | PlainMessage<DisconnectResponse> | undefined, b: DisconnectResponse | PlainMessage<DisconnectResponse> | undefined): boolean {
    return proto3.util.equals(DisconnectResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.DisconnectCallback
 */
export class DisconnectCallback extends Message<DisconnectCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<DisconnectCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.DisconnectCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisconnectCallback {
    return new DisconnectCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisconnectCallback {
    return new DisconnectCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisconnectCallback {
    return new DisconnectCallback().fromJsonString(jsonString, options);
  }

  static equals(a: DisconnectCallback | PlainMessage<DisconnectCallback> | undefined, b: DisconnectCallback | PlainMessage<DisconnectCallback> | undefined): boolean {
    return proto3.util.equals(DisconnectCallback, a, b);
  }
}

/**
 * Publish a track to the room
 *
 * @generated from message livekit.proto.PublishTrackRequest
 */
export class PublishTrackRequest extends Message<PublishTrackRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: uint64 track_handle = 2;
   */
  trackHandle = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.TrackPublishOptions options = 3;
   */
  options?: TrackPublishOptions;

  constructor(data?: PartialMessage<PublishTrackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishTrackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "track_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "options", kind: "message", T: TrackPublishOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishTrackRequest {
    return new PublishTrackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishTrackRequest {
    return new PublishTrackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishTrackRequest {
    return new PublishTrackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishTrackRequest | PlainMessage<PublishTrackRequest> | undefined, b: PublishTrackRequest | PlainMessage<PublishTrackRequest> | undefined): boolean {
    return proto3.util.equals(PublishTrackRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishTrackResponse
 */
export class PublishTrackResponse extends Message<PublishTrackResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<PublishTrackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishTrackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishTrackResponse {
    return new PublishTrackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishTrackResponse {
    return new PublishTrackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishTrackResponse {
    return new PublishTrackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishTrackResponse | PlainMessage<PublishTrackResponse> | undefined, b: PublishTrackResponse | PlainMessage<PublishTrackResponse> | undefined): boolean {
    return proto3.util.equals(PublishTrackResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishTrackCallback
 */
export class PublishTrackCallback extends Message<PublishTrackCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  /**
   * @generated from field: livekit.proto.OwnedTrackPublication publication = 3;
   */
  publication?: OwnedTrackPublication;

  constructor(data?: PartialMessage<PublishTrackCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishTrackCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "publication", kind: "message", T: OwnedTrackPublication },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishTrackCallback {
    return new PublishTrackCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishTrackCallback {
    return new PublishTrackCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishTrackCallback {
    return new PublishTrackCallback().fromJsonString(jsonString, options);
  }

  static equals(a: PublishTrackCallback | PlainMessage<PublishTrackCallback> | undefined, b: PublishTrackCallback | PlainMessage<PublishTrackCallback> | undefined): boolean {
    return proto3.util.equals(PublishTrackCallback, a, b);
  }
}

/**
 * Unpublish a track from the room
 *
 * @generated from message livekit.proto.UnpublishTrackRequest
 */
export class UnpublishTrackRequest extends Message<UnpublishTrackRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: string track_sid = 2;
   */
  trackSid = "";

  /**
   * @generated from field: bool stop_on_unpublish = 3;
   */
  stopOnUnpublish = false;

  constructor(data?: PartialMessage<UnpublishTrackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.UnpublishTrackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "stop_on_unpublish", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpublishTrackRequest {
    return new UnpublishTrackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpublishTrackRequest {
    return new UnpublishTrackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpublishTrackRequest {
    return new UnpublishTrackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnpublishTrackRequest | PlainMessage<UnpublishTrackRequest> | undefined, b: UnpublishTrackRequest | PlainMessage<UnpublishTrackRequest> | undefined): boolean {
    return proto3.util.equals(UnpublishTrackRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.UnpublishTrackResponse
 */
export class UnpublishTrackResponse extends Message<UnpublishTrackResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<UnpublishTrackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.UnpublishTrackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpublishTrackResponse {
    return new UnpublishTrackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpublishTrackResponse {
    return new UnpublishTrackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpublishTrackResponse {
    return new UnpublishTrackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnpublishTrackResponse | PlainMessage<UnpublishTrackResponse> | undefined, b: UnpublishTrackResponse | PlainMessage<UnpublishTrackResponse> | undefined): boolean {
    return proto3.util.equals(UnpublishTrackResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.UnpublishTrackCallback
 */
export class UnpublishTrackCallback extends Message<UnpublishTrackCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<UnpublishTrackCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.UnpublishTrackCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpublishTrackCallback {
    return new UnpublishTrackCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpublishTrackCallback {
    return new UnpublishTrackCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpublishTrackCallback {
    return new UnpublishTrackCallback().fromJsonString(jsonString, options);
  }

  static equals(a: UnpublishTrackCallback | PlainMessage<UnpublishTrackCallback> | undefined, b: UnpublishTrackCallback | PlainMessage<UnpublishTrackCallback> | undefined): boolean {
    return proto3.util.equals(UnpublishTrackCallback, a, b);
  }
}

/**
 * Publish data to other participants
 *
 * @generated from message livekit.proto.PublishDataRequest
 */
export class PublishDataRequest extends Message<PublishDataRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: uint64 data_ptr = 2;
   */
  dataPtr = protoInt64.zero;

  /**
   * @generated from field: uint64 data_len = 3;
   */
  dataLen = protoInt64.zero;

  /**
   * @generated from field: bool reliable = 4;
   */
  reliable = false;

  /**
   * @generated from field: repeated string destination_sids = 5 [deprecated = true];
   * @deprecated
   */
  destinationSids: string[] = [];

  /**
   * @generated from field: optional string topic = 6;
   */
  topic?: string;

  /**
   * @generated from field: repeated string destination_identities = 7;
   */
  destinationIdentities: string[] = [];

  constructor(data?: PartialMessage<PublishDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "data_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "data_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "reliable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "destination_sids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "destination_identities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishDataRequest {
    return new PublishDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishDataRequest {
    return new PublishDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishDataRequest {
    return new PublishDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishDataRequest | PlainMessage<PublishDataRequest> | undefined, b: PublishDataRequest | PlainMessage<PublishDataRequest> | undefined): boolean {
    return proto3.util.equals(PublishDataRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishDataResponse
 */
export class PublishDataResponse extends Message<PublishDataResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<PublishDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishDataResponse {
    return new PublishDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishDataResponse {
    return new PublishDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishDataResponse {
    return new PublishDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishDataResponse | PlainMessage<PublishDataResponse> | undefined, b: PublishDataResponse | PlainMessage<PublishDataResponse> | undefined): boolean {
    return proto3.util.equals(PublishDataResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishDataCallback
 */
export class PublishDataCallback extends Message<PublishDataCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<PublishDataCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishDataCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishDataCallback {
    return new PublishDataCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishDataCallback {
    return new PublishDataCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishDataCallback {
    return new PublishDataCallback().fromJsonString(jsonString, options);
  }

  static equals(a: PublishDataCallback | PlainMessage<PublishDataCallback> | undefined, b: PublishDataCallback | PlainMessage<PublishDataCallback> | undefined): boolean {
    return proto3.util.equals(PublishDataCallback, a, b);
  }
}

/**
 * Publish transcription messages to room
 *
 * @generated from message livekit.proto.PublishTranscriptionRequest
 */
export class PublishTranscriptionRequest extends Message<PublishTranscriptionRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: string participant_identity = 2;
   */
  participantIdentity = "";

  /**
   * @generated from field: string track_id = 3;
   */
  trackId = "";

  /**
   * @generated from field: repeated livekit.proto.TranscriptionSegment segments = 4;
   */
  segments: TranscriptionSegment[] = [];

  constructor(data?: PartialMessage<PublishTranscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishTranscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "track_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "segments", kind: "message", T: TranscriptionSegment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishTranscriptionRequest {
    return new PublishTranscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishTranscriptionRequest {
    return new PublishTranscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishTranscriptionRequest {
    return new PublishTranscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishTranscriptionRequest | PlainMessage<PublishTranscriptionRequest> | undefined, b: PublishTranscriptionRequest | PlainMessage<PublishTranscriptionRequest> | undefined): boolean {
    return proto3.util.equals(PublishTranscriptionRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishTranscriptionResponse
 */
export class PublishTranscriptionResponse extends Message<PublishTranscriptionResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<PublishTranscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishTranscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishTranscriptionResponse {
    return new PublishTranscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishTranscriptionResponse {
    return new PublishTranscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishTranscriptionResponse {
    return new PublishTranscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishTranscriptionResponse | PlainMessage<PublishTranscriptionResponse> | undefined, b: PublishTranscriptionResponse | PlainMessage<PublishTranscriptionResponse> | undefined): boolean {
    return proto3.util.equals(PublishTranscriptionResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishTranscriptionCallback
 */
export class PublishTranscriptionCallback extends Message<PublishTranscriptionCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<PublishTranscriptionCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishTranscriptionCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishTranscriptionCallback {
    return new PublishTranscriptionCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishTranscriptionCallback {
    return new PublishTranscriptionCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishTranscriptionCallback {
    return new PublishTranscriptionCallback().fromJsonString(jsonString, options);
  }

  static equals(a: PublishTranscriptionCallback | PlainMessage<PublishTranscriptionCallback> | undefined, b: PublishTranscriptionCallback | PlainMessage<PublishTranscriptionCallback> | undefined): boolean {
    return proto3.util.equals(PublishTranscriptionCallback, a, b);
  }
}

/**
 * Publish Sip DTMF messages to other participants
 *
 * @generated from message livekit.proto.PublishSipDtmfRequest
 */
export class PublishSipDtmfRequest extends Message<PublishSipDtmfRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: uint32 code = 2;
   */
  code = 0;

  /**
   * @generated from field: string digit = 3;
   */
  digit = "";

  /**
   * @generated from field: repeated string destination_identities = 4;
   */
  destinationIdentities: string[] = [];

  constructor(data?: PartialMessage<PublishSipDtmfRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishSipDtmfRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "digit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "destination_identities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishSipDtmfRequest {
    return new PublishSipDtmfRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishSipDtmfRequest {
    return new PublishSipDtmfRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishSipDtmfRequest {
    return new PublishSipDtmfRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishSipDtmfRequest | PlainMessage<PublishSipDtmfRequest> | undefined, b: PublishSipDtmfRequest | PlainMessage<PublishSipDtmfRequest> | undefined): boolean {
    return proto3.util.equals(PublishSipDtmfRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishSipDtmfResponse
 */
export class PublishSipDtmfResponse extends Message<PublishSipDtmfResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<PublishSipDtmfResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishSipDtmfResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishSipDtmfResponse {
    return new PublishSipDtmfResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishSipDtmfResponse {
    return new PublishSipDtmfResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishSipDtmfResponse {
    return new PublishSipDtmfResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishSipDtmfResponse | PlainMessage<PublishSipDtmfResponse> | undefined, b: PublishSipDtmfResponse | PlainMessage<PublishSipDtmfResponse> | undefined): boolean {
    return proto3.util.equals(PublishSipDtmfResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishSipDtmfCallback
 */
export class PublishSipDtmfCallback extends Message<PublishSipDtmfCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<PublishSipDtmfCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishSipDtmfCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishSipDtmfCallback {
    return new PublishSipDtmfCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishSipDtmfCallback {
    return new PublishSipDtmfCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishSipDtmfCallback {
    return new PublishSipDtmfCallback().fromJsonString(jsonString, options);
  }

  static equals(a: PublishSipDtmfCallback | PlainMessage<PublishSipDtmfCallback> | undefined, b: PublishSipDtmfCallback | PlainMessage<PublishSipDtmfCallback> | undefined): boolean {
    return proto3.util.equals(PublishSipDtmfCallback, a, b);
  }
}

/**
 * Change the local participant's metadata
 *
 * @generated from message livekit.proto.SetLocalMetadataRequest
 */
export class SetLocalMetadataRequest extends Message<SetLocalMetadataRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: string metadata = 2;
   */
  metadata = "";

  constructor(data?: PartialMessage<SetLocalMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetLocalMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLocalMetadataRequest {
    return new SetLocalMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLocalMetadataRequest {
    return new SetLocalMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLocalMetadataRequest {
    return new SetLocalMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetLocalMetadataRequest | PlainMessage<SetLocalMetadataRequest> | undefined, b: SetLocalMetadataRequest | PlainMessage<SetLocalMetadataRequest> | undefined): boolean {
    return proto3.util.equals(SetLocalMetadataRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetLocalMetadataResponse
 */
export class SetLocalMetadataResponse extends Message<SetLocalMetadataResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<SetLocalMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetLocalMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLocalMetadataResponse {
    return new SetLocalMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLocalMetadataResponse {
    return new SetLocalMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLocalMetadataResponse {
    return new SetLocalMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetLocalMetadataResponse | PlainMessage<SetLocalMetadataResponse> | undefined, b: SetLocalMetadataResponse | PlainMessage<SetLocalMetadataResponse> | undefined): boolean {
    return proto3.util.equals(SetLocalMetadataResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetLocalMetadataCallback
 */
export class SetLocalMetadataCallback extends Message<SetLocalMetadataCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<SetLocalMetadataCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetLocalMetadataCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLocalMetadataCallback {
    return new SetLocalMetadataCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLocalMetadataCallback {
    return new SetLocalMetadataCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLocalMetadataCallback {
    return new SetLocalMetadataCallback().fromJsonString(jsonString, options);
  }

  static equals(a: SetLocalMetadataCallback | PlainMessage<SetLocalMetadataCallback> | undefined, b: SetLocalMetadataCallback | PlainMessage<SetLocalMetadataCallback> | undefined): boolean {
    return proto3.util.equals(SetLocalMetadataCallback, a, b);
  }
}

/**
 * Change the local participant's attributes
 *
 * @generated from message livekit.proto.SetLocalAttributesRequest
 */
export class SetLocalAttributesRequest extends Message<SetLocalAttributesRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: map<string, string> attributes = 2;
   */
  attributes: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SetLocalAttributesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetLocalAttributesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLocalAttributesRequest {
    return new SetLocalAttributesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLocalAttributesRequest {
    return new SetLocalAttributesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLocalAttributesRequest {
    return new SetLocalAttributesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetLocalAttributesRequest | PlainMessage<SetLocalAttributesRequest> | undefined, b: SetLocalAttributesRequest | PlainMessage<SetLocalAttributesRequest> | undefined): boolean {
    return proto3.util.equals(SetLocalAttributesRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetLocalAttributesResponse
 */
export class SetLocalAttributesResponse extends Message<SetLocalAttributesResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<SetLocalAttributesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetLocalAttributesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLocalAttributesResponse {
    return new SetLocalAttributesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLocalAttributesResponse {
    return new SetLocalAttributesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLocalAttributesResponse {
    return new SetLocalAttributesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetLocalAttributesResponse | PlainMessage<SetLocalAttributesResponse> | undefined, b: SetLocalAttributesResponse | PlainMessage<SetLocalAttributesResponse> | undefined): boolean {
    return proto3.util.equals(SetLocalAttributesResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetLocalAttributesCallback
 */
export class SetLocalAttributesCallback extends Message<SetLocalAttributesCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<SetLocalAttributesCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetLocalAttributesCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLocalAttributesCallback {
    return new SetLocalAttributesCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLocalAttributesCallback {
    return new SetLocalAttributesCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLocalAttributesCallback {
    return new SetLocalAttributesCallback().fromJsonString(jsonString, options);
  }

  static equals(a: SetLocalAttributesCallback | PlainMessage<SetLocalAttributesCallback> | undefined, b: SetLocalAttributesCallback | PlainMessage<SetLocalAttributesCallback> | undefined): boolean {
    return proto3.util.equals(SetLocalAttributesCallback, a, b);
  }
}

/**
 * Change the local participant's name
 *
 * @generated from message livekit.proto.SetLocalNameRequest
 */
export class SetLocalNameRequest extends Message<SetLocalNameRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<SetLocalNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetLocalNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLocalNameRequest {
    return new SetLocalNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLocalNameRequest {
    return new SetLocalNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLocalNameRequest {
    return new SetLocalNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetLocalNameRequest | PlainMessage<SetLocalNameRequest> | undefined, b: SetLocalNameRequest | PlainMessage<SetLocalNameRequest> | undefined): boolean {
    return proto3.util.equals(SetLocalNameRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetLocalNameResponse
 */
export class SetLocalNameResponse extends Message<SetLocalNameResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<SetLocalNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetLocalNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLocalNameResponse {
    return new SetLocalNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLocalNameResponse {
    return new SetLocalNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLocalNameResponse {
    return new SetLocalNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetLocalNameResponse | PlainMessage<SetLocalNameResponse> | undefined, b: SetLocalNameResponse | PlainMessage<SetLocalNameResponse> | undefined): boolean {
    return proto3.util.equals(SetLocalNameResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetLocalNameCallback
 */
export class SetLocalNameCallback extends Message<SetLocalNameCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<SetLocalNameCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetLocalNameCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetLocalNameCallback {
    return new SetLocalNameCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetLocalNameCallback {
    return new SetLocalNameCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetLocalNameCallback {
    return new SetLocalNameCallback().fromJsonString(jsonString, options);
  }

  static equals(a: SetLocalNameCallback | PlainMessage<SetLocalNameCallback> | undefined, b: SetLocalNameCallback | PlainMessage<SetLocalNameCallback> | undefined): boolean {
    return proto3.util.equals(SetLocalNameCallback, a, b);
  }
}

/**
 * Change the "desire" to subs2ribe to a track
 *
 * @generated from message livekit.proto.SetSubscribedRequest
 */
export class SetSubscribedRequest extends Message<SetSubscribedRequest> {
  /**
   * @generated from field: bool subscribe = 1;
   */
  subscribe = false;

  /**
   * @generated from field: uint64 publication_handle = 2;
   */
  publicationHandle = protoInt64.zero;

  constructor(data?: PartialMessage<SetSubscribedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetSubscribedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscribe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "publication_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSubscribedRequest {
    return new SetSubscribedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSubscribedRequest {
    return new SetSubscribedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSubscribedRequest {
    return new SetSubscribedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetSubscribedRequest | PlainMessage<SetSubscribedRequest> | undefined, b: SetSubscribedRequest | PlainMessage<SetSubscribedRequest> | undefined): boolean {
    return proto3.util.equals(SetSubscribedRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.SetSubscribedResponse
 */
export class SetSubscribedResponse extends Message<SetSubscribedResponse> {
  constructor(data?: PartialMessage<SetSubscribedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SetSubscribedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSubscribedResponse {
    return new SetSubscribedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSubscribedResponse {
    return new SetSubscribedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSubscribedResponse {
    return new SetSubscribedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetSubscribedResponse | PlainMessage<SetSubscribedResponse> | undefined, b: SetSubscribedResponse | PlainMessage<SetSubscribedResponse> | undefined): boolean {
    return proto3.util.equals(SetSubscribedResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.GetSessionStatsRequest
 */
export class GetSessionStatsRequest extends Message<GetSessionStatsRequest> {
  /**
   * @generated from field: uint64 room_handle = 1;
   */
  roomHandle = protoInt64.zero;

  constructor(data?: PartialMessage<GetSessionStatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.GetSessionStatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSessionStatsRequest {
    return new GetSessionStatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSessionStatsRequest {
    return new GetSessionStatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSessionStatsRequest {
    return new GetSessionStatsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSessionStatsRequest | PlainMessage<GetSessionStatsRequest> | undefined, b: GetSessionStatsRequest | PlainMessage<GetSessionStatsRequest> | undefined): boolean {
    return proto3.util.equals(GetSessionStatsRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.GetSessionStatsResponse
 */
export class GetSessionStatsResponse extends Message<GetSessionStatsResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<GetSessionStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.GetSessionStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSessionStatsResponse {
    return new GetSessionStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSessionStatsResponse {
    return new GetSessionStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSessionStatsResponse {
    return new GetSessionStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSessionStatsResponse | PlainMessage<GetSessionStatsResponse> | undefined, b: GetSessionStatsResponse | PlainMessage<GetSessionStatsResponse> | undefined): boolean {
    return proto3.util.equals(GetSessionStatsResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.GetSessionStatsCallback
 */
export class GetSessionStatsCallback extends Message<GetSessionStatsCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  /**
   * @generated from field: repeated livekit.proto.RtcStats publisher_stats = 3;
   */
  publisherStats: RtcStats[] = [];

  /**
   * @generated from field: repeated livekit.proto.RtcStats subscriber_stats = 4;
   */
  subscriberStats: RtcStats[] = [];

  constructor(data?: PartialMessage<GetSessionStatsCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.GetSessionStatsCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "publisher_stats", kind: "message", T: RtcStats, repeated: true },
    { no: 4, name: "subscriber_stats", kind: "message", T: RtcStats, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSessionStatsCallback {
    return new GetSessionStatsCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSessionStatsCallback {
    return new GetSessionStatsCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSessionStatsCallback {
    return new GetSessionStatsCallback().fromJsonString(jsonString, options);
  }

  static equals(a: GetSessionStatsCallback | PlainMessage<GetSessionStatsCallback> | undefined, b: GetSessionStatsCallback | PlainMessage<GetSessionStatsCallback> | undefined): boolean {
    return proto3.util.equals(GetSessionStatsCallback, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoEncoding
 */
export class VideoEncoding extends Message<VideoEncoding> {
  /**
   * @generated from field: uint64 max_bitrate = 1;
   */
  maxBitrate = protoInt64.zero;

  /**
   * @generated from field: double max_framerate = 2;
   */
  maxFramerate = 0;

  constructor(data?: PartialMessage<VideoEncoding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoEncoding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_bitrate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "max_framerate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoEncoding {
    return new VideoEncoding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoEncoding {
    return new VideoEncoding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoEncoding {
    return new VideoEncoding().fromJsonString(jsonString, options);
  }

  static equals(a: VideoEncoding | PlainMessage<VideoEncoding> | undefined, b: VideoEncoding | PlainMessage<VideoEncoding> | undefined): boolean {
    return proto3.util.equals(VideoEncoding, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioEncoding
 */
export class AudioEncoding extends Message<AudioEncoding> {
  /**
   * @generated from field: uint64 max_bitrate = 1;
   */
  maxBitrate = protoInt64.zero;

  constructor(data?: PartialMessage<AudioEncoding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioEncoding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_bitrate", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioEncoding {
    return new AudioEncoding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioEncoding {
    return new AudioEncoding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioEncoding {
    return new AudioEncoding().fromJsonString(jsonString, options);
  }

  static equals(a: AudioEncoding | PlainMessage<AudioEncoding> | undefined, b: AudioEncoding | PlainMessage<AudioEncoding> | undefined): boolean {
    return proto3.util.equals(AudioEncoding, a, b);
  }
}

/**
 * @generated from message livekit.proto.TrackPublishOptions
 */
export class TrackPublishOptions extends Message<TrackPublishOptions> {
  /**
   * encodings are optional
   *
   * @generated from field: livekit.proto.VideoEncoding video_encoding = 1;
   */
  videoEncoding?: VideoEncoding;

  /**
   * @generated from field: livekit.proto.AudioEncoding audio_encoding = 2;
   */
  audioEncoding?: AudioEncoding;

  /**
   * @generated from field: livekit.proto.VideoCodec video_codec = 3;
   */
  videoCodec = VideoCodec.VP8;

  /**
   * @generated from field: bool dtx = 4;
   */
  dtx = false;

  /**
   * @generated from field: bool red = 5;
   */
  red = false;

  /**
   * @generated from field: bool simulcast = 6;
   */
  simulcast = false;

  /**
   * @generated from field: livekit.proto.TrackSource source = 7;
   */
  source = TrackSource.SOURCE_UNKNOWN;

  /**
   * @generated from field: string stream = 8;
   */
  stream = "";

  constructor(data?: PartialMessage<TrackPublishOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackPublishOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "video_encoding", kind: "message", T: VideoEncoding },
    { no: 2, name: "audio_encoding", kind: "message", T: AudioEncoding },
    { no: 3, name: "video_codec", kind: "enum", T: proto3.getEnumType(VideoCodec) },
    { no: 4, name: "dtx", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "red", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "simulcast", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "source", kind: "enum", T: proto3.getEnumType(TrackSource) },
    { no: 8, name: "stream", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackPublishOptions {
    return new TrackPublishOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackPublishOptions {
    return new TrackPublishOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackPublishOptions {
    return new TrackPublishOptions().fromJsonString(jsonString, options);
  }

  static equals(a: TrackPublishOptions | PlainMessage<TrackPublishOptions> | undefined, b: TrackPublishOptions | PlainMessage<TrackPublishOptions> | undefined): boolean {
    return proto3.util.equals(TrackPublishOptions, a, b);
  }
}

/**
 * @generated from message livekit.proto.IceServer
 */
export class IceServer extends Message<IceServer> {
  /**
   * @generated from field: repeated string urls = 1;
   */
  urls: string[] = [];

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string password = 3;
   */
  password = "";

  constructor(data?: PartialMessage<IceServer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.IceServer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "urls", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IceServer {
    return new IceServer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IceServer {
    return new IceServer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IceServer {
    return new IceServer().fromJsonString(jsonString, options);
  }

  static equals(a: IceServer | PlainMessage<IceServer> | undefined, b: IceServer | PlainMessage<IceServer> | undefined): boolean {
    return proto3.util.equals(IceServer, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcConfig
 */
export class RtcConfig extends Message<RtcConfig> {
  /**
   * @generated from field: optional livekit.proto.IceTransportType ice_transport_type = 1;
   */
  iceTransportType?: IceTransportType;

  /**
   * @generated from field: optional livekit.proto.ContinualGatheringPolicy continual_gathering_policy = 2;
   */
  continualGatheringPolicy?: ContinualGatheringPolicy;

  /**
   * empty fallback to default
   *
   * @generated from field: repeated livekit.proto.IceServer ice_servers = 3;
   */
  iceServers: IceServer[] = [];

  constructor(data?: PartialMessage<RtcConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ice_transport_type", kind: "enum", T: proto3.getEnumType(IceTransportType), opt: true },
    { no: 2, name: "continual_gathering_policy", kind: "enum", T: proto3.getEnumType(ContinualGatheringPolicy), opt: true },
    { no: 3, name: "ice_servers", kind: "message", T: IceServer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcConfig {
    return new RtcConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcConfig {
    return new RtcConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcConfig {
    return new RtcConfig().fromJsonString(jsonString, options);
  }

  static equals(a: RtcConfig | PlainMessage<RtcConfig> | undefined, b: RtcConfig | PlainMessage<RtcConfig> | undefined): boolean {
    return proto3.util.equals(RtcConfig, a, b);
  }
}

/**
 * @generated from message livekit.proto.RoomOptions
 */
export class RoomOptions extends Message<RoomOptions> {
  /**
   * @generated from field: bool auto_subscribe = 1;
   */
  autoSubscribe = false;

  /**
   * @generated from field: bool adaptive_stream = 2;
   */
  adaptiveStream = false;

  /**
   * @generated from field: bool dynacast = 3;
   */
  dynacast = false;

  /**
   * @generated from field: optional livekit.proto.E2eeOptions e2ee = 4;
   */
  e2ee?: E2eeOptions;

  /**
   * allow to setup a custom RtcConfiguration
   *
   * @generated from field: optional livekit.proto.RtcConfig rtc_config = 5;
   */
  rtcConfig?: RtcConfig;

  /**
   * @generated from field: uint32 join_retries = 6;
   */
  joinRetries = 0;

  constructor(data?: PartialMessage<RoomOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RoomOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auto_subscribe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "adaptive_stream", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "dynacast", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "e2ee", kind: "message", T: E2eeOptions, opt: true },
    { no: 5, name: "rtc_config", kind: "message", T: RtcConfig, opt: true },
    { no: 6, name: "join_retries", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomOptions {
    return new RoomOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomOptions {
    return new RoomOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomOptions {
    return new RoomOptions().fromJsonString(jsonString, options);
  }

  static equals(a: RoomOptions | PlainMessage<RoomOptions> | undefined, b: RoomOptions | PlainMessage<RoomOptions> | undefined): boolean {
    return proto3.util.equals(RoomOptions, a, b);
  }
}

/**
 * @generated from message livekit.proto.TranscriptionSegment
 */
export class TranscriptionSegment extends Message<TranscriptionSegment> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  /**
   * @generated from field: uint64 start_time = 3;
   */
  startTime = protoInt64.zero;

  /**
   * @generated from field: uint64 end_time = 4;
   */
  endTime = protoInt64.zero;

  /**
   * @generated from field: bool final = 5;
   */
  final = false;

  /**
   * @generated from field: string language = 6;
   */
  language = "";

  constructor(data?: PartialMessage<TranscriptionSegment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TranscriptionSegment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "end_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "final", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TranscriptionSegment {
    return new TranscriptionSegment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TranscriptionSegment {
    return new TranscriptionSegment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TranscriptionSegment {
    return new TranscriptionSegment().fromJsonString(jsonString, options);
  }

  static equals(a: TranscriptionSegment | PlainMessage<TranscriptionSegment> | undefined, b: TranscriptionSegment | PlainMessage<TranscriptionSegment> | undefined): boolean {
    return proto3.util.equals(TranscriptionSegment, a, b);
  }
}

/**
 * @generated from message livekit.proto.BufferInfo
 */
export class BufferInfo extends Message<BufferInfo> {
  /**
   * @generated from field: uint64 data_ptr = 1;
   */
  dataPtr = protoInt64.zero;

  /**
   * @generated from field: uint64 data_len = 2;
   */
  dataLen = protoInt64.zero;

  constructor(data?: PartialMessage<BufferInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.BufferInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "data_len", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BufferInfo {
    return new BufferInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BufferInfo {
    return new BufferInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BufferInfo {
    return new BufferInfo().fromJsonString(jsonString, options);
  }

  static equals(a: BufferInfo | PlainMessage<BufferInfo> | undefined, b: BufferInfo | PlainMessage<BufferInfo> | undefined): boolean {
    return proto3.util.equals(BufferInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedBuffer
 */
export class OwnedBuffer extends Message<OwnedBuffer> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.BufferInfo data = 2;
   */
  data?: BufferInfo;

  constructor(data?: PartialMessage<OwnedBuffer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedBuffer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "data", kind: "message", T: BufferInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedBuffer {
    return new OwnedBuffer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedBuffer {
    return new OwnedBuffer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedBuffer {
    return new OwnedBuffer().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedBuffer | PlainMessage<OwnedBuffer> | undefined, b: OwnedBuffer | PlainMessage<OwnedBuffer> | undefined): boolean {
    return proto3.util.equals(OwnedBuffer, a, b);
  }
}

/**
 * @generated from message livekit.proto.RoomEvent
 */
export class RoomEvent extends Message<RoomEvent> {
  /**
   * @generated from field: uint64 room_handle = 1;
   */
  roomHandle = protoInt64.zero;

  /**
   * @generated from oneof livekit.proto.RoomEvent.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.ParticipantConnected participant_connected = 2;
     */
    value: ParticipantConnected;
    case: "participantConnected";
  } | {
    /**
     * @generated from field: livekit.proto.ParticipantDisconnected participant_disconnected = 3;
     */
    value: ParticipantDisconnected;
    case: "participantDisconnected";
  } | {
    /**
     * @generated from field: livekit.proto.LocalTrackPublished local_track_published = 4;
     */
    value: LocalTrackPublished;
    case: "localTrackPublished";
  } | {
    /**
     * @generated from field: livekit.proto.LocalTrackUnpublished local_track_unpublished = 5;
     */
    value: LocalTrackUnpublished;
    case: "localTrackUnpublished";
  } | {
    /**
     * @generated from field: livekit.proto.LocalTrackSubscribed local_track_subscribed = 6;
     */
    value: LocalTrackSubscribed;
    case: "localTrackSubscribed";
  } | {
    /**
     * @generated from field: livekit.proto.TrackPublished track_published = 7;
     */
    value: TrackPublished;
    case: "trackPublished";
  } | {
    /**
     * @generated from field: livekit.proto.TrackUnpublished track_unpublished = 8;
     */
    value: TrackUnpublished;
    case: "trackUnpublished";
  } | {
    /**
     * @generated from field: livekit.proto.TrackSubscribed track_subscribed = 9;
     */
    value: TrackSubscribed;
    case: "trackSubscribed";
  } | {
    /**
     * @generated from field: livekit.proto.TrackUnsubscribed track_unsubscribed = 10;
     */
    value: TrackUnsubscribed;
    case: "trackUnsubscribed";
  } | {
    /**
     * @generated from field: livekit.proto.TrackSubscriptionFailed track_subscription_failed = 11;
     */
    value: TrackSubscriptionFailed;
    case: "trackSubscriptionFailed";
  } | {
    /**
     * @generated from field: livekit.proto.TrackMuted track_muted = 12;
     */
    value: TrackMuted;
    case: "trackMuted";
  } | {
    /**
     * @generated from field: livekit.proto.TrackUnmuted track_unmuted = 13;
     */
    value: TrackUnmuted;
    case: "trackUnmuted";
  } | {
    /**
     * @generated from field: livekit.proto.ActiveSpeakersChanged active_speakers_changed = 14;
     */
    value: ActiveSpeakersChanged;
    case: "activeSpeakersChanged";
  } | {
    /**
     * @generated from field: livekit.proto.RoomMetadataChanged room_metadata_changed = 15;
     */
    value: RoomMetadataChanged;
    case: "roomMetadataChanged";
  } | {
    /**
     * @generated from field: livekit.proto.RoomSidChanged room_sid_changed = 16;
     */
    value: RoomSidChanged;
    case: "roomSidChanged";
  } | {
    /**
     * @generated from field: livekit.proto.ParticipantMetadataChanged participant_metadata_changed = 17;
     */
    value: ParticipantMetadataChanged;
    case: "participantMetadataChanged";
  } | {
    /**
     * @generated from field: livekit.proto.ParticipantNameChanged participant_name_changed = 18;
     */
    value: ParticipantNameChanged;
    case: "participantNameChanged";
  } | {
    /**
     * @generated from field: livekit.proto.ParticipantAttributesChanged participant_attributes_changed = 19;
     */
    value: ParticipantAttributesChanged;
    case: "participantAttributesChanged";
  } | {
    /**
     * @generated from field: livekit.proto.ConnectionQualityChanged connection_quality_changed = 20;
     */
    value: ConnectionQualityChanged;
    case: "connectionQualityChanged";
  } | {
    /**
     * @generated from field: livekit.proto.ConnectionStateChanged connection_state_changed = 21;
     */
    value: ConnectionStateChanged;
    case: "connectionStateChanged";
  } | {
    /**
     * Connected connected = 21;
     *
     * @generated from field: livekit.proto.Disconnected disconnected = 22;
     */
    value: Disconnected;
    case: "disconnected";
  } | {
    /**
     * @generated from field: livekit.proto.Reconnecting reconnecting = 23;
     */
    value: Reconnecting;
    case: "reconnecting";
  } | {
    /**
     * @generated from field: livekit.proto.Reconnected reconnected = 24;
     */
    value: Reconnected;
    case: "reconnected";
  } | {
    /**
     * @generated from field: livekit.proto.E2eeStateChanged e2ee_state_changed = 25;
     */
    value: E2eeStateChanged;
    case: "e2eeStateChanged";
  } | {
    /**
     * The stream of room events has ended
     *
     * @generated from field: livekit.proto.RoomEOS eos = 26;
     */
    value: RoomEOS;
    case: "eos";
  } | {
    /**
     * @generated from field: livekit.proto.DataPacketReceived data_packet_received = 27;
     */
    value: DataPacketReceived;
    case: "dataPacketReceived";
  } | {
    /**
     * @generated from field: livekit.proto.TranscriptionReceived transcription_received = 28;
     */
    value: TranscriptionReceived;
    case: "transcriptionReceived";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RoomEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RoomEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "participant_connected", kind: "message", T: ParticipantConnected, oneof: "message" },
    { no: 3, name: "participant_disconnected", kind: "message", T: ParticipantDisconnected, oneof: "message" },
    { no: 4, name: "local_track_published", kind: "message", T: LocalTrackPublished, oneof: "message" },
    { no: 5, name: "local_track_unpublished", kind: "message", T: LocalTrackUnpublished, oneof: "message" },
    { no: 6, name: "local_track_subscribed", kind: "message", T: LocalTrackSubscribed, oneof: "message" },
    { no: 7, name: "track_published", kind: "message", T: TrackPublished, oneof: "message" },
    { no: 8, name: "track_unpublished", kind: "message", T: TrackUnpublished, oneof: "message" },
    { no: 9, name: "track_subscribed", kind: "message", T: TrackSubscribed, oneof: "message" },
    { no: 10, name: "track_unsubscribed", kind: "message", T: TrackUnsubscribed, oneof: "message" },
    { no: 11, name: "track_subscription_failed", kind: "message", T: TrackSubscriptionFailed, oneof: "message" },
    { no: 12, name: "track_muted", kind: "message", T: TrackMuted, oneof: "message" },
    { no: 13, name: "track_unmuted", kind: "message", T: TrackUnmuted, oneof: "message" },
    { no: 14, name: "active_speakers_changed", kind: "message", T: ActiveSpeakersChanged, oneof: "message" },
    { no: 15, name: "room_metadata_changed", kind: "message", T: RoomMetadataChanged, oneof: "message" },
    { no: 16, name: "room_sid_changed", kind: "message", T: RoomSidChanged, oneof: "message" },
    { no: 17, name: "participant_metadata_changed", kind: "message", T: ParticipantMetadataChanged, oneof: "message" },
    { no: 18, name: "participant_name_changed", kind: "message", T: ParticipantNameChanged, oneof: "message" },
    { no: 19, name: "participant_attributes_changed", kind: "message", T: ParticipantAttributesChanged, oneof: "message" },
    { no: 20, name: "connection_quality_changed", kind: "message", T: ConnectionQualityChanged, oneof: "message" },
    { no: 21, name: "connection_state_changed", kind: "message", T: ConnectionStateChanged, oneof: "message" },
    { no: 22, name: "disconnected", kind: "message", T: Disconnected, oneof: "message" },
    { no: 23, name: "reconnecting", kind: "message", T: Reconnecting, oneof: "message" },
    { no: 24, name: "reconnected", kind: "message", T: Reconnected, oneof: "message" },
    { no: 25, name: "e2ee_state_changed", kind: "message", T: E2eeStateChanged, oneof: "message" },
    { no: 26, name: "eos", kind: "message", T: RoomEOS, oneof: "message" },
    { no: 27, name: "data_packet_received", kind: "message", T: DataPacketReceived, oneof: "message" },
    { no: 28, name: "transcription_received", kind: "message", T: TranscriptionReceived, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomEvent {
    return new RoomEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomEvent {
    return new RoomEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomEvent {
    return new RoomEvent().fromJsonString(jsonString, options);
  }

  static equals(a: RoomEvent | PlainMessage<RoomEvent> | undefined, b: RoomEvent | PlainMessage<RoomEvent> | undefined): boolean {
    return proto3.util.equals(RoomEvent, a, b);
  }
}

/**
 * @generated from message livekit.proto.RoomInfo
 */
export class RoomInfo extends Message<RoomInfo> {
  /**
   * @generated from field: optional string sid = 1;
   */
  sid?: string;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string metadata = 3;
   */
  metadata = "";

  constructor(data?: PartialMessage<RoomInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RoomInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomInfo {
    return new RoomInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomInfo {
    return new RoomInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomInfo {
    return new RoomInfo().fromJsonString(jsonString, options);
  }

  static equals(a: RoomInfo | PlainMessage<RoomInfo> | undefined, b: RoomInfo | PlainMessage<RoomInfo> | undefined): boolean {
    return proto3.util.equals(RoomInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedRoom
 */
export class OwnedRoom extends Message<OwnedRoom> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.RoomInfo info = 2;
   */
  info?: RoomInfo;

  constructor(data?: PartialMessage<OwnedRoom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedRoom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: RoomInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedRoom {
    return new OwnedRoom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedRoom {
    return new OwnedRoom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedRoom {
    return new OwnedRoom().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedRoom | PlainMessage<OwnedRoom> | undefined, b: OwnedRoom | PlainMessage<OwnedRoom> | undefined): boolean {
    return proto3.util.equals(OwnedRoom, a, b);
  }
}

/**
 * @generated from message livekit.proto.ParticipantConnected
 */
export class ParticipantConnected extends Message<ParticipantConnected> {
  /**
   * @generated from field: livekit.proto.OwnedParticipant info = 1;
   */
  info?: OwnedParticipant;

  constructor(data?: PartialMessage<ParticipantConnected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ParticipantConnected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: OwnedParticipant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantConnected {
    return new ParticipantConnected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantConnected {
    return new ParticipantConnected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantConnected {
    return new ParticipantConnected().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantConnected | PlainMessage<ParticipantConnected> | undefined, b: ParticipantConnected | PlainMessage<ParticipantConnected> | undefined): boolean {
    return proto3.util.equals(ParticipantConnected, a, b);
  }
}

/**
 * @generated from message livekit.proto.ParticipantDisconnected
 */
export class ParticipantDisconnected extends Message<ParticipantDisconnected> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  constructor(data?: PartialMessage<ParticipantDisconnected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ParticipantDisconnected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantDisconnected {
    return new ParticipantDisconnected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantDisconnected {
    return new ParticipantDisconnected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantDisconnected {
    return new ParticipantDisconnected().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantDisconnected | PlainMessage<ParticipantDisconnected> | undefined, b: ParticipantDisconnected | PlainMessage<ParticipantDisconnected> | undefined): boolean {
    return proto3.util.equals(ParticipantDisconnected, a, b);
  }
}

/**
 * @generated from message livekit.proto.LocalTrackPublished
 */
export class LocalTrackPublished extends Message<LocalTrackPublished> {
  /**
   * The TrackPublicationInfo comes from the PublishTrack response
   * and the FfiClient musts wait for it before firing this event
   *
   * @generated from field: string track_sid = 1;
   */
  trackSid = "";

  constructor(data?: PartialMessage<LocalTrackPublished>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.LocalTrackPublished";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocalTrackPublished {
    return new LocalTrackPublished().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocalTrackPublished {
    return new LocalTrackPublished().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocalTrackPublished {
    return new LocalTrackPublished().fromJsonString(jsonString, options);
  }

  static equals(a: LocalTrackPublished | PlainMessage<LocalTrackPublished> | undefined, b: LocalTrackPublished | PlainMessage<LocalTrackPublished> | undefined): boolean {
    return proto3.util.equals(LocalTrackPublished, a, b);
  }
}

/**
 * @generated from message livekit.proto.LocalTrackUnpublished
 */
export class LocalTrackUnpublished extends Message<LocalTrackUnpublished> {
  /**
   * @generated from field: string publication_sid = 1;
   */
  publicationSid = "";

  constructor(data?: PartialMessage<LocalTrackUnpublished>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.LocalTrackUnpublished";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "publication_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocalTrackUnpublished {
    return new LocalTrackUnpublished().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocalTrackUnpublished {
    return new LocalTrackUnpublished().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocalTrackUnpublished {
    return new LocalTrackUnpublished().fromJsonString(jsonString, options);
  }

  static equals(a: LocalTrackUnpublished | PlainMessage<LocalTrackUnpublished> | undefined, b: LocalTrackUnpublished | PlainMessage<LocalTrackUnpublished> | undefined): boolean {
    return proto3.util.equals(LocalTrackUnpublished, a, b);
  }
}

/**
 * @generated from message livekit.proto.LocalTrackSubscribed
 */
export class LocalTrackSubscribed extends Message<LocalTrackSubscribed> {
  /**
   * @generated from field: string track_sid = 2;
   */
  trackSid = "";

  constructor(data?: PartialMessage<LocalTrackSubscribed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.LocalTrackSubscribed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocalTrackSubscribed {
    return new LocalTrackSubscribed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocalTrackSubscribed {
    return new LocalTrackSubscribed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocalTrackSubscribed {
    return new LocalTrackSubscribed().fromJsonString(jsonString, options);
  }

  static equals(a: LocalTrackSubscribed | PlainMessage<LocalTrackSubscribed> | undefined, b: LocalTrackSubscribed | PlainMessage<LocalTrackSubscribed> | undefined): boolean {
    return proto3.util.equals(LocalTrackSubscribed, a, b);
  }
}

/**
 * @generated from message livekit.proto.TrackPublished
 */
export class TrackPublished extends Message<TrackPublished> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: livekit.proto.OwnedTrackPublication publication = 2;
   */
  publication?: OwnedTrackPublication;

  constructor(data?: PartialMessage<TrackPublished>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackPublished";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "publication", kind: "message", T: OwnedTrackPublication },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackPublished {
    return new TrackPublished().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackPublished {
    return new TrackPublished().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackPublished {
    return new TrackPublished().fromJsonString(jsonString, options);
  }

  static equals(a: TrackPublished | PlainMessage<TrackPublished> | undefined, b: TrackPublished | PlainMessage<TrackPublished> | undefined): boolean {
    return proto3.util.equals(TrackPublished, a, b);
  }
}

/**
 * @generated from message livekit.proto.TrackUnpublished
 */
export class TrackUnpublished extends Message<TrackUnpublished> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: string publication_sid = 2;
   */
  publicationSid = "";

  constructor(data?: PartialMessage<TrackUnpublished>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackUnpublished";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "publication_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackUnpublished {
    return new TrackUnpublished().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackUnpublished {
    return new TrackUnpublished().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackUnpublished {
    return new TrackUnpublished().fromJsonString(jsonString, options);
  }

  static equals(a: TrackUnpublished | PlainMessage<TrackUnpublished> | undefined, b: TrackUnpublished | PlainMessage<TrackUnpublished> | undefined): boolean {
    return proto3.util.equals(TrackUnpublished, a, b);
  }
}

/**
 * Publication isn't needed for subscription events on the FFI
 * The FFI will retrieve the publication using the Track sid
 *
 * @generated from message livekit.proto.TrackSubscribed
 */
export class TrackSubscribed extends Message<TrackSubscribed> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: livekit.proto.OwnedTrack track = 2;
   */
  track?: OwnedTrack;

  constructor(data?: PartialMessage<TrackSubscribed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackSubscribed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track", kind: "message", T: OwnedTrack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackSubscribed {
    return new TrackSubscribed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackSubscribed {
    return new TrackSubscribed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackSubscribed {
    return new TrackSubscribed().fromJsonString(jsonString, options);
  }

  static equals(a: TrackSubscribed | PlainMessage<TrackSubscribed> | undefined, b: TrackSubscribed | PlainMessage<TrackSubscribed> | undefined): boolean {
    return proto3.util.equals(TrackSubscribed, a, b);
  }
}

/**
 * @generated from message livekit.proto.TrackUnsubscribed
 */
export class TrackUnsubscribed extends Message<TrackUnsubscribed> {
  /**
   * The FFI language can dispose/remove the VideoSink here
   *
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: string track_sid = 2;
   */
  trackSid = "";

  constructor(data?: PartialMessage<TrackUnsubscribed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackUnsubscribed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackUnsubscribed {
    return new TrackUnsubscribed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackUnsubscribed {
    return new TrackUnsubscribed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackUnsubscribed {
    return new TrackUnsubscribed().fromJsonString(jsonString, options);
  }

  static equals(a: TrackUnsubscribed | PlainMessage<TrackUnsubscribed> | undefined, b: TrackUnsubscribed | PlainMessage<TrackUnsubscribed> | undefined): boolean {
    return proto3.util.equals(TrackUnsubscribed, a, b);
  }
}

/**
 * @generated from message livekit.proto.TrackSubscriptionFailed
 */
export class TrackSubscriptionFailed extends Message<TrackSubscriptionFailed> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: string track_sid = 2;
   */
  trackSid = "";

  /**
   * @generated from field: string error = 3;
   */
  error = "";

  constructor(data?: PartialMessage<TrackSubscriptionFailed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackSubscriptionFailed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackSubscriptionFailed {
    return new TrackSubscriptionFailed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackSubscriptionFailed {
    return new TrackSubscriptionFailed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackSubscriptionFailed {
    return new TrackSubscriptionFailed().fromJsonString(jsonString, options);
  }

  static equals(a: TrackSubscriptionFailed | PlainMessage<TrackSubscriptionFailed> | undefined, b: TrackSubscriptionFailed | PlainMessage<TrackSubscriptionFailed> | undefined): boolean {
    return proto3.util.equals(TrackSubscriptionFailed, a, b);
  }
}

/**
 * @generated from message livekit.proto.TrackMuted
 */
export class TrackMuted extends Message<TrackMuted> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: string track_sid = 2;
   */
  trackSid = "";

  constructor(data?: PartialMessage<TrackMuted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackMuted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackMuted {
    return new TrackMuted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackMuted {
    return new TrackMuted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackMuted {
    return new TrackMuted().fromJsonString(jsonString, options);
  }

  static equals(a: TrackMuted | PlainMessage<TrackMuted> | undefined, b: TrackMuted | PlainMessage<TrackMuted> | undefined): boolean {
    return proto3.util.equals(TrackMuted, a, b);
  }
}

/**
 * @generated from message livekit.proto.TrackUnmuted
 */
export class TrackUnmuted extends Message<TrackUnmuted> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: string track_sid = 2;
   */
  trackSid = "";

  constructor(data?: PartialMessage<TrackUnmuted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackUnmuted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackUnmuted {
    return new TrackUnmuted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackUnmuted {
    return new TrackUnmuted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackUnmuted {
    return new TrackUnmuted().fromJsonString(jsonString, options);
  }

  static equals(a: TrackUnmuted | PlainMessage<TrackUnmuted> | undefined, b: TrackUnmuted | PlainMessage<TrackUnmuted> | undefined): boolean {
    return proto3.util.equals(TrackUnmuted, a, b);
  }
}

/**
 * @generated from message livekit.proto.E2eeStateChanged
 */
export class E2eeStateChanged extends Message<E2eeStateChanged> {
  /**
   * Using sid instead of identity for ffi communication
   *
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: livekit.proto.EncryptionState state = 2;
   */
  state = EncryptionState.NEW;

  constructor(data?: PartialMessage<E2eeStateChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.E2eeStateChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "enum", T: proto3.getEnumType(EncryptionState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): E2eeStateChanged {
    return new E2eeStateChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): E2eeStateChanged {
    return new E2eeStateChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): E2eeStateChanged {
    return new E2eeStateChanged().fromJsonString(jsonString, options);
  }

  static equals(a: E2eeStateChanged | PlainMessage<E2eeStateChanged> | undefined, b: E2eeStateChanged | PlainMessage<E2eeStateChanged> | undefined): boolean {
    return proto3.util.equals(E2eeStateChanged, a, b);
  }
}

/**
 * @generated from message livekit.proto.ActiveSpeakersChanged
 */
export class ActiveSpeakersChanged extends Message<ActiveSpeakersChanged> {
  /**
   * @generated from field: repeated string participant_identities = 1;
   */
  participantIdentities: string[] = [];

  constructor(data?: PartialMessage<ActiveSpeakersChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ActiveSpeakersChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveSpeakersChanged {
    return new ActiveSpeakersChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveSpeakersChanged {
    return new ActiveSpeakersChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveSpeakersChanged {
    return new ActiveSpeakersChanged().fromJsonString(jsonString, options);
  }

  static equals(a: ActiveSpeakersChanged | PlainMessage<ActiveSpeakersChanged> | undefined, b: ActiveSpeakersChanged | PlainMessage<ActiveSpeakersChanged> | undefined): boolean {
    return proto3.util.equals(ActiveSpeakersChanged, a, b);
  }
}

/**
 * @generated from message livekit.proto.RoomMetadataChanged
 */
export class RoomMetadataChanged extends Message<RoomMetadataChanged> {
  /**
   * @generated from field: string metadata = 1;
   */
  metadata = "";

  constructor(data?: PartialMessage<RoomMetadataChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RoomMetadataChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomMetadataChanged {
    return new RoomMetadataChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomMetadataChanged {
    return new RoomMetadataChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomMetadataChanged {
    return new RoomMetadataChanged().fromJsonString(jsonString, options);
  }

  static equals(a: RoomMetadataChanged | PlainMessage<RoomMetadataChanged> | undefined, b: RoomMetadataChanged | PlainMessage<RoomMetadataChanged> | undefined): boolean {
    return proto3.util.equals(RoomMetadataChanged, a, b);
  }
}

/**
 * @generated from message livekit.proto.RoomSidChanged
 */
export class RoomSidChanged extends Message<RoomSidChanged> {
  /**
   * @generated from field: string sid = 1;
   */
  sid = "";

  constructor(data?: PartialMessage<RoomSidChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RoomSidChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomSidChanged {
    return new RoomSidChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomSidChanged {
    return new RoomSidChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomSidChanged {
    return new RoomSidChanged().fromJsonString(jsonString, options);
  }

  static equals(a: RoomSidChanged | PlainMessage<RoomSidChanged> | undefined, b: RoomSidChanged | PlainMessage<RoomSidChanged> | undefined): boolean {
    return proto3.util.equals(RoomSidChanged, a, b);
  }
}

/**
 * @generated from message livekit.proto.ParticipantMetadataChanged
 */
export class ParticipantMetadataChanged extends Message<ParticipantMetadataChanged> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: string metadata = 2;
   */
  metadata = "";

  constructor(data?: PartialMessage<ParticipantMetadataChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ParticipantMetadataChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantMetadataChanged {
    return new ParticipantMetadataChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantMetadataChanged {
    return new ParticipantMetadataChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantMetadataChanged {
    return new ParticipantMetadataChanged().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantMetadataChanged | PlainMessage<ParticipantMetadataChanged> | undefined, b: ParticipantMetadataChanged | PlainMessage<ParticipantMetadataChanged> | undefined): boolean {
    return proto3.util.equals(ParticipantMetadataChanged, a, b);
  }
}

/**
 * @generated from message livekit.proto.ParticipantAttributesChanged
 */
export class ParticipantAttributesChanged extends Message<ParticipantAttributesChanged> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: map<string, string> attributes = 2;
   */
  attributes: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> changed_attributes = 3;
   */
  changedAttributes: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ParticipantAttributesChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ParticipantAttributesChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "changed_attributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantAttributesChanged {
    return new ParticipantAttributesChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantAttributesChanged {
    return new ParticipantAttributesChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantAttributesChanged {
    return new ParticipantAttributesChanged().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantAttributesChanged | PlainMessage<ParticipantAttributesChanged> | undefined, b: ParticipantAttributesChanged | PlainMessage<ParticipantAttributesChanged> | undefined): boolean {
    return proto3.util.equals(ParticipantAttributesChanged, a, b);
  }
}

/**
 * @generated from message livekit.proto.ParticipantNameChanged
 */
export class ParticipantNameChanged extends Message<ParticipantNameChanged> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ParticipantNameChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ParticipantNameChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantNameChanged {
    return new ParticipantNameChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantNameChanged {
    return new ParticipantNameChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantNameChanged {
    return new ParticipantNameChanged().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantNameChanged | PlainMessage<ParticipantNameChanged> | undefined, b: ParticipantNameChanged | PlainMessage<ParticipantNameChanged> | undefined): boolean {
    return proto3.util.equals(ParticipantNameChanged, a, b);
  }
}

/**
 * @generated from message livekit.proto.ConnectionQualityChanged
 */
export class ConnectionQualityChanged extends Message<ConnectionQualityChanged> {
  /**
   * @generated from field: string participant_identity = 1;
   */
  participantIdentity = "";

  /**
   * @generated from field: livekit.proto.ConnectionQuality quality = 2;
   */
  quality = ConnectionQuality.QUALITY_POOR;

  constructor(data?: PartialMessage<ConnectionQualityChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ConnectionQualityChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quality", kind: "enum", T: proto3.getEnumType(ConnectionQuality) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionQualityChanged {
    return new ConnectionQualityChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionQualityChanged {
    return new ConnectionQualityChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionQualityChanged {
    return new ConnectionQualityChanged().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionQualityChanged | PlainMessage<ConnectionQualityChanged> | undefined, b: ConnectionQualityChanged | PlainMessage<ConnectionQualityChanged> | undefined): boolean {
    return proto3.util.equals(ConnectionQualityChanged, a, b);
  }
}

/**
 * @generated from message livekit.proto.UserPacket
 */
export class UserPacket extends Message<UserPacket> {
  /**
   * @generated from field: livekit.proto.OwnedBuffer data = 1;
   */
  data?: OwnedBuffer;

  /**
   * @generated from field: optional string topic = 2;
   */
  topic?: string;

  constructor(data?: PartialMessage<UserPacket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.UserPacket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: OwnedBuffer },
    { no: 2, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserPacket {
    return new UserPacket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserPacket {
    return new UserPacket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserPacket {
    return new UserPacket().fromJsonString(jsonString, options);
  }

  static equals(a: UserPacket | PlainMessage<UserPacket> | undefined, b: UserPacket | PlainMessage<UserPacket> | undefined): boolean {
    return proto3.util.equals(UserPacket, a, b);
  }
}

/**
 * @generated from message livekit.proto.SipDTMF
 */
export class SipDTMF extends Message<SipDTMF> {
  /**
   * @generated from field: uint32 code = 1;
   */
  code = 0;

  /**
   * @generated from field: optional string digit = 2;
   */
  digit?: string;

  constructor(data?: PartialMessage<SipDTMF>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SipDTMF";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "digit", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SipDTMF {
    return new SipDTMF().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SipDTMF {
    return new SipDTMF().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SipDTMF {
    return new SipDTMF().fromJsonString(jsonString, options);
  }

  static equals(a: SipDTMF | PlainMessage<SipDTMF> | undefined, b: SipDTMF | PlainMessage<SipDTMF> | undefined): boolean {
    return proto3.util.equals(SipDTMF, a, b);
  }
}

/**
 * @generated from message livekit.proto.DataPacketReceived
 */
export class DataPacketReceived extends Message<DataPacketReceived> {
  /**
   * @generated from field: livekit.proto.DataPacketKind kind = 1;
   */
  kind = DataPacketKind.KIND_LOSSY;

  /**
   * Can be empty if the data is sent a server SDK
   *
   * @generated from field: string participant_identity = 2;
   */
  participantIdentity = "";

  /**
   * @generated from oneof livekit.proto.DataPacketReceived.value
   */
  value: {
    /**
     * @generated from field: livekit.proto.UserPacket user = 4;
     */
    value: UserPacket;
    case: "user";
  } | {
    /**
     * @generated from field: livekit.proto.SipDTMF sip_dtmf = 5;
     */
    value: SipDTMF;
    case: "sipDtmf";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DataPacketReceived>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.DataPacketReceived";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(DataPacketKind) },
    { no: 2, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user", kind: "message", T: UserPacket, oneof: "value" },
    { no: 5, name: "sip_dtmf", kind: "message", T: SipDTMF, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataPacketReceived {
    return new DataPacketReceived().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataPacketReceived {
    return new DataPacketReceived().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataPacketReceived {
    return new DataPacketReceived().fromJsonString(jsonString, options);
  }

  static equals(a: DataPacketReceived | PlainMessage<DataPacketReceived> | undefined, b: DataPacketReceived | PlainMessage<DataPacketReceived> | undefined): boolean {
    return proto3.util.equals(DataPacketReceived, a, b);
  }
}

/**
 * @generated from message livekit.proto.TranscriptionReceived
 */
export class TranscriptionReceived extends Message<TranscriptionReceived> {
  /**
   * @generated from field: optional string participant_identity = 1;
   */
  participantIdentity?: string;

  /**
   * @generated from field: optional string track_sid = 2;
   */
  trackSid?: string;

  /**
   * @generated from field: repeated livekit.proto.TranscriptionSegment segments = 3;
   */
  segments: TranscriptionSegment[] = [];

  constructor(data?: PartialMessage<TranscriptionReceived>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TranscriptionReceived";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_identity", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "track_sid", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "segments", kind: "message", T: TranscriptionSegment, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TranscriptionReceived {
    return new TranscriptionReceived().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TranscriptionReceived {
    return new TranscriptionReceived().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TranscriptionReceived {
    return new TranscriptionReceived().fromJsonString(jsonString, options);
  }

  static equals(a: TranscriptionReceived | PlainMessage<TranscriptionReceived> | undefined, b: TranscriptionReceived | PlainMessage<TranscriptionReceived> | undefined): boolean {
    return proto3.util.equals(TranscriptionReceived, a, b);
  }
}

/**
 * @generated from message livekit.proto.ConnectionStateChanged
 */
export class ConnectionStateChanged extends Message<ConnectionStateChanged> {
  /**
   * @generated from field: livekit.proto.ConnectionState state = 1;
   */
  state = ConnectionState.CONN_DISCONNECTED;

  constructor(data?: PartialMessage<ConnectionStateChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ConnectionStateChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(ConnectionState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionStateChanged {
    return new ConnectionStateChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionStateChanged {
    return new ConnectionStateChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionStateChanged {
    return new ConnectionStateChanged().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionStateChanged | PlainMessage<ConnectionStateChanged> | undefined, b: ConnectionStateChanged | PlainMessage<ConnectionStateChanged> | undefined): boolean {
    return proto3.util.equals(ConnectionStateChanged, a, b);
  }
}

/**
 * @generated from message livekit.proto.Connected
 */
export class Connected extends Message<Connected> {
  constructor(data?: PartialMessage<Connected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.Connected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Connected {
    return new Connected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Connected {
    return new Connected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Connected {
    return new Connected().fromJsonString(jsonString, options);
  }

  static equals(a: Connected | PlainMessage<Connected> | undefined, b: Connected | PlainMessage<Connected> | undefined): boolean {
    return proto3.util.equals(Connected, a, b);
  }
}

/**
 * @generated from message livekit.proto.Disconnected
 */
export class Disconnected extends Message<Disconnected> {
  /**
   * @generated from field: livekit.proto.DisconnectReason reason = 1;
   */
  reason = DisconnectReason.UNKNOWN_REASON;

  constructor(data?: PartialMessage<Disconnected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.Disconnected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reason", kind: "enum", T: proto3.getEnumType(DisconnectReason) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Disconnected {
    return new Disconnected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Disconnected {
    return new Disconnected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Disconnected {
    return new Disconnected().fromJsonString(jsonString, options);
  }

  static equals(a: Disconnected | PlainMessage<Disconnected> | undefined, b: Disconnected | PlainMessage<Disconnected> | undefined): boolean {
    return proto3.util.equals(Disconnected, a, b);
  }
}

/**
 * @generated from message livekit.proto.Reconnecting
 */
export class Reconnecting extends Message<Reconnecting> {
  constructor(data?: PartialMessage<Reconnecting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.Reconnecting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reconnecting {
    return new Reconnecting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reconnecting {
    return new Reconnecting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reconnecting {
    return new Reconnecting().fromJsonString(jsonString, options);
  }

  static equals(a: Reconnecting | PlainMessage<Reconnecting> | undefined, b: Reconnecting | PlainMessage<Reconnecting> | undefined): boolean {
    return proto3.util.equals(Reconnecting, a, b);
  }
}

/**
 * @generated from message livekit.proto.Reconnected
 */
export class Reconnected extends Message<Reconnected> {
  constructor(data?: PartialMessage<Reconnected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.Reconnected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reconnected {
    return new Reconnected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reconnected {
    return new Reconnected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reconnected {
    return new Reconnected().fromJsonString(jsonString, options);
  }

  static equals(a: Reconnected | PlainMessage<Reconnected> | undefined, b: Reconnected | PlainMessage<Reconnected> | undefined): boolean {
    return proto3.util.equals(Reconnected, a, b);
  }
}

/**
 * @generated from message livekit.proto.RoomEOS
 */
export class RoomEOS extends Message<RoomEOS> {
  constructor(data?: PartialMessage<RoomEOS>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RoomEOS";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomEOS {
    return new RoomEOS().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomEOS {
    return new RoomEOS().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomEOS {
    return new RoomEOS().fromJsonString(jsonString, options);
  }

  static equals(a: RoomEOS | PlainMessage<RoomEOS> | undefined, b: RoomEOS | PlainMessage<RoomEOS> | undefined): boolean {
    return proto3.util.equals(RoomEOS, a, b);
  }
}

