// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.js"
// @generated from file rpc.proto (package livekit.proto, syntax proto2)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto2 } from "@bufbuild/protobuf";

/**
 * @generated from message livekit.proto.RpcError
 */
export class RpcError extends Message<RpcError> {
  /**
   * @generated from field: required uint32 code = 1;
   */
  code?: number;

  /**
   * @generated from field: required string message = 2;
   */
  message?: string;

  /**
   * @generated from field: optional string data = 3;
   */
  data?: string;

  constructor(data?: PartialMessage<RpcError>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.RpcError";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 3, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcError {
    return new RpcError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcError {
    return new RpcError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcError {
    return new RpcError().fromJsonString(jsonString, options);
  }

  static equals(a: RpcError | PlainMessage<RpcError> | undefined, b: RpcError | PlainMessage<RpcError> | undefined): boolean {
    return proto2.util.equals(RpcError, a, b);
  }
}

/**
 * FFI Requests
 *
 * @generated from message livekit.proto.PerformRpcRequest
 */
export class PerformRpcRequest extends Message<PerformRpcRequest> {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle?: bigint;

  /**
   * @generated from field: required string destination_identity = 2;
   */
  destinationIdentity?: string;

  /**
   * @generated from field: required string method = 3;
   */
  method?: string;

  /**
   * @generated from field: required string payload = 4;
   */
  payload?: string;

  /**
   * @generated from field: optional uint32 response_timeout_ms = 5;
   */
  responseTimeoutMs?: number;

  constructor(data?: PartialMessage<PerformRpcRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.PerformRpcRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "destination_identity", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 3, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 4, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 5, name: "response_timeout_ms", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerformRpcRequest {
    return new PerformRpcRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerformRpcRequest {
    return new PerformRpcRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerformRpcRequest {
    return new PerformRpcRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PerformRpcRequest | PlainMessage<PerformRpcRequest> | undefined, b: PerformRpcRequest | PlainMessage<PerformRpcRequest> | undefined): boolean {
    return proto2.util.equals(PerformRpcRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.RegisterRpcMethodRequest
 */
export class RegisterRpcMethodRequest extends Message<RegisterRpcMethodRequest> {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle?: bigint;

  /**
   * @generated from field: required string method = 2;
   */
  method?: string;

  constructor(data?: PartialMessage<RegisterRpcMethodRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.RegisterRpcMethodRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRpcMethodRequest {
    return new RegisterRpcMethodRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRpcMethodRequest {
    return new RegisterRpcMethodRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRpcMethodRequest {
    return new RegisterRpcMethodRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRpcMethodRequest | PlainMessage<RegisterRpcMethodRequest> | undefined, b: RegisterRpcMethodRequest | PlainMessage<RegisterRpcMethodRequest> | undefined): boolean {
    return proto2.util.equals(RegisterRpcMethodRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.UnregisterRpcMethodRequest
 */
export class UnregisterRpcMethodRequest extends Message<UnregisterRpcMethodRequest> {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle?: bigint;

  /**
   * @generated from field: required string method = 2;
   */
  method?: string;

  constructor(data?: PartialMessage<UnregisterRpcMethodRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.UnregisterRpcMethodRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnregisterRpcMethodRequest {
    return new UnregisterRpcMethodRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnregisterRpcMethodRequest {
    return new UnregisterRpcMethodRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnregisterRpcMethodRequest {
    return new UnregisterRpcMethodRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnregisterRpcMethodRequest | PlainMessage<UnregisterRpcMethodRequest> | undefined, b: UnregisterRpcMethodRequest | PlainMessage<UnregisterRpcMethodRequest> | undefined): boolean {
    return proto2.util.equals(UnregisterRpcMethodRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.RpcMethodInvocationResponseRequest
 */
export class RpcMethodInvocationResponseRequest extends Message<RpcMethodInvocationResponseRequest> {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle?: bigint;

  /**
   * @generated from field: required uint64 invocation_id = 2;
   */
  invocationId?: bigint;

  /**
   * @generated from field: optional string payload = 3;
   */
  payload?: string;

  /**
   * @generated from field: optional livekit.proto.RpcError error = 4;
   */
  error?: RpcError;

  constructor(data?: PartialMessage<RpcMethodInvocationResponseRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.RpcMethodInvocationResponseRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "invocation_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 3, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "error", kind: "message", T: RpcError, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcMethodInvocationResponseRequest {
    return new RpcMethodInvocationResponseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcMethodInvocationResponseRequest {
    return new RpcMethodInvocationResponseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcMethodInvocationResponseRequest {
    return new RpcMethodInvocationResponseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RpcMethodInvocationResponseRequest | PlainMessage<RpcMethodInvocationResponseRequest> | undefined, b: RpcMethodInvocationResponseRequest | PlainMessage<RpcMethodInvocationResponseRequest> | undefined): boolean {
    return proto2.util.equals(RpcMethodInvocationResponseRequest, a, b);
  }
}

/**
 * FFI Responses
 *
 * @generated from message livekit.proto.PerformRpcResponse
 */
export class PerformRpcResponse extends Message<PerformRpcResponse> {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId?: bigint;

  constructor(data?: PartialMessage<PerformRpcResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.PerformRpcResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerformRpcResponse {
    return new PerformRpcResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerformRpcResponse {
    return new PerformRpcResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerformRpcResponse {
    return new PerformRpcResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PerformRpcResponse | PlainMessage<PerformRpcResponse> | undefined, b: PerformRpcResponse | PlainMessage<PerformRpcResponse> | undefined): boolean {
    return proto2.util.equals(PerformRpcResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.RegisterRpcMethodResponse
 */
export class RegisterRpcMethodResponse extends Message<RegisterRpcMethodResponse> {
  constructor(data?: PartialMessage<RegisterRpcMethodResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.RegisterRpcMethodResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRpcMethodResponse {
    return new RegisterRpcMethodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRpcMethodResponse {
    return new RegisterRpcMethodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRpcMethodResponse {
    return new RegisterRpcMethodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRpcMethodResponse | PlainMessage<RegisterRpcMethodResponse> | undefined, b: RegisterRpcMethodResponse | PlainMessage<RegisterRpcMethodResponse> | undefined): boolean {
    return proto2.util.equals(RegisterRpcMethodResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.UnregisterRpcMethodResponse
 */
export class UnregisterRpcMethodResponse extends Message<UnregisterRpcMethodResponse> {
  constructor(data?: PartialMessage<UnregisterRpcMethodResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.UnregisterRpcMethodResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnregisterRpcMethodResponse {
    return new UnregisterRpcMethodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnregisterRpcMethodResponse {
    return new UnregisterRpcMethodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnregisterRpcMethodResponse {
    return new UnregisterRpcMethodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnregisterRpcMethodResponse | PlainMessage<UnregisterRpcMethodResponse> | undefined, b: UnregisterRpcMethodResponse | PlainMessage<UnregisterRpcMethodResponse> | undefined): boolean {
    return proto2.util.equals(UnregisterRpcMethodResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.RpcMethodInvocationResponseResponse
 */
export class RpcMethodInvocationResponseResponse extends Message<RpcMethodInvocationResponseResponse> {
  /**
   * @generated from field: optional string error = 1;
   */
  error?: string;

  constructor(data?: PartialMessage<RpcMethodInvocationResponseResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.RpcMethodInvocationResponseResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcMethodInvocationResponseResponse {
    return new RpcMethodInvocationResponseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcMethodInvocationResponseResponse {
    return new RpcMethodInvocationResponseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcMethodInvocationResponseResponse {
    return new RpcMethodInvocationResponseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RpcMethodInvocationResponseResponse | PlainMessage<RpcMethodInvocationResponseResponse> | undefined, b: RpcMethodInvocationResponseResponse | PlainMessage<RpcMethodInvocationResponseResponse> | undefined): boolean {
    return proto2.util.equals(RpcMethodInvocationResponseResponse, a, b);
  }
}

/**
 * FFI Callbacks
 *
 * @generated from message livekit.proto.PerformRpcCallback
 */
export class PerformRpcCallback extends Message<PerformRpcCallback> {
  /**
   * @generated from field: required uint64 async_id = 1;
   */
  asyncId?: bigint;

  /**
   * @generated from field: optional string payload = 2;
   */
  payload?: string;

  /**
   * @generated from field: optional livekit.proto.RpcError error = 3;
   */
  error?: RpcError;

  constructor(data?: PartialMessage<PerformRpcCallback>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.PerformRpcCallback";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "error", kind: "message", T: RpcError, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerformRpcCallback {
    return new PerformRpcCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerformRpcCallback {
    return new PerformRpcCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerformRpcCallback {
    return new PerformRpcCallback().fromJsonString(jsonString, options);
  }

  static equals(a: PerformRpcCallback | PlainMessage<PerformRpcCallback> | undefined, b: PerformRpcCallback | PlainMessage<PerformRpcCallback> | undefined): boolean {
    return proto2.util.equals(PerformRpcCallback, a, b);
  }
}

/**
 * FFI Events
 *
 * @generated from message livekit.proto.RpcMethodInvocationEvent
 */
export class RpcMethodInvocationEvent extends Message<RpcMethodInvocationEvent> {
  /**
   * @generated from field: required uint64 local_participant_handle = 1;
   */
  localParticipantHandle?: bigint;

  /**
   * @generated from field: required uint64 invocation_id = 2;
   */
  invocationId?: bigint;

  /**
   * @generated from field: required string method = 3;
   */
  method?: string;

  /**
   * @generated from field: required string request_id = 4;
   */
  requestId?: string;

  /**
   * @generated from field: required string caller_identity = 5;
   */
  callerIdentity?: string;

  /**
   * @generated from field: required string payload = 6;
   */
  payload?: string;

  /**
   * @generated from field: required uint32 response_timeout_ms = 7;
   */
  responseTimeoutMs?: number;

  constructor(data?: PartialMessage<RpcMethodInvocationEvent>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.RpcMethodInvocationEvent";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "invocation_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 3, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 4, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 5, name: "caller_identity", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 6, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */, req: true },
    { no: 7, name: "response_timeout_ms", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcMethodInvocationEvent {
    return new RpcMethodInvocationEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcMethodInvocationEvent {
    return new RpcMethodInvocationEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcMethodInvocationEvent {
    return new RpcMethodInvocationEvent().fromJsonString(jsonString, options);
  }

  static equals(a: RpcMethodInvocationEvent | PlainMessage<RpcMethodInvocationEvent> | undefined, b: RpcMethodInvocationEvent | PlainMessage<RpcMethodInvocationEvent> | undefined): boolean {
    return proto2.util.equals(RpcMethodInvocationEvent, a, b);
  }
}

