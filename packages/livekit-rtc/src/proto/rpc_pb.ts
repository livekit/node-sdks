// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file rpc.proto (package livekit.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Data types
 *
 * @generated from message livekit.proto.RpcError
 */
export class RpcError extends Message<RpcError> {
  /**
   * @generated from field: uint32 code = 1;
   */
  code = 0;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: string data = 3;
   */
  data = "";

  constructor(data?: PartialMessage<RpcError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RpcError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcError {
    return new RpcError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcError {
    return new RpcError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcError {
    return new RpcError().fromJsonString(jsonString, options);
  }

  static equals(a: RpcError | PlainMessage<RpcError> | undefined, b: RpcError | PlainMessage<RpcError> | undefined): boolean {
    return proto3.util.equals(RpcError, a, b);
  }
}

/**
 * FFI Requests
 *
 * @generated from message livekit.proto.PublishRpcRequestRequest
 */
export class PublishRpcRequestRequest extends Message<PublishRpcRequestRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: string destination_identity = 2;
   */
  destinationIdentity = "";

  /**
   * @generated from field: string request_id = 3;
   */
  requestId = "";

  /**
   * @generated from field: string method = 4;
   */
  method = "";

  /**
   * @generated from field: string payload = 5;
   */
  payload = "";

  /**
   * @generated from field: uint32 response_timeout_ms = 6;
   */
  responseTimeoutMs = 0;

  /**
   * @generated from field: uint32 version = 7;
   */
  version = 0;

  constructor(data?: PartialMessage<PublishRpcRequestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishRpcRequestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "destination_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "response_timeout_ms", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRpcRequestRequest {
    return new PublishRpcRequestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRpcRequestRequest {
    return new PublishRpcRequestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRpcRequestRequest {
    return new PublishRpcRequestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRpcRequestRequest | PlainMessage<PublishRpcRequestRequest> | undefined, b: PublishRpcRequestRequest | PlainMessage<PublishRpcRequestRequest> | undefined): boolean {
    return proto3.util.equals(PublishRpcRequestRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishRpcResponseRequest
 */
export class PublishRpcResponseRequest extends Message<PublishRpcResponseRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: string destination_identity = 2;
   */
  destinationIdentity = "";

  /**
   * @generated from field: string request_id = 3;
   */
  requestId = "";

  /**
   * @generated from oneof livekit.proto.PublishRpcResponseRequest.value
   */
  value: {
    /**
     * @generated from field: string payload = 4;
     */
    value: string;
    case: "payload";
  } | {
    /**
     * @generated from field: livekit.proto.RpcError error = 5;
     */
    value: RpcError;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PublishRpcResponseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishRpcResponseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "destination_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "payload", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 5, name: "error", kind: "message", T: RpcError, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRpcResponseRequest {
    return new PublishRpcResponseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRpcResponseRequest {
    return new PublishRpcResponseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRpcResponseRequest {
    return new PublishRpcResponseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRpcResponseRequest | PlainMessage<PublishRpcResponseRequest> | undefined, b: PublishRpcResponseRequest | PlainMessage<PublishRpcResponseRequest> | undefined): boolean {
    return proto3.util.equals(PublishRpcResponseRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishRpcAckRequest
 */
export class PublishRpcAckRequest extends Message<PublishRpcAckRequest> {
  /**
   * @generated from field: uint64 local_participant_handle = 1;
   */
  localParticipantHandle = protoInt64.zero;

  /**
   * @generated from field: string destination_identity = 2;
   */
  destinationIdentity = "";

  /**
   * @generated from field: string request_id = 3;
   */
  requestId = "";

  constructor(data?: PartialMessage<PublishRpcAckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishRpcAckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "destination_identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRpcAckRequest {
    return new PublishRpcAckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRpcAckRequest {
    return new PublishRpcAckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRpcAckRequest {
    return new PublishRpcAckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRpcAckRequest | PlainMessage<PublishRpcAckRequest> | undefined, b: PublishRpcAckRequest | PlainMessage<PublishRpcAckRequest> | undefined): boolean {
    return proto3.util.equals(PublishRpcAckRequest, a, b);
  }
}

/**
 * FFI Responses
 *
 * @generated from message livekit.proto.PublishRpcRequestResponse
 */
export class PublishRpcRequestResponse extends Message<PublishRpcRequestResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<PublishRpcRequestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishRpcRequestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRpcRequestResponse {
    return new PublishRpcRequestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRpcRequestResponse {
    return new PublishRpcRequestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRpcRequestResponse {
    return new PublishRpcRequestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRpcRequestResponse | PlainMessage<PublishRpcRequestResponse> | undefined, b: PublishRpcRequestResponse | PlainMessage<PublishRpcRequestResponse> | undefined): boolean {
    return proto3.util.equals(PublishRpcRequestResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishRpcResponseResponse
 */
export class PublishRpcResponseResponse extends Message<PublishRpcResponseResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<PublishRpcResponseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishRpcResponseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRpcResponseResponse {
    return new PublishRpcResponseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRpcResponseResponse {
    return new PublishRpcResponseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRpcResponseResponse {
    return new PublishRpcResponseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRpcResponseResponse | PlainMessage<PublishRpcResponseResponse> | undefined, b: PublishRpcResponseResponse | PlainMessage<PublishRpcResponseResponse> | undefined): boolean {
    return proto3.util.equals(PublishRpcResponseResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishRpcAckResponse
 */
export class PublishRpcAckResponse extends Message<PublishRpcAckResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<PublishRpcAckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishRpcAckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRpcAckResponse {
    return new PublishRpcAckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRpcAckResponse {
    return new PublishRpcAckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRpcAckResponse {
    return new PublishRpcAckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRpcAckResponse | PlainMessage<PublishRpcAckResponse> | undefined, b: PublishRpcAckResponse | PlainMessage<PublishRpcAckResponse> | undefined): boolean {
    return proto3.util.equals(PublishRpcAckResponse, a, b);
  }
}

/**
 * FFI Callbacks
 *
 * @generated from message livekit.proto.PublishRpcRequestCallback
 */
export class PublishRpcRequestCallback extends Message<PublishRpcRequestCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 3;
   */
  error?: string;

  constructor(data?: PartialMessage<PublishRpcRequestCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishRpcRequestCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRpcRequestCallback {
    return new PublishRpcRequestCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRpcRequestCallback {
    return new PublishRpcRequestCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRpcRequestCallback {
    return new PublishRpcRequestCallback().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRpcRequestCallback | PlainMessage<PublishRpcRequestCallback> | undefined, b: PublishRpcRequestCallback | PlainMessage<PublishRpcRequestCallback> | undefined): boolean {
    return proto3.util.equals(PublishRpcRequestCallback, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishRpcResponseCallback
 */
export class PublishRpcResponseCallback extends Message<PublishRpcResponseCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<PublishRpcResponseCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishRpcResponseCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRpcResponseCallback {
    return new PublishRpcResponseCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRpcResponseCallback {
    return new PublishRpcResponseCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRpcResponseCallback {
    return new PublishRpcResponseCallback().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRpcResponseCallback | PlainMessage<PublishRpcResponseCallback> | undefined, b: PublishRpcResponseCallback | PlainMessage<PublishRpcResponseCallback> | undefined): boolean {
    return proto3.util.equals(PublishRpcResponseCallback, a, b);
  }
}

/**
 * @generated from message livekit.proto.PublishRpcAckCallback
 */
export class PublishRpcAckCallback extends Message<PublishRpcAckCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  constructor(data?: PartialMessage<PublishRpcAckCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PublishRpcAckCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PublishRpcAckCallback {
    return new PublishRpcAckCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PublishRpcAckCallback {
    return new PublishRpcAckCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PublishRpcAckCallback {
    return new PublishRpcAckCallback().fromJsonString(jsonString, options);
  }

  static equals(a: PublishRpcAckCallback | PlainMessage<PublishRpcAckCallback> | undefined, b: PublishRpcAckCallback | PlainMessage<PublishRpcAckCallback> | undefined): boolean {
    return proto3.util.equals(PublishRpcAckCallback, a, b);
  }
}

