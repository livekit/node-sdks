// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file stats.proto (package livekit.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum livekit.proto.DataChannelState
 */
export enum DataChannelState {
  /**
   * @generated from enum value: DC_CONNECTING = 0;
   */
  DC_CONNECTING = 0,

  /**
   * @generated from enum value: DC_OPEN = 1;
   */
  DC_OPEN = 1,

  /**
   * @generated from enum value: DC_CLOSING = 2;
   */
  DC_CLOSING = 2,

  /**
   * @generated from enum value: DC_CLOSED = 3;
   */
  DC_CLOSED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(DataChannelState)
proto3.util.setEnumType(DataChannelState, "livekit.proto.DataChannelState", [
  { no: 0, name: "DC_CONNECTING" },
  { no: 1, name: "DC_OPEN" },
  { no: 2, name: "DC_CLOSING" },
  { no: 3, name: "DC_CLOSED" },
]);

/**
 * @generated from enum livekit.proto.QualityLimitationReason
 */
export enum QualityLimitationReason {
  /**
   * @generated from enum value: LIMITATION_NONE = 0;
   */
  LIMITATION_NONE = 0,

  /**
   * @generated from enum value: LIMITATION_CPU = 1;
   */
  LIMITATION_CPU = 1,

  /**
   * @generated from enum value: LIMITATION_BANDWIDTH = 2;
   */
  LIMITATION_BANDWIDTH = 2,

  /**
   * @generated from enum value: LIMITATION_OTHER = 3;
   */
  LIMITATION_OTHER = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(QualityLimitationReason)
proto3.util.setEnumType(QualityLimitationReason, "livekit.proto.QualityLimitationReason", [
  { no: 0, name: "LIMITATION_NONE" },
  { no: 1, name: "LIMITATION_CPU" },
  { no: 2, name: "LIMITATION_BANDWIDTH" },
  { no: 3, name: "LIMITATION_OTHER" },
]);

/**
 * @generated from enum livekit.proto.IceRole
 */
export enum IceRole {
  /**
   * @generated from enum value: ICE_UNKNOWN = 0;
   */
  ICE_UNKNOWN = 0,

  /**
   * @generated from enum value: ICE_CONTROLLING = 1;
   */
  ICE_CONTROLLING = 1,

  /**
   * @generated from enum value: ICE_CONTROLLED = 2;
   */
  ICE_CONTROLLED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(IceRole)
proto3.util.setEnumType(IceRole, "livekit.proto.IceRole", [
  { no: 0, name: "ICE_UNKNOWN" },
  { no: 1, name: "ICE_CONTROLLING" },
  { no: 2, name: "ICE_CONTROLLED" },
]);

/**
 * @generated from enum livekit.proto.DtlsTransportState
 */
export enum DtlsTransportState {
  /**
   * @generated from enum value: DTLS_TRANSPORT_NEW = 0;
   */
  DTLS_TRANSPORT_NEW = 0,

  /**
   * @generated from enum value: DTLS_TRANSPORT_CONNECTING = 1;
   */
  DTLS_TRANSPORT_CONNECTING = 1,

  /**
   * @generated from enum value: DTLS_TRANSPORT_CONNECTED = 2;
   */
  DTLS_TRANSPORT_CONNECTED = 2,

  /**
   * @generated from enum value: DTLS_TRANSPORT_CLOSED = 3;
   */
  DTLS_TRANSPORT_CLOSED = 3,

  /**
   * @generated from enum value: DTLS_TRANSPORT_FAILED = 4;
   */
  DTLS_TRANSPORT_FAILED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DtlsTransportState)
proto3.util.setEnumType(DtlsTransportState, "livekit.proto.DtlsTransportState", [
  { no: 0, name: "DTLS_TRANSPORT_NEW" },
  { no: 1, name: "DTLS_TRANSPORT_CONNECTING" },
  { no: 2, name: "DTLS_TRANSPORT_CONNECTED" },
  { no: 3, name: "DTLS_TRANSPORT_CLOSED" },
  { no: 4, name: "DTLS_TRANSPORT_FAILED" },
]);

/**
 * @generated from enum livekit.proto.IceTransportState
 */
export enum IceTransportState {
  /**
   * @generated from enum value: ICE_TRANSPORT_NEW = 0;
   */
  ICE_TRANSPORT_NEW = 0,

  /**
   * @generated from enum value: ICE_TRANSPORT_CHECKING = 1;
   */
  ICE_TRANSPORT_CHECKING = 1,

  /**
   * @generated from enum value: ICE_TRANSPORT_CONNECTED = 2;
   */
  ICE_TRANSPORT_CONNECTED = 2,

  /**
   * @generated from enum value: ICE_TRANSPORT_COMPLETED = 3;
   */
  ICE_TRANSPORT_COMPLETED = 3,

  /**
   * @generated from enum value: ICE_TRANSPORT_DISCONNECTED = 4;
   */
  ICE_TRANSPORT_DISCONNECTED = 4,

  /**
   * @generated from enum value: ICE_TRANSPORT_FAILED = 5;
   */
  ICE_TRANSPORT_FAILED = 5,

  /**
   * @generated from enum value: ICE_TRANSPORT_CLOSED = 6;
   */
  ICE_TRANSPORT_CLOSED = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(IceTransportState)
proto3.util.setEnumType(IceTransportState, "livekit.proto.IceTransportState", [
  { no: 0, name: "ICE_TRANSPORT_NEW" },
  { no: 1, name: "ICE_TRANSPORT_CHECKING" },
  { no: 2, name: "ICE_TRANSPORT_CONNECTED" },
  { no: 3, name: "ICE_TRANSPORT_COMPLETED" },
  { no: 4, name: "ICE_TRANSPORT_DISCONNECTED" },
  { no: 5, name: "ICE_TRANSPORT_FAILED" },
  { no: 6, name: "ICE_TRANSPORT_CLOSED" },
]);

/**
 * @generated from enum livekit.proto.DtlsRole
 */
export enum DtlsRole {
  /**
   * @generated from enum value: DTLS_CLIENT = 0;
   */
  DTLS_CLIENT = 0,

  /**
   * @generated from enum value: DTLS_SERVER = 1;
   */
  DTLS_SERVER = 1,

  /**
   * @generated from enum value: DTLS_UNKNOWN = 2;
   */
  DTLS_UNKNOWN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DtlsRole)
proto3.util.setEnumType(DtlsRole, "livekit.proto.DtlsRole", [
  { no: 0, name: "DTLS_CLIENT" },
  { no: 1, name: "DTLS_SERVER" },
  { no: 2, name: "DTLS_UNKNOWN" },
]);

/**
 * @generated from enum livekit.proto.IceCandidatePairState
 */
export enum IceCandidatePairState {
  /**
   * @generated from enum value: PAIR_FROZEN = 0;
   */
  PAIR_FROZEN = 0,

  /**
   * @generated from enum value: PAIR_WAITING = 1;
   */
  PAIR_WAITING = 1,

  /**
   * @generated from enum value: PAIR_IN_PROGRESS = 2;
   */
  PAIR_IN_PROGRESS = 2,

  /**
   * @generated from enum value: PAIR_FAILED = 3;
   */
  PAIR_FAILED = 3,

  /**
   * @generated from enum value: PAIR_SUCCEEDED = 4;
   */
  PAIR_SUCCEEDED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(IceCandidatePairState)
proto3.util.setEnumType(IceCandidatePairState, "livekit.proto.IceCandidatePairState", [
  { no: 0, name: "PAIR_FROZEN" },
  { no: 1, name: "PAIR_WAITING" },
  { no: 2, name: "PAIR_IN_PROGRESS" },
  { no: 3, name: "PAIR_FAILED" },
  { no: 4, name: "PAIR_SUCCEEDED" },
]);

/**
 * @generated from enum livekit.proto.IceCandidateType
 */
export enum IceCandidateType {
  /**
   * @generated from enum value: HOST = 0;
   */
  HOST = 0,

  /**
   * @generated from enum value: SRFLX = 1;
   */
  SRFLX = 1,

  /**
   * @generated from enum value: PRFLX = 2;
   */
  PRFLX = 2,

  /**
   * @generated from enum value: RELAY = 3;
   */
  RELAY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(IceCandidateType)
proto3.util.setEnumType(IceCandidateType, "livekit.proto.IceCandidateType", [
  { no: 0, name: "HOST" },
  { no: 1, name: "SRFLX" },
  { no: 2, name: "PRFLX" },
  { no: 3, name: "RELAY" },
]);

/**
 * @generated from enum livekit.proto.IceServerTransportProtocol
 */
export enum IceServerTransportProtocol {
  /**
   * @generated from enum value: TRANSPORT_UDP = 0;
   */
  TRANSPORT_UDP = 0,

  /**
   * @generated from enum value: TRANSPORT_TCP = 1;
   */
  TRANSPORT_TCP = 1,

  /**
   * @generated from enum value: TRANSPORT_TLS = 2;
   */
  TRANSPORT_TLS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(IceServerTransportProtocol)
proto3.util.setEnumType(IceServerTransportProtocol, "livekit.proto.IceServerTransportProtocol", [
  { no: 0, name: "TRANSPORT_UDP" },
  { no: 1, name: "TRANSPORT_TCP" },
  { no: 2, name: "TRANSPORT_TLS" },
]);

/**
 * @generated from enum livekit.proto.IceTcpCandidateType
 */
export enum IceTcpCandidateType {
  /**
   * @generated from enum value: CANDIDATE_ACTIVE = 0;
   */
  CANDIDATE_ACTIVE = 0,

  /**
   * @generated from enum value: CANDIDATE_PASSIVE = 1;
   */
  CANDIDATE_PASSIVE = 1,

  /**
   * @generated from enum value: CANDIDATE_SO = 2;
   */
  CANDIDATE_SO = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(IceTcpCandidateType)
proto3.util.setEnumType(IceTcpCandidateType, "livekit.proto.IceTcpCandidateType", [
  { no: 0, name: "CANDIDATE_ACTIVE" },
  { no: 1, name: "CANDIDATE_PASSIVE" },
  { no: 2, name: "CANDIDATE_SO" },
]);

/**
 * @generated from message livekit.proto.RtcStats
 */
export class RtcStats extends Message<RtcStats> {
  /**
   * @generated from oneof livekit.proto.RtcStats.stats
   */
  stats: {
    /**
     * @generated from field: livekit.proto.RtcStats.Codec codec = 3;
     */
    value: RtcStats_Codec;
    case: "codec";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.InboundRtp inbound_rtp = 4;
     */
    value: RtcStats_InboundRtp;
    case: "inboundRtp";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.OutboundRtp outbound_rtp = 5;
     */
    value: RtcStats_OutboundRtp;
    case: "outboundRtp";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.RemoteInboundRtp remote_inbound_rtp = 6;
     */
    value: RtcStats_RemoteInboundRtp;
    case: "remoteInboundRtp";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.RemoteOutboundRtp remote_outbound_rtp = 7;
     */
    value: RtcStats_RemoteOutboundRtp;
    case: "remoteOutboundRtp";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.MediaSource media_source = 8;
     */
    value: RtcStats_MediaSource;
    case: "mediaSource";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.MediaPlayout media_playout = 9;
     */
    value: RtcStats_MediaPlayout;
    case: "mediaPlayout";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.PeerConnection peer_connection = 10;
     */
    value: RtcStats_PeerConnection;
    case: "peerConnection";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.DataChannel data_channel = 11;
     */
    value: RtcStats_DataChannel;
    case: "dataChannel";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.Transport transport = 12;
     */
    value: RtcStats_Transport;
    case: "transport";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.CandidatePair candidate_pair = 13;
     */
    value: RtcStats_CandidatePair;
    case: "candidatePair";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.LocalCandidate local_candidate = 14;
     */
    value: RtcStats_LocalCandidate;
    case: "localCandidate";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.RemoteCandidate remote_candidate = 15;
     */
    value: RtcStats_RemoteCandidate;
    case: "remoteCandidate";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.Certificate certificate = 16;
     */
    value: RtcStats_Certificate;
    case: "certificate";
  } | {
    /**
     * @generated from field: livekit.proto.RtcStats.Track track = 17;
     */
    value: RtcStats_Track;
    case: "track";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RtcStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "codec", kind: "message", T: RtcStats_Codec, oneof: "stats" },
    { no: 4, name: "inbound_rtp", kind: "message", T: RtcStats_InboundRtp, oneof: "stats" },
    { no: 5, name: "outbound_rtp", kind: "message", T: RtcStats_OutboundRtp, oneof: "stats" },
    { no: 6, name: "remote_inbound_rtp", kind: "message", T: RtcStats_RemoteInboundRtp, oneof: "stats" },
    { no: 7, name: "remote_outbound_rtp", kind: "message", T: RtcStats_RemoteOutboundRtp, oneof: "stats" },
    { no: 8, name: "media_source", kind: "message", T: RtcStats_MediaSource, oneof: "stats" },
    { no: 9, name: "media_playout", kind: "message", T: RtcStats_MediaPlayout, oneof: "stats" },
    { no: 10, name: "peer_connection", kind: "message", T: RtcStats_PeerConnection, oneof: "stats" },
    { no: 11, name: "data_channel", kind: "message", T: RtcStats_DataChannel, oneof: "stats" },
    { no: 12, name: "transport", kind: "message", T: RtcStats_Transport, oneof: "stats" },
    { no: 13, name: "candidate_pair", kind: "message", T: RtcStats_CandidatePair, oneof: "stats" },
    { no: 14, name: "local_candidate", kind: "message", T: RtcStats_LocalCandidate, oneof: "stats" },
    { no: 15, name: "remote_candidate", kind: "message", T: RtcStats_RemoteCandidate, oneof: "stats" },
    { no: 16, name: "certificate", kind: "message", T: RtcStats_Certificate, oneof: "stats" },
    { no: 17, name: "track", kind: "message", T: RtcStats_Track, oneof: "stats" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats {
    return new RtcStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats {
    return new RtcStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats {
    return new RtcStats().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats | PlainMessage<RtcStats> | undefined, b: RtcStats | PlainMessage<RtcStats> | undefined): boolean {
    return proto3.util.equals(RtcStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.Codec
 */
export class RtcStats_Codec extends Message<RtcStats_Codec> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.CodecStats codec = 2;
   */
  codec?: CodecStats;

  constructor(data?: PartialMessage<RtcStats_Codec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.Codec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "codec", kind: "message", T: CodecStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_Codec {
    return new RtcStats_Codec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_Codec {
    return new RtcStats_Codec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_Codec {
    return new RtcStats_Codec().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_Codec | PlainMessage<RtcStats_Codec> | undefined, b: RtcStats_Codec | PlainMessage<RtcStats_Codec> | undefined): boolean {
    return proto3.util.equals(RtcStats_Codec, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.InboundRtp
 */
export class RtcStats_InboundRtp extends Message<RtcStats_InboundRtp> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.RtpStreamStats stream = 2;
   */
  stream?: RtpStreamStats;

  /**
   * @generated from field: livekit.proto.ReceivedRtpStreamStats received = 3;
   */
  received?: ReceivedRtpStreamStats;

  /**
   * @generated from field: livekit.proto.InboundRtpStreamStats inbound = 4;
   */
  inbound?: InboundRtpStreamStats;

  constructor(data?: PartialMessage<RtcStats_InboundRtp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.InboundRtp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "stream", kind: "message", T: RtpStreamStats },
    { no: 3, name: "received", kind: "message", T: ReceivedRtpStreamStats },
    { no: 4, name: "inbound", kind: "message", T: InboundRtpStreamStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_InboundRtp {
    return new RtcStats_InboundRtp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_InboundRtp {
    return new RtcStats_InboundRtp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_InboundRtp {
    return new RtcStats_InboundRtp().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_InboundRtp | PlainMessage<RtcStats_InboundRtp> | undefined, b: RtcStats_InboundRtp | PlainMessage<RtcStats_InboundRtp> | undefined): boolean {
    return proto3.util.equals(RtcStats_InboundRtp, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.OutboundRtp
 */
export class RtcStats_OutboundRtp extends Message<RtcStats_OutboundRtp> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.RtpStreamStats stream = 2;
   */
  stream?: RtpStreamStats;

  /**
   * @generated from field: livekit.proto.SentRtpStreamStats sent = 3;
   */
  sent?: SentRtpStreamStats;

  /**
   * @generated from field: livekit.proto.OutboundRtpStreamStats outbound = 4;
   */
  outbound?: OutboundRtpStreamStats;

  constructor(data?: PartialMessage<RtcStats_OutboundRtp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.OutboundRtp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "stream", kind: "message", T: RtpStreamStats },
    { no: 3, name: "sent", kind: "message", T: SentRtpStreamStats },
    { no: 4, name: "outbound", kind: "message", T: OutboundRtpStreamStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_OutboundRtp {
    return new RtcStats_OutboundRtp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_OutboundRtp {
    return new RtcStats_OutboundRtp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_OutboundRtp {
    return new RtcStats_OutboundRtp().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_OutboundRtp | PlainMessage<RtcStats_OutboundRtp> | undefined, b: RtcStats_OutboundRtp | PlainMessage<RtcStats_OutboundRtp> | undefined): boolean {
    return proto3.util.equals(RtcStats_OutboundRtp, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.RemoteInboundRtp
 */
export class RtcStats_RemoteInboundRtp extends Message<RtcStats_RemoteInboundRtp> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.RtpStreamStats stream = 2;
   */
  stream?: RtpStreamStats;

  /**
   * @generated from field: livekit.proto.ReceivedRtpStreamStats received = 3;
   */
  received?: ReceivedRtpStreamStats;

  /**
   * @generated from field: livekit.proto.RemoteInboundRtpStreamStats remote_inbound = 4;
   */
  remoteInbound?: RemoteInboundRtpStreamStats;

  constructor(data?: PartialMessage<RtcStats_RemoteInboundRtp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.RemoteInboundRtp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "stream", kind: "message", T: RtpStreamStats },
    { no: 3, name: "received", kind: "message", T: ReceivedRtpStreamStats },
    { no: 4, name: "remote_inbound", kind: "message", T: RemoteInboundRtpStreamStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_RemoteInboundRtp {
    return new RtcStats_RemoteInboundRtp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_RemoteInboundRtp {
    return new RtcStats_RemoteInboundRtp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_RemoteInboundRtp {
    return new RtcStats_RemoteInboundRtp().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_RemoteInboundRtp | PlainMessage<RtcStats_RemoteInboundRtp> | undefined, b: RtcStats_RemoteInboundRtp | PlainMessage<RtcStats_RemoteInboundRtp> | undefined): boolean {
    return proto3.util.equals(RtcStats_RemoteInboundRtp, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.RemoteOutboundRtp
 */
export class RtcStats_RemoteOutboundRtp extends Message<RtcStats_RemoteOutboundRtp> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.RtpStreamStats stream = 2;
   */
  stream?: RtpStreamStats;

  /**
   * @generated from field: livekit.proto.SentRtpStreamStats sent = 3;
   */
  sent?: SentRtpStreamStats;

  /**
   * @generated from field: livekit.proto.RemoteOutboundRtpStreamStats remote_outbound = 4;
   */
  remoteOutbound?: RemoteOutboundRtpStreamStats;

  constructor(data?: PartialMessage<RtcStats_RemoteOutboundRtp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.RemoteOutboundRtp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "stream", kind: "message", T: RtpStreamStats },
    { no: 3, name: "sent", kind: "message", T: SentRtpStreamStats },
    { no: 4, name: "remote_outbound", kind: "message", T: RemoteOutboundRtpStreamStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_RemoteOutboundRtp {
    return new RtcStats_RemoteOutboundRtp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_RemoteOutboundRtp {
    return new RtcStats_RemoteOutboundRtp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_RemoteOutboundRtp {
    return new RtcStats_RemoteOutboundRtp().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_RemoteOutboundRtp | PlainMessage<RtcStats_RemoteOutboundRtp> | undefined, b: RtcStats_RemoteOutboundRtp | PlainMessage<RtcStats_RemoteOutboundRtp> | undefined): boolean {
    return proto3.util.equals(RtcStats_RemoteOutboundRtp, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.MediaSource
 */
export class RtcStats_MediaSource extends Message<RtcStats_MediaSource> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.MediaSourceStats source = 2;
   */
  source?: MediaSourceStats;

  /**
   * @generated from field: livekit.proto.AudioSourceStats audio = 3;
   */
  audio?: AudioSourceStats;

  /**
   * @generated from field: livekit.proto.VideoSourceStats video = 4;
   */
  video?: VideoSourceStats;

  constructor(data?: PartialMessage<RtcStats_MediaSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.MediaSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "source", kind: "message", T: MediaSourceStats },
    { no: 3, name: "audio", kind: "message", T: AudioSourceStats },
    { no: 4, name: "video", kind: "message", T: VideoSourceStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_MediaSource {
    return new RtcStats_MediaSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_MediaSource {
    return new RtcStats_MediaSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_MediaSource {
    return new RtcStats_MediaSource().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_MediaSource | PlainMessage<RtcStats_MediaSource> | undefined, b: RtcStats_MediaSource | PlainMessage<RtcStats_MediaSource> | undefined): boolean {
    return proto3.util.equals(RtcStats_MediaSource, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.MediaPlayout
 */
export class RtcStats_MediaPlayout extends Message<RtcStats_MediaPlayout> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.AudioPlayoutStats audio_playout = 2;
   */
  audioPlayout?: AudioPlayoutStats;

  constructor(data?: PartialMessage<RtcStats_MediaPlayout>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.MediaPlayout";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "audio_playout", kind: "message", T: AudioPlayoutStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_MediaPlayout {
    return new RtcStats_MediaPlayout().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_MediaPlayout {
    return new RtcStats_MediaPlayout().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_MediaPlayout {
    return new RtcStats_MediaPlayout().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_MediaPlayout | PlainMessage<RtcStats_MediaPlayout> | undefined, b: RtcStats_MediaPlayout | PlainMessage<RtcStats_MediaPlayout> | undefined): boolean {
    return proto3.util.equals(RtcStats_MediaPlayout, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.PeerConnection
 */
export class RtcStats_PeerConnection extends Message<RtcStats_PeerConnection> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.PeerConnectionStats pc = 2;
   */
  pc?: PeerConnectionStats;

  constructor(data?: PartialMessage<RtcStats_PeerConnection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.PeerConnection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "pc", kind: "message", T: PeerConnectionStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_PeerConnection {
    return new RtcStats_PeerConnection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_PeerConnection {
    return new RtcStats_PeerConnection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_PeerConnection {
    return new RtcStats_PeerConnection().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_PeerConnection | PlainMessage<RtcStats_PeerConnection> | undefined, b: RtcStats_PeerConnection | PlainMessage<RtcStats_PeerConnection> | undefined): boolean {
    return proto3.util.equals(RtcStats_PeerConnection, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.DataChannel
 */
export class RtcStats_DataChannel extends Message<RtcStats_DataChannel> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.DataChannelStats dc = 2;
   */
  dc?: DataChannelStats;

  constructor(data?: PartialMessage<RtcStats_DataChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.DataChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "dc", kind: "message", T: DataChannelStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_DataChannel {
    return new RtcStats_DataChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_DataChannel {
    return new RtcStats_DataChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_DataChannel {
    return new RtcStats_DataChannel().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_DataChannel | PlainMessage<RtcStats_DataChannel> | undefined, b: RtcStats_DataChannel | PlainMessage<RtcStats_DataChannel> | undefined): boolean {
    return proto3.util.equals(RtcStats_DataChannel, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.Transport
 */
export class RtcStats_Transport extends Message<RtcStats_Transport> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.TransportStats transport = 2;
   */
  transport?: TransportStats;

  constructor(data?: PartialMessage<RtcStats_Transport>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.Transport";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "transport", kind: "message", T: TransportStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_Transport {
    return new RtcStats_Transport().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_Transport {
    return new RtcStats_Transport().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_Transport {
    return new RtcStats_Transport().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_Transport | PlainMessage<RtcStats_Transport> | undefined, b: RtcStats_Transport | PlainMessage<RtcStats_Transport> | undefined): boolean {
    return proto3.util.equals(RtcStats_Transport, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.CandidatePair
 */
export class RtcStats_CandidatePair extends Message<RtcStats_CandidatePair> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.CandidatePairStats candidate_pair = 2;
   */
  candidatePair?: CandidatePairStats;

  constructor(data?: PartialMessage<RtcStats_CandidatePair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.CandidatePair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "candidate_pair", kind: "message", T: CandidatePairStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_CandidatePair {
    return new RtcStats_CandidatePair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_CandidatePair {
    return new RtcStats_CandidatePair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_CandidatePair {
    return new RtcStats_CandidatePair().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_CandidatePair | PlainMessage<RtcStats_CandidatePair> | undefined, b: RtcStats_CandidatePair | PlainMessage<RtcStats_CandidatePair> | undefined): boolean {
    return proto3.util.equals(RtcStats_CandidatePair, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.LocalCandidate
 */
export class RtcStats_LocalCandidate extends Message<RtcStats_LocalCandidate> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.IceCandidateStats candidate = 2;
   */
  candidate?: IceCandidateStats;

  constructor(data?: PartialMessage<RtcStats_LocalCandidate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.LocalCandidate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "candidate", kind: "message", T: IceCandidateStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_LocalCandidate {
    return new RtcStats_LocalCandidate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_LocalCandidate {
    return new RtcStats_LocalCandidate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_LocalCandidate {
    return new RtcStats_LocalCandidate().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_LocalCandidate | PlainMessage<RtcStats_LocalCandidate> | undefined, b: RtcStats_LocalCandidate | PlainMessage<RtcStats_LocalCandidate> | undefined): boolean {
    return proto3.util.equals(RtcStats_LocalCandidate, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.RemoteCandidate
 */
export class RtcStats_RemoteCandidate extends Message<RtcStats_RemoteCandidate> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.IceCandidateStats candidate = 2;
   */
  candidate?: IceCandidateStats;

  constructor(data?: PartialMessage<RtcStats_RemoteCandidate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.RemoteCandidate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "candidate", kind: "message", T: IceCandidateStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_RemoteCandidate {
    return new RtcStats_RemoteCandidate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_RemoteCandidate {
    return new RtcStats_RemoteCandidate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_RemoteCandidate {
    return new RtcStats_RemoteCandidate().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_RemoteCandidate | PlainMessage<RtcStats_RemoteCandidate> | undefined, b: RtcStats_RemoteCandidate | PlainMessage<RtcStats_RemoteCandidate> | undefined): boolean {
    return proto3.util.equals(RtcStats_RemoteCandidate, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStats.Certificate
 */
export class RtcStats_Certificate extends Message<RtcStats_Certificate> {
  /**
   * @generated from field: livekit.proto.RtcStatsData rtc = 1;
   */
  rtc?: RtcStatsData;

  /**
   * @generated from field: livekit.proto.CertificateStats certificate = 2;
   */
  certificate?: CertificateStats;

  constructor(data?: PartialMessage<RtcStats_Certificate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.Certificate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rtc", kind: "message", T: RtcStatsData },
    { no: 2, name: "certificate", kind: "message", T: CertificateStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_Certificate {
    return new RtcStats_Certificate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_Certificate {
    return new RtcStats_Certificate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_Certificate {
    return new RtcStats_Certificate().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_Certificate | PlainMessage<RtcStats_Certificate> | undefined, b: RtcStats_Certificate | PlainMessage<RtcStats_Certificate> | undefined): boolean {
    return proto3.util.equals(RtcStats_Certificate, a, b);
  }
}

/**
 * Deprecated
 *
 * @generated from message livekit.proto.RtcStats.Track
 */
export class RtcStats_Track extends Message<RtcStats_Track> {
  constructor(data?: PartialMessage<RtcStats_Track>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStats.Track";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStats_Track {
    return new RtcStats_Track().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStats_Track {
    return new RtcStats_Track().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStats_Track {
    return new RtcStats_Track().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStats_Track | PlainMessage<RtcStats_Track> | undefined, b: RtcStats_Track | PlainMessage<RtcStats_Track> | undefined): boolean {
    return proto3.util.equals(RtcStats_Track, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtcStatsData
 */
export class RtcStatsData extends Message<RtcStatsData> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 timestamp = 2;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<RtcStatsData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtcStatsData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtcStatsData {
    return new RtcStatsData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtcStatsData {
    return new RtcStatsData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtcStatsData {
    return new RtcStatsData().fromJsonString(jsonString, options);
  }

  static equals(a: RtcStatsData | PlainMessage<RtcStatsData> | undefined, b: RtcStatsData | PlainMessage<RtcStatsData> | undefined): boolean {
    return proto3.util.equals(RtcStatsData, a, b);
  }
}

/**
 * @generated from message livekit.proto.CodecStats
 */
export class CodecStats extends Message<CodecStats> {
  /**
   * @generated from field: uint32 payload_type = 1;
   */
  payloadType = 0;

  /**
   * @generated from field: string transport_id = 2;
   */
  transportId = "";

  /**
   * @generated from field: string mime_type = 3;
   */
  mimeType = "";

  /**
   * @generated from field: uint32 clock_rate = 4;
   */
  clockRate = 0;

  /**
   * @generated from field: uint32 channels = 5;
   */
  channels = 0;

  /**
   * @generated from field: string sdp_fmtp_line = 6;
   */
  sdpFmtpLine = "";

  constructor(data?: PartialMessage<CodecStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CodecStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "payload_type", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "transport_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "clock_rate", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "channels", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "sdp_fmtp_line", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodecStats {
    return new CodecStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodecStats {
    return new CodecStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodecStats {
    return new CodecStats().fromJsonString(jsonString, options);
  }

  static equals(a: CodecStats | PlainMessage<CodecStats> | undefined, b: CodecStats | PlainMessage<CodecStats> | undefined): boolean {
    return proto3.util.equals(CodecStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.RtpStreamStats
 */
export class RtpStreamStats extends Message<RtpStreamStats> {
  /**
   * @generated from field: uint32 ssrc = 1;
   */
  ssrc = 0;

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * @generated from field: string transport_id = 3;
   */
  transportId = "";

  /**
   * @generated from field: string codec_id = 4;
   */
  codecId = "";

  constructor(data?: PartialMessage<RtpStreamStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RtpStreamStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ssrc", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transport_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "codec_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RtpStreamStats {
    return new RtpStreamStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RtpStreamStats {
    return new RtpStreamStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RtpStreamStats {
    return new RtpStreamStats().fromJsonString(jsonString, options);
  }

  static equals(a: RtpStreamStats | PlainMessage<RtpStreamStats> | undefined, b: RtpStreamStats | PlainMessage<RtpStreamStats> | undefined): boolean {
    return proto3.util.equals(RtpStreamStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.ReceivedRtpStreamStats
 */
export class ReceivedRtpStreamStats extends Message<ReceivedRtpStreamStats> {
  /**
   * @generated from field: uint64 packets_received = 1;
   */
  packetsReceived = protoInt64.zero;

  /**
   * @generated from field: int64 packets_lost = 2;
   */
  packetsLost = protoInt64.zero;

  /**
   * @generated from field: double jitter = 3;
   */
  jitter = 0;

  constructor(data?: PartialMessage<ReceivedRtpStreamStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.ReceivedRtpStreamStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packets_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "packets_lost", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "jitter", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReceivedRtpStreamStats {
    return new ReceivedRtpStreamStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReceivedRtpStreamStats {
    return new ReceivedRtpStreamStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReceivedRtpStreamStats {
    return new ReceivedRtpStreamStats().fromJsonString(jsonString, options);
  }

  static equals(a: ReceivedRtpStreamStats | PlainMessage<ReceivedRtpStreamStats> | undefined, b: ReceivedRtpStreamStats | PlainMessage<ReceivedRtpStreamStats> | undefined): boolean {
    return proto3.util.equals(ReceivedRtpStreamStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.InboundRtpStreamStats
 */
export class InboundRtpStreamStats extends Message<InboundRtpStreamStats> {
  /**
   * @generated from field: string track_identifier = 1;
   */
  trackIdentifier = "";

  /**
   * @generated from field: string mid = 2;
   */
  mid = "";

  /**
   * @generated from field: string remote_id = 3;
   */
  remoteId = "";

  /**
   * @generated from field: uint32 frames_decoded = 4;
   */
  framesDecoded = 0;

  /**
   * @generated from field: uint32 key_frames_decoded = 5;
   */
  keyFramesDecoded = 0;

  /**
   * @generated from field: uint32 frames_rendered = 6;
   */
  framesRendered = 0;

  /**
   * @generated from field: uint32 frames_dropped = 7;
   */
  framesDropped = 0;

  /**
   * @generated from field: uint32 frame_width = 8;
   */
  frameWidth = 0;

  /**
   * @generated from field: uint32 frame_height = 9;
   */
  frameHeight = 0;

  /**
   * @generated from field: double frames_per_second = 10;
   */
  framesPerSecond = 0;

  /**
   * @generated from field: uint64 qp_sum = 11;
   */
  qpSum = protoInt64.zero;

  /**
   * @generated from field: double total_decode_time = 12;
   */
  totalDecodeTime = 0;

  /**
   * @generated from field: double total_inter_frame_delay = 13;
   */
  totalInterFrameDelay = 0;

  /**
   * @generated from field: double total_squared_inter_frame_delay = 14;
   */
  totalSquaredInterFrameDelay = 0;

  /**
   * @generated from field: uint32 pause_count = 15;
   */
  pauseCount = 0;

  /**
   * @generated from field: double total_pause_duration = 16;
   */
  totalPauseDuration = 0;

  /**
   * @generated from field: uint32 freeze_count = 17;
   */
  freezeCount = 0;

  /**
   * @generated from field: double total_freeze_duration = 18;
   */
  totalFreezeDuration = 0;

  /**
   * @generated from field: double last_packet_received_timestamp = 19;
   */
  lastPacketReceivedTimestamp = 0;

  /**
   * @generated from field: uint64 header_bytes_received = 20;
   */
  headerBytesReceived = protoInt64.zero;

  /**
   * @generated from field: uint64 packets_discarded = 21;
   */
  packetsDiscarded = protoInt64.zero;

  /**
   * @generated from field: uint64 fec_bytes_received = 22;
   */
  fecBytesReceived = protoInt64.zero;

  /**
   * @generated from field: uint64 fec_packets_received = 23;
   */
  fecPacketsReceived = protoInt64.zero;

  /**
   * @generated from field: uint64 fec_packets_discarded = 24;
   */
  fecPacketsDiscarded = protoInt64.zero;

  /**
   * @generated from field: uint64 bytes_received = 25;
   */
  bytesReceived = protoInt64.zero;

  /**
   * @generated from field: uint32 nack_count = 26;
   */
  nackCount = 0;

  /**
   * @generated from field: uint32 fir_count = 27;
   */
  firCount = 0;

  /**
   * @generated from field: uint32 pli_count = 28;
   */
  pliCount = 0;

  /**
   * @generated from field: double total_processing_delay = 29;
   */
  totalProcessingDelay = 0;

  /**
   * @generated from field: double estimated_playout_timestamp = 30;
   */
  estimatedPlayoutTimestamp = 0;

  /**
   * @generated from field: double jitter_buffer_delay = 31;
   */
  jitterBufferDelay = 0;

  /**
   * @generated from field: double jitter_buffer_target_delay = 32;
   */
  jitterBufferTargetDelay = 0;

  /**
   * @generated from field: uint64 jitter_buffer_emitted_count = 33;
   */
  jitterBufferEmittedCount = protoInt64.zero;

  /**
   * @generated from field: double jitter_buffer_minimum_delay = 34;
   */
  jitterBufferMinimumDelay = 0;

  /**
   * @generated from field: uint64 total_samples_received = 35;
   */
  totalSamplesReceived = protoInt64.zero;

  /**
   * @generated from field: uint64 concealed_samples = 36;
   */
  concealedSamples = protoInt64.zero;

  /**
   * @generated from field: uint64 silent_concealed_samples = 37;
   */
  silentConcealedSamples = protoInt64.zero;

  /**
   * @generated from field: uint64 concealment_events = 38;
   */
  concealmentEvents = protoInt64.zero;

  /**
   * @generated from field: uint64 inserted_samples_for_deceleration = 39;
   */
  insertedSamplesForDeceleration = protoInt64.zero;

  /**
   * @generated from field: uint64 removed_samples_for_acceleration = 40;
   */
  removedSamplesForAcceleration = protoInt64.zero;

  /**
   * @generated from field: double audio_level = 41;
   */
  audioLevel = 0;

  /**
   * @generated from field: double total_audio_energy = 42;
   */
  totalAudioEnergy = 0;

  /**
   * @generated from field: double total_samples_duration = 43;
   */
  totalSamplesDuration = 0;

  /**
   * @generated from field: uint64 frames_received = 44;
   */
  framesReceived = protoInt64.zero;

  /**
   * @generated from field: string decoder_implementation = 45;
   */
  decoderImplementation = "";

  /**
   * @generated from field: string playout_id = 46;
   */
  playoutId = "";

  /**
   * @generated from field: bool power_efficient_decoder = 47;
   */
  powerEfficientDecoder = false;

  /**
   * @generated from field: uint64 frames_assembled_from_multiple_packets = 48;
   */
  framesAssembledFromMultiplePackets = protoInt64.zero;

  /**
   * @generated from field: double total_assembly_time = 49;
   */
  totalAssemblyTime = 0;

  /**
   * @generated from field: uint64 retransmitted_packets_received = 50;
   */
  retransmittedPacketsReceived = protoInt64.zero;

  /**
   * @generated from field: uint64 retransmitted_bytes_received = 51;
   */
  retransmittedBytesReceived = protoInt64.zero;

  /**
   * @generated from field: uint32 rtx_ssrc = 52;
   */
  rtxSsrc = 0;

  /**
   * @generated from field: uint32 fec_ssrc = 53;
   */
  fecSsrc = 0;

  constructor(data?: PartialMessage<InboundRtpStreamStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.InboundRtpStreamStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "track_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "remote_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "frames_decoded", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "key_frames_decoded", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "frames_rendered", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "frames_dropped", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "frame_width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "frame_height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "frames_per_second", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 11, name: "qp_sum", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "total_decode_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "total_inter_frame_delay", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "total_squared_inter_frame_delay", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 15, name: "pause_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "total_pause_duration", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 17, name: "freeze_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 18, name: "total_freeze_duration", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 19, name: "last_packet_received_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 20, name: "header_bytes_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "packets_discarded", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 22, name: "fec_bytes_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "fec_packets_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 24, name: "fec_packets_discarded", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 25, name: "bytes_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "nack_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 27, name: "fir_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 28, name: "pli_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 29, name: "total_processing_delay", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 30, name: "estimated_playout_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 31, name: "jitter_buffer_delay", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 32, name: "jitter_buffer_target_delay", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 33, name: "jitter_buffer_emitted_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 34, name: "jitter_buffer_minimum_delay", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 35, name: "total_samples_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 36, name: "concealed_samples", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 37, name: "silent_concealed_samples", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 38, name: "concealment_events", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 39, name: "inserted_samples_for_deceleration", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 40, name: "removed_samples_for_acceleration", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 41, name: "audio_level", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 42, name: "total_audio_energy", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 43, name: "total_samples_duration", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 44, name: "frames_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 45, name: "decoder_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 46, name: "playout_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 47, name: "power_efficient_decoder", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 48, name: "frames_assembled_from_multiple_packets", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 49, name: "total_assembly_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 50, name: "retransmitted_packets_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 51, name: "retransmitted_bytes_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 52, name: "rtx_ssrc", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 53, name: "fec_ssrc", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InboundRtpStreamStats {
    return new InboundRtpStreamStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InboundRtpStreamStats {
    return new InboundRtpStreamStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InboundRtpStreamStats {
    return new InboundRtpStreamStats().fromJsonString(jsonString, options);
  }

  static equals(a: InboundRtpStreamStats | PlainMessage<InboundRtpStreamStats> | undefined, b: InboundRtpStreamStats | PlainMessage<InboundRtpStreamStats> | undefined): boolean {
    return proto3.util.equals(InboundRtpStreamStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.SentRtpStreamStats
 */
export class SentRtpStreamStats extends Message<SentRtpStreamStats> {
  /**
   * @generated from field: uint64 packets_sent = 1;
   */
  packetsSent = protoInt64.zero;

  /**
   * @generated from field: uint64 bytes_sent = 2;
   */
  bytesSent = protoInt64.zero;

  constructor(data?: PartialMessage<SentRtpStreamStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.SentRtpStreamStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packets_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "bytes_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SentRtpStreamStats {
    return new SentRtpStreamStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SentRtpStreamStats {
    return new SentRtpStreamStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SentRtpStreamStats {
    return new SentRtpStreamStats().fromJsonString(jsonString, options);
  }

  static equals(a: SentRtpStreamStats | PlainMessage<SentRtpStreamStats> | undefined, b: SentRtpStreamStats | PlainMessage<SentRtpStreamStats> | undefined): boolean {
    return proto3.util.equals(SentRtpStreamStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.OutboundRtpStreamStats
 */
export class OutboundRtpStreamStats extends Message<OutboundRtpStreamStats> {
  /**
   * @generated from field: string mid = 1;
   */
  mid = "";

  /**
   * @generated from field: string media_source_id = 2;
   */
  mediaSourceId = "";

  /**
   * @generated from field: string remote_id = 3;
   */
  remoteId = "";

  /**
   * @generated from field: string rid = 4;
   */
  rid = "";

  /**
   * @generated from field: uint64 header_bytes_sent = 5;
   */
  headerBytesSent = protoInt64.zero;

  /**
   * @generated from field: uint64 retransmitted_packets_sent = 6;
   */
  retransmittedPacketsSent = protoInt64.zero;

  /**
   * @generated from field: uint64 retransmitted_bytes_sent = 7;
   */
  retransmittedBytesSent = protoInt64.zero;

  /**
   * @generated from field: uint32 rtx_ssrc = 8;
   */
  rtxSsrc = 0;

  /**
   * @generated from field: double target_bitrate = 9;
   */
  targetBitrate = 0;

  /**
   * @generated from field: uint64 total_encoded_bytes_target = 10;
   */
  totalEncodedBytesTarget = protoInt64.zero;

  /**
   * @generated from field: uint32 frame_width = 11;
   */
  frameWidth = 0;

  /**
   * @generated from field: uint32 frame_height = 12;
   */
  frameHeight = 0;

  /**
   * @generated from field: double frames_per_second = 13;
   */
  framesPerSecond = 0;

  /**
   * @generated from field: uint32 frames_sent = 14;
   */
  framesSent = 0;

  /**
   * @generated from field: uint32 huge_frames_sent = 15;
   */
  hugeFramesSent = 0;

  /**
   * @generated from field: uint32 frames_encoded = 16;
   */
  framesEncoded = 0;

  /**
   * @generated from field: uint32 key_frames_encoded = 17;
   */
  keyFramesEncoded = 0;

  /**
   * @generated from field: uint64 qp_sum = 18;
   */
  qpSum = protoInt64.zero;

  /**
   * @generated from field: double total_encode_time = 19;
   */
  totalEncodeTime = 0;

  /**
   * @generated from field: double total_packet_send_delay = 20;
   */
  totalPacketSendDelay = 0;

  /**
   * @generated from field: livekit.proto.QualityLimitationReason quality_limitation_reason = 21;
   */
  qualityLimitationReason = QualityLimitationReason.LIMITATION_NONE;

  /**
   * @generated from field: map<string, double> quality_limitation_durations = 22;
   */
  qualityLimitationDurations: { [key: string]: number } = {};

  /**
   * @generated from field: uint32 quality_limitation_resolution_changes = 23;
   */
  qualityLimitationResolutionChanges = 0;

  /**
   * @generated from field: uint32 nack_count = 24;
   */
  nackCount = 0;

  /**
   * @generated from field: uint32 fir_count = 25;
   */
  firCount = 0;

  /**
   * @generated from field: uint32 pli_count = 26;
   */
  pliCount = 0;

  /**
   * @generated from field: string encoder_implementation = 27;
   */
  encoderImplementation = "";

  /**
   * @generated from field: bool power_efficient_encoder = 28;
   */
  powerEfficientEncoder = false;

  /**
   * @generated from field: bool active = 29;
   */
  active = false;

  /**
   * @generated from field: string scalibility_mode = 30;
   */
  scalibilityMode = "";

  constructor(data?: PartialMessage<OutboundRtpStreamStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OutboundRtpStreamStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "media_source_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "remote_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "header_bytes_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "retransmitted_packets_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "retransmitted_bytes_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "rtx_ssrc", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "target_bitrate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 10, name: "total_encoded_bytes_target", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "frame_width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "frame_height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "frames_per_second", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "frames_sent", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "huge_frames_sent", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "frames_encoded", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 17, name: "key_frames_encoded", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 18, name: "qp_sum", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "total_encode_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 20, name: "total_packet_send_delay", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 21, name: "quality_limitation_reason", kind: "enum", T: proto3.getEnumType(QualityLimitationReason) },
    { no: 22, name: "quality_limitation_durations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
    { no: 23, name: "quality_limitation_resolution_changes", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 24, name: "nack_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 25, name: "fir_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 26, name: "pli_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 27, name: "encoder_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "power_efficient_encoder", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 29, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 30, name: "scalibility_mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutboundRtpStreamStats {
    return new OutboundRtpStreamStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutboundRtpStreamStats {
    return new OutboundRtpStreamStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutboundRtpStreamStats {
    return new OutboundRtpStreamStats().fromJsonString(jsonString, options);
  }

  static equals(a: OutboundRtpStreamStats | PlainMessage<OutboundRtpStreamStats> | undefined, b: OutboundRtpStreamStats | PlainMessage<OutboundRtpStreamStats> | undefined): boolean {
    return proto3.util.equals(OutboundRtpStreamStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.RemoteInboundRtpStreamStats
 */
export class RemoteInboundRtpStreamStats extends Message<RemoteInboundRtpStreamStats> {
  /**
   * @generated from field: string local_id = 1;
   */
  localId = "";

  /**
   * @generated from field: double round_trip_time = 2;
   */
  roundTripTime = 0;

  /**
   * @generated from field: double total_round_trip_time = 3;
   */
  totalRoundTripTime = 0;

  /**
   * @generated from field: double fraction_lost = 4;
   */
  fractionLost = 0;

  /**
   * @generated from field: uint64 round_trip_time_measurements = 5;
   */
  roundTripTimeMeasurements = protoInt64.zero;

  constructor(data?: PartialMessage<RemoteInboundRtpStreamStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RemoteInboundRtpStreamStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "round_trip_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "total_round_trip_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "fraction_lost", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "round_trip_time_measurements", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteInboundRtpStreamStats {
    return new RemoteInboundRtpStreamStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteInboundRtpStreamStats {
    return new RemoteInboundRtpStreamStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteInboundRtpStreamStats {
    return new RemoteInboundRtpStreamStats().fromJsonString(jsonString, options);
  }

  static equals(a: RemoteInboundRtpStreamStats | PlainMessage<RemoteInboundRtpStreamStats> | undefined, b: RemoteInboundRtpStreamStats | PlainMessage<RemoteInboundRtpStreamStats> | undefined): boolean {
    return proto3.util.equals(RemoteInboundRtpStreamStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.RemoteOutboundRtpStreamStats
 */
export class RemoteOutboundRtpStreamStats extends Message<RemoteOutboundRtpStreamStats> {
  /**
   * @generated from field: string local_id = 1;
   */
  localId = "";

  /**
   * @generated from field: double remote_timestamp = 2;
   */
  remoteTimestamp = 0;

  /**
   * @generated from field: uint64 reports_sent = 3;
   */
  reportsSent = protoInt64.zero;

  /**
   * @generated from field: double round_trip_time = 4;
   */
  roundTripTime = 0;

  /**
   * @generated from field: double total_round_trip_time = 5;
   */
  totalRoundTripTime = 0;

  /**
   * @generated from field: uint64 round_trip_time_measurements = 6;
   */
  roundTripTimeMeasurements = protoInt64.zero;

  constructor(data?: PartialMessage<RemoteOutboundRtpStreamStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.RemoteOutboundRtpStreamStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "local_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "remote_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "reports_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "round_trip_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "total_round_trip_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "round_trip_time_measurements", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteOutboundRtpStreamStats {
    return new RemoteOutboundRtpStreamStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteOutboundRtpStreamStats {
    return new RemoteOutboundRtpStreamStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteOutboundRtpStreamStats {
    return new RemoteOutboundRtpStreamStats().fromJsonString(jsonString, options);
  }

  static equals(a: RemoteOutboundRtpStreamStats | PlainMessage<RemoteOutboundRtpStreamStats> | undefined, b: RemoteOutboundRtpStreamStats | PlainMessage<RemoteOutboundRtpStreamStats> | undefined): boolean {
    return proto3.util.equals(RemoteOutboundRtpStreamStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.MediaSourceStats
 */
export class MediaSourceStats extends Message<MediaSourceStats> {
  /**
   * @generated from field: string track_identifier = 1;
   */
  trackIdentifier = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  constructor(data?: PartialMessage<MediaSourceStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.MediaSourceStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "track_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaSourceStats {
    return new MediaSourceStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaSourceStats {
    return new MediaSourceStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaSourceStats {
    return new MediaSourceStats().fromJsonString(jsonString, options);
  }

  static equals(a: MediaSourceStats | PlainMessage<MediaSourceStats> | undefined, b: MediaSourceStats | PlainMessage<MediaSourceStats> | undefined): boolean {
    return proto3.util.equals(MediaSourceStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioSourceStats
 */
export class AudioSourceStats extends Message<AudioSourceStats> {
  /**
   * @generated from field: double audio_level = 1;
   */
  audioLevel = 0;

  /**
   * @generated from field: double total_audio_energy = 2;
   */
  totalAudioEnergy = 0;

  /**
   * @generated from field: double total_samples_duration = 3;
   */
  totalSamplesDuration = 0;

  /**
   * @generated from field: double echo_return_loss = 4;
   */
  echoReturnLoss = 0;

  /**
   * @generated from field: double echo_return_loss_enhancement = 5;
   */
  echoReturnLossEnhancement = 0;

  /**
   * @generated from field: double dropped_samples_duration = 6;
   */
  droppedSamplesDuration = 0;

  /**
   * @generated from field: uint32 dropped_samples_events = 7;
   */
  droppedSamplesEvents = 0;

  /**
   * @generated from field: double total_capture_delay = 8;
   */
  totalCaptureDelay = 0;

  /**
   * @generated from field: uint64 total_samples_captured = 9;
   */
  totalSamplesCaptured = protoInt64.zero;

  constructor(data?: PartialMessage<AudioSourceStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioSourceStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "audio_level", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "total_audio_energy", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "total_samples_duration", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "echo_return_loss", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "echo_return_loss_enhancement", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "dropped_samples_duration", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "dropped_samples_events", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "total_capture_delay", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "total_samples_captured", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioSourceStats {
    return new AudioSourceStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioSourceStats {
    return new AudioSourceStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioSourceStats {
    return new AudioSourceStats().fromJsonString(jsonString, options);
  }

  static equals(a: AudioSourceStats | PlainMessage<AudioSourceStats> | undefined, b: AudioSourceStats | PlainMessage<AudioSourceStats> | undefined): boolean {
    return proto3.util.equals(AudioSourceStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoSourceStats
 */
export class VideoSourceStats extends Message<VideoSourceStats> {
  /**
   * @generated from field: uint32 width = 1;
   */
  width = 0;

  /**
   * @generated from field: uint32 height = 2;
   */
  height = 0;

  /**
   * @generated from field: uint32 frames = 3;
   */
  frames = 0;

  /**
   * @generated from field: double frames_per_second = 4;
   */
  framesPerSecond = 0;

  constructor(data?: PartialMessage<VideoSourceStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.VideoSourceStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "frames", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "frames_per_second", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoSourceStats {
    return new VideoSourceStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoSourceStats {
    return new VideoSourceStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoSourceStats {
    return new VideoSourceStats().fromJsonString(jsonString, options);
  }

  static equals(a: VideoSourceStats | PlainMessage<VideoSourceStats> | undefined, b: VideoSourceStats | PlainMessage<VideoSourceStats> | undefined): boolean {
    return proto3.util.equals(VideoSourceStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.AudioPlayoutStats
 */
export class AudioPlayoutStats extends Message<AudioPlayoutStats> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: double synthesized_samples_duration = 2;
   */
  synthesizedSamplesDuration = 0;

  /**
   * @generated from field: uint32 synthesized_samples_events = 3;
   */
  synthesizedSamplesEvents = 0;

  /**
   * @generated from field: double total_samples_duration = 4;
   */
  totalSamplesDuration = 0;

  /**
   * @generated from field: double total_playout_delay = 5;
   */
  totalPlayoutDelay = 0;

  /**
   * @generated from field: uint64 total_samples_count = 6;
   */
  totalSamplesCount = protoInt64.zero;

  constructor(data?: PartialMessage<AudioPlayoutStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.AudioPlayoutStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "synthesized_samples_duration", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "synthesized_samples_events", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "total_samples_duration", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "total_playout_delay", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "total_samples_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioPlayoutStats {
    return new AudioPlayoutStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioPlayoutStats {
    return new AudioPlayoutStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioPlayoutStats {
    return new AudioPlayoutStats().fromJsonString(jsonString, options);
  }

  static equals(a: AudioPlayoutStats | PlainMessage<AudioPlayoutStats> | undefined, b: AudioPlayoutStats | PlainMessage<AudioPlayoutStats> | undefined): boolean {
    return proto3.util.equals(AudioPlayoutStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.PeerConnectionStats
 */
export class PeerConnectionStats extends Message<PeerConnectionStats> {
  /**
   * @generated from field: uint32 data_channels_opened = 1;
   */
  dataChannelsOpened = 0;

  /**
   * @generated from field: uint32 data_channels_closed = 2;
   */
  dataChannelsClosed = 0;

  constructor(data?: PartialMessage<PeerConnectionStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.PeerConnectionStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_channels_opened", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "data_channels_closed", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeerConnectionStats {
    return new PeerConnectionStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeerConnectionStats {
    return new PeerConnectionStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeerConnectionStats {
    return new PeerConnectionStats().fromJsonString(jsonString, options);
  }

  static equals(a: PeerConnectionStats | PlainMessage<PeerConnectionStats> | undefined, b: PeerConnectionStats | PlainMessage<PeerConnectionStats> | undefined): boolean {
    return proto3.util.equals(PeerConnectionStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.DataChannelStats
 */
export class DataChannelStats extends Message<DataChannelStats> {
  /**
   * @generated from field: string label = 1;
   */
  label = "";

  /**
   * @generated from field: string protocol = 2;
   */
  protocol = "";

  /**
   * @generated from field: int32 data_channel_identifier = 3;
   */
  dataChannelIdentifier = 0;

  /**
   * @generated from field: optional livekit.proto.DataChannelState state = 4;
   */
  state?: DataChannelState;

  /**
   * @generated from field: uint32 messages_sent = 5;
   */
  messagesSent = 0;

  /**
   * @generated from field: uint64 bytes_sent = 6;
   */
  bytesSent = protoInt64.zero;

  /**
   * @generated from field: uint32 messages_received = 7;
   */
  messagesReceived = 0;

  /**
   * @generated from field: uint64 bytes_received = 8;
   */
  bytesReceived = protoInt64.zero;

  constructor(data?: PartialMessage<DataChannelStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.DataChannelStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data_channel_identifier", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(DataChannelState), opt: true },
    { no: 5, name: "messages_sent", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "bytes_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "messages_received", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "bytes_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataChannelStats {
    return new DataChannelStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataChannelStats {
    return new DataChannelStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataChannelStats {
    return new DataChannelStats().fromJsonString(jsonString, options);
  }

  static equals(a: DataChannelStats | PlainMessage<DataChannelStats> | undefined, b: DataChannelStats | PlainMessage<DataChannelStats> | undefined): boolean {
    return proto3.util.equals(DataChannelStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.TransportStats
 */
export class TransportStats extends Message<TransportStats> {
  /**
   * @generated from field: uint64 packets_sent = 1;
   */
  packetsSent = protoInt64.zero;

  /**
   * @generated from field: uint64 packets_received = 2;
   */
  packetsReceived = protoInt64.zero;

  /**
   * @generated from field: uint64 bytes_sent = 3;
   */
  bytesSent = protoInt64.zero;

  /**
   * @generated from field: uint64 bytes_received = 4;
   */
  bytesReceived = protoInt64.zero;

  /**
   * @generated from field: livekit.proto.IceRole ice_role = 5;
   */
  iceRole = IceRole.ICE_UNKNOWN;

  /**
   * @generated from field: string ice_local_username_fragment = 6;
   */
  iceLocalUsernameFragment = "";

  /**
   * @generated from field: optional livekit.proto.DtlsTransportState dtls_state = 7;
   */
  dtlsState?: DtlsTransportState;

  /**
   * @generated from field: optional livekit.proto.IceTransportState ice_state = 8;
   */
  iceState?: IceTransportState;

  /**
   * @generated from field: string selected_candidate_pair_id = 9;
   */
  selectedCandidatePairId = "";

  /**
   * @generated from field: string local_certificate_id = 10;
   */
  localCertificateId = "";

  /**
   * @generated from field: string remote_certificate_id = 11;
   */
  remoteCertificateId = "";

  /**
   * @generated from field: string tls_version = 12;
   */
  tlsVersion = "";

  /**
   * @generated from field: string dtls_cipher = 13;
   */
  dtlsCipher = "";

  /**
   * @generated from field: livekit.proto.DtlsRole dtls_role = 14;
   */
  dtlsRole = DtlsRole.DTLS_CLIENT;

  /**
   * @generated from field: string srtp_cipher = 15;
   */
  srtpCipher = "";

  /**
   * @generated from field: uint32 selected_candidate_pair_changes = 16;
   */
  selectedCandidatePairChanges = 0;

  constructor(data?: PartialMessage<TransportStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TransportStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "packets_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "packets_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "bytes_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "bytes_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "ice_role", kind: "enum", T: proto3.getEnumType(IceRole) },
    { no: 6, name: "ice_local_username_fragment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "dtls_state", kind: "enum", T: proto3.getEnumType(DtlsTransportState), opt: true },
    { no: 8, name: "ice_state", kind: "enum", T: proto3.getEnumType(IceTransportState), opt: true },
    { no: 9, name: "selected_candidate_pair_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "local_certificate_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "remote_certificate_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "tls_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "dtls_cipher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "dtls_role", kind: "enum", T: proto3.getEnumType(DtlsRole) },
    { no: 15, name: "srtp_cipher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "selected_candidate_pair_changes", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransportStats {
    return new TransportStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransportStats {
    return new TransportStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransportStats {
    return new TransportStats().fromJsonString(jsonString, options);
  }

  static equals(a: TransportStats | PlainMessage<TransportStats> | undefined, b: TransportStats | PlainMessage<TransportStats> | undefined): boolean {
    return proto3.util.equals(TransportStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.CandidatePairStats
 */
export class CandidatePairStats extends Message<CandidatePairStats> {
  /**
   * @generated from field: string transport_id = 1;
   */
  transportId = "";

  /**
   * @generated from field: string local_candidate_id = 2;
   */
  localCandidateId = "";

  /**
   * @generated from field: string remote_candidate_id = 3;
   */
  remoteCandidateId = "";

  /**
   * @generated from field: optional livekit.proto.IceCandidatePairState state = 4;
   */
  state?: IceCandidatePairState;

  /**
   * @generated from field: bool nominated = 5;
   */
  nominated = false;

  /**
   * @generated from field: uint64 packets_sent = 6;
   */
  packetsSent = protoInt64.zero;

  /**
   * @generated from field: uint64 packets_received = 7;
   */
  packetsReceived = protoInt64.zero;

  /**
   * @generated from field: uint64 bytes_sent = 8;
   */
  bytesSent = protoInt64.zero;

  /**
   * @generated from field: uint64 bytes_received = 9;
   */
  bytesReceived = protoInt64.zero;

  /**
   * @generated from field: double last_packet_sent_timestamp = 10;
   */
  lastPacketSentTimestamp = 0;

  /**
   * @generated from field: double last_packet_received_timestamp = 11;
   */
  lastPacketReceivedTimestamp = 0;

  /**
   * @generated from field: double total_round_trip_time = 12;
   */
  totalRoundTripTime = 0;

  /**
   * @generated from field: double current_round_trip_time = 13;
   */
  currentRoundTripTime = 0;

  /**
   * @generated from field: double available_outgoing_bitrate = 14;
   */
  availableOutgoingBitrate = 0;

  /**
   * @generated from field: double available_incoming_bitrate = 15;
   */
  availableIncomingBitrate = 0;

  /**
   * @generated from field: uint64 requests_received = 16;
   */
  requestsReceived = protoInt64.zero;

  /**
   * @generated from field: uint64 requests_sent = 17;
   */
  requestsSent = protoInt64.zero;

  /**
   * @generated from field: uint64 responses_received = 18;
   */
  responsesReceived = protoInt64.zero;

  /**
   * @generated from field: uint64 responses_sent = 19;
   */
  responsesSent = protoInt64.zero;

  /**
   * @generated from field: uint64 consent_requests_sent = 20;
   */
  consentRequestsSent = protoInt64.zero;

  /**
   * @generated from field: uint32 packets_discarded_on_send = 21;
   */
  packetsDiscardedOnSend = 0;

  /**
   * @generated from field: uint64 bytes_discarded_on_send = 22;
   */
  bytesDiscardedOnSend = protoInt64.zero;

  constructor(data?: PartialMessage<CandidatePairStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CandidatePairStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transport_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "local_candidate_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "remote_candidate_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(IceCandidatePairState), opt: true },
    { no: 5, name: "nominated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "packets_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "packets_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "bytes_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "bytes_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "last_packet_sent_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 11, name: "last_packet_received_timestamp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "total_round_trip_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "current_round_trip_time", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "available_outgoing_bitrate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 15, name: "available_incoming_bitrate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 16, name: "requests_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 17, name: "requests_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 18, name: "responses_received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 19, name: "responses_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 20, name: "consent_requests_sent", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "packets_discarded_on_send", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 22, name: "bytes_discarded_on_send", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CandidatePairStats {
    return new CandidatePairStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CandidatePairStats {
    return new CandidatePairStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CandidatePairStats {
    return new CandidatePairStats().fromJsonString(jsonString, options);
  }

  static equals(a: CandidatePairStats | PlainMessage<CandidatePairStats> | undefined, b: CandidatePairStats | PlainMessage<CandidatePairStats> | undefined): boolean {
    return proto3.util.equals(CandidatePairStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.IceCandidateStats
 */
export class IceCandidateStats extends Message<IceCandidateStats> {
  /**
   * @generated from field: string transport_id = 1;
   */
  transportId = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: int32 port = 3;
   */
  port = 0;

  /**
   * @generated from field: string protocol = 4;
   */
  protocol = "";

  /**
   * @generated from field: optional livekit.proto.IceCandidateType candidate_type = 5;
   */
  candidateType?: IceCandidateType;

  /**
   * @generated from field: int32 priority = 6;
   */
  priority = 0;

  /**
   * @generated from field: string url = 7;
   */
  url = "";

  /**
   * @generated from field: optional livekit.proto.IceServerTransportProtocol relay_protocol = 8;
   */
  relayProtocol?: IceServerTransportProtocol;

  /**
   * @generated from field: string foundation = 9;
   */
  foundation = "";

  /**
   * @generated from field: string related_address = 10;
   */
  relatedAddress = "";

  /**
   * @generated from field: int32 related_port = 11;
   */
  relatedPort = 0;

  /**
   * @generated from field: string username_fragment = 12;
   */
  usernameFragment = "";

  /**
   * @generated from field: optional livekit.proto.IceTcpCandidateType tcp_type = 13;
   */
  tcpType?: IceTcpCandidateType;

  constructor(data?: PartialMessage<IceCandidateStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.IceCandidateStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transport_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "candidate_type", kind: "enum", T: proto3.getEnumType(IceCandidateType), opt: true },
    { no: 6, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "relay_protocol", kind: "enum", T: proto3.getEnumType(IceServerTransportProtocol), opt: true },
    { no: 9, name: "foundation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "related_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "related_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 12, name: "username_fragment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "tcp_type", kind: "enum", T: proto3.getEnumType(IceTcpCandidateType), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IceCandidateStats {
    return new IceCandidateStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IceCandidateStats {
    return new IceCandidateStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IceCandidateStats {
    return new IceCandidateStats().fromJsonString(jsonString, options);
  }

  static equals(a: IceCandidateStats | PlainMessage<IceCandidateStats> | undefined, b: IceCandidateStats | PlainMessage<IceCandidateStats> | undefined): boolean {
    return proto3.util.equals(IceCandidateStats, a, b);
  }
}

/**
 * @generated from message livekit.proto.CertificateStats
 */
export class CertificateStats extends Message<CertificateStats> {
  /**
   * @generated from field: string fingerprint = 1;
   */
  fingerprint = "";

  /**
   * @generated from field: string fingerprint_algorithm = 2;
   */
  fingerprintAlgorithm = "";

  /**
   * @generated from field: string base64_certificate = 3;
   */
  base64Certificate = "";

  /**
   * @generated from field: string issuer_certificate_id = 4;
   */
  issuerCertificateId = "";

  constructor(data?: PartialMessage<CertificateStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CertificateStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fingerprint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fingerprint_algorithm", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "base64_certificate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "issuer_certificate_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CertificateStats {
    return new CertificateStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CertificateStats {
    return new CertificateStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CertificateStats {
    return new CertificateStats().fromJsonString(jsonString, options);
  }

  static equals(a: CertificateStats | PlainMessage<CertificateStats> | undefined, b: CertificateStats | PlainMessage<CertificateStats> | undefined): boolean {
    return proto3.util.equals(CertificateStats, a, b);
  }
}

