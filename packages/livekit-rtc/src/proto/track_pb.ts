// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file track.proto (package livekit.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { RtcStats } from "./stats_pb.js";
import { EncryptionType } from "./e2ee_pb.js";
import { FfiOwnedHandle } from "./handle_pb.js";

/**
 * @generated from enum livekit.proto.TrackKind
 */
export enum TrackKind {
  /**
   * @generated from enum value: KIND_UNKNOWN = 0;
   */
  KIND_UNKNOWN = 0,

  /**
   * @generated from enum value: KIND_AUDIO = 1;
   */
  KIND_AUDIO = 1,

  /**
   * @generated from enum value: KIND_VIDEO = 2;
   */
  KIND_VIDEO = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TrackKind)
proto3.util.setEnumType(TrackKind, "livekit.proto.TrackKind", [
  { no: 0, name: "KIND_UNKNOWN" },
  { no: 1, name: "KIND_AUDIO" },
  { no: 2, name: "KIND_VIDEO" },
]);

/**
 * @generated from enum livekit.proto.TrackSource
 */
export enum TrackSource {
  /**
   * @generated from enum value: SOURCE_UNKNOWN = 0;
   */
  SOURCE_UNKNOWN = 0,

  /**
   * @generated from enum value: SOURCE_CAMERA = 1;
   */
  SOURCE_CAMERA = 1,

  /**
   * @generated from enum value: SOURCE_MICROPHONE = 2;
   */
  SOURCE_MICROPHONE = 2,

  /**
   * @generated from enum value: SOURCE_SCREENSHARE = 3;
   */
  SOURCE_SCREENSHARE = 3,

  /**
   * @generated from enum value: SOURCE_SCREENSHARE_AUDIO = 4;
   */
  SOURCE_SCREENSHARE_AUDIO = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(TrackSource)
proto3.util.setEnumType(TrackSource, "livekit.proto.TrackSource", [
  { no: 0, name: "SOURCE_UNKNOWN" },
  { no: 1, name: "SOURCE_CAMERA" },
  { no: 2, name: "SOURCE_MICROPHONE" },
  { no: 3, name: "SOURCE_SCREENSHARE" },
  { no: 4, name: "SOURCE_SCREENSHARE_AUDIO" },
]);

/**
 * @generated from enum livekit.proto.StreamState
 */
export enum StreamState {
  /**
   * @generated from enum value: STATE_UNKNOWN = 0;
   */
  STATE_UNKNOWN = 0,

  /**
   * @generated from enum value: STATE_ACTIVE = 1;
   */
  STATE_ACTIVE = 1,

  /**
   * @generated from enum value: STATE_PAUSED = 2;
   */
  STATE_PAUSED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(StreamState)
proto3.util.setEnumType(StreamState, "livekit.proto.StreamState", [
  { no: 0, name: "STATE_UNKNOWN" },
  { no: 1, name: "STATE_ACTIVE" },
  { no: 2, name: "STATE_PAUSED" },
]);

/**
 * Create a new VideoTrack from a VideoSource
 *
 * @generated from message livekit.proto.CreateVideoTrackRequest
 */
export class CreateVideoTrackRequest extends Message<CreateVideoTrackRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: uint64 source_handle = 2;
   */
  sourceHandle = protoInt64.zero;

  constructor(data?: PartialMessage<CreateVideoTrackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CreateVideoTrackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVideoTrackRequest {
    return new CreateVideoTrackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVideoTrackRequest {
    return new CreateVideoTrackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVideoTrackRequest {
    return new CreateVideoTrackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVideoTrackRequest | PlainMessage<CreateVideoTrackRequest> | undefined, b: CreateVideoTrackRequest | PlainMessage<CreateVideoTrackRequest> | undefined): boolean {
    return proto3.util.equals(CreateVideoTrackRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.CreateVideoTrackResponse
 */
export class CreateVideoTrackResponse extends Message<CreateVideoTrackResponse> {
  /**
   * @generated from field: livekit.proto.OwnedTrack track = 1;
   */
  track?: OwnedTrack;

  constructor(data?: PartialMessage<CreateVideoTrackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CreateVideoTrackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "track", kind: "message", T: OwnedTrack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateVideoTrackResponse {
    return new CreateVideoTrackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateVideoTrackResponse {
    return new CreateVideoTrackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateVideoTrackResponse {
    return new CreateVideoTrackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateVideoTrackResponse | PlainMessage<CreateVideoTrackResponse> | undefined, b: CreateVideoTrackResponse | PlainMessage<CreateVideoTrackResponse> | undefined): boolean {
    return proto3.util.equals(CreateVideoTrackResponse, a, b);
  }
}

/**
 * Create a new AudioTrack from a AudioSource
 *
 * @generated from message livekit.proto.CreateAudioTrackRequest
 */
export class CreateAudioTrackRequest extends Message<CreateAudioTrackRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: uint64 source_handle = 2;
   */
  sourceHandle = protoInt64.zero;

  constructor(data?: PartialMessage<CreateAudioTrackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CreateAudioTrackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAudioTrackRequest {
    return new CreateAudioTrackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAudioTrackRequest {
    return new CreateAudioTrackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAudioTrackRequest {
    return new CreateAudioTrackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAudioTrackRequest | PlainMessage<CreateAudioTrackRequest> | undefined, b: CreateAudioTrackRequest | PlainMessage<CreateAudioTrackRequest> | undefined): boolean {
    return proto3.util.equals(CreateAudioTrackRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.CreateAudioTrackResponse
 */
export class CreateAudioTrackResponse extends Message<CreateAudioTrackResponse> {
  /**
   * @generated from field: livekit.proto.OwnedTrack track = 1;
   */
  track?: OwnedTrack;

  constructor(data?: PartialMessage<CreateAudioTrackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.CreateAudioTrackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "track", kind: "message", T: OwnedTrack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAudioTrackResponse {
    return new CreateAudioTrackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAudioTrackResponse {
    return new CreateAudioTrackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAudioTrackResponse {
    return new CreateAudioTrackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAudioTrackResponse | PlainMessage<CreateAudioTrackResponse> | undefined, b: CreateAudioTrackResponse | PlainMessage<CreateAudioTrackResponse> | undefined): boolean {
    return proto3.util.equals(CreateAudioTrackResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.GetStatsRequest
 */
export class GetStatsRequest extends Message<GetStatsRequest> {
  /**
   * @generated from field: uint64 track_handle = 1;
   */
  trackHandle = protoInt64.zero;

  constructor(data?: PartialMessage<GetStatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.GetStatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "track_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatsRequest {
    return new GetStatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatsRequest {
    return new GetStatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatsRequest {
    return new GetStatsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatsRequest | PlainMessage<GetStatsRequest> | undefined, b: GetStatsRequest | PlainMessage<GetStatsRequest> | undefined): boolean {
    return proto3.util.equals(GetStatsRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.GetStatsResponse
 */
export class GetStatsResponse extends Message<GetStatsResponse> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  constructor(data?: PartialMessage<GetStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.GetStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatsResponse {
    return new GetStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatsResponse {
    return new GetStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatsResponse {
    return new GetStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatsResponse | PlainMessage<GetStatsResponse> | undefined, b: GetStatsResponse | PlainMessage<GetStatsResponse> | undefined): boolean {
    return proto3.util.equals(GetStatsResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.GetStatsCallback
 */
export class GetStatsCallback extends Message<GetStatsCallback> {
  /**
   * @generated from field: uint64 async_id = 1;
   */
  asyncId = protoInt64.zero;

  /**
   * @generated from field: optional string error = 2;
   */
  error?: string;

  /**
   * @generated from field: repeated livekit.proto.RtcStats stats = 3;
   */
  stats: RtcStats[] = [];

  constructor(data?: PartialMessage<GetStatsCallback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.GetStatsCallback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "async_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "stats", kind: "message", T: RtcStats, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStatsCallback {
    return new GetStatsCallback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStatsCallback {
    return new GetStatsCallback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStatsCallback {
    return new GetStatsCallback().fromJsonString(jsonString, options);
  }

  static equals(a: GetStatsCallback | PlainMessage<GetStatsCallback> | undefined, b: GetStatsCallback | PlainMessage<GetStatsCallback> | undefined): boolean {
    return proto3.util.equals(GetStatsCallback, a, b);
  }
}

/**
 * @generated from message livekit.proto.TrackEvent
 */
export class TrackEvent extends Message<TrackEvent> {
  constructor(data?: PartialMessage<TrackEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackEvent {
    return new TrackEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackEvent {
    return new TrackEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackEvent {
    return new TrackEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TrackEvent | PlainMessage<TrackEvent> | undefined, b: TrackEvent | PlainMessage<TrackEvent> | undefined): boolean {
    return proto3.util.equals(TrackEvent, a, b);
  }
}

/**
 * @generated from message livekit.proto.TrackPublicationInfo
 */
export class TrackPublicationInfo extends Message<TrackPublicationInfo> {
  /**
   * @generated from field: string sid = 1;
   */
  sid = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: livekit.proto.TrackKind kind = 3;
   */
  kind = TrackKind.KIND_UNKNOWN;

  /**
   * @generated from field: livekit.proto.TrackSource source = 4;
   */
  source = TrackSource.SOURCE_UNKNOWN;

  /**
   * @generated from field: bool simulcasted = 5;
   */
  simulcasted = false;

  /**
   * @generated from field: uint32 width = 6;
   */
  width = 0;

  /**
   * @generated from field: uint32 height = 7;
   */
  height = 0;

  /**
   * @generated from field: string mime_type = 8;
   */
  mimeType = "";

  /**
   * @generated from field: bool muted = 9;
   */
  muted = false;

  /**
   * @generated from field: bool remote = 10;
   */
  remote = false;

  /**
   * @generated from field: livekit.proto.EncryptionType encryption_type = 11;
   */
  encryptionType = EncryptionType.NONE;

  constructor(data?: PartialMessage<TrackPublicationInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackPublicationInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kind", kind: "enum", T: proto3.getEnumType(TrackKind) },
    { no: 4, name: "source", kind: "enum", T: proto3.getEnumType(TrackSource) },
    { no: 5, name: "simulcasted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "remote", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "encryption_type", kind: "enum", T: proto3.getEnumType(EncryptionType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackPublicationInfo {
    return new TrackPublicationInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackPublicationInfo {
    return new TrackPublicationInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackPublicationInfo {
    return new TrackPublicationInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TrackPublicationInfo | PlainMessage<TrackPublicationInfo> | undefined, b: TrackPublicationInfo | PlainMessage<TrackPublicationInfo> | undefined): boolean {
    return proto3.util.equals(TrackPublicationInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedTrackPublication
 */
export class OwnedTrackPublication extends Message<OwnedTrackPublication> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.TrackPublicationInfo info = 2;
   */
  info?: TrackPublicationInfo;

  constructor(data?: PartialMessage<OwnedTrackPublication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedTrackPublication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: TrackPublicationInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedTrackPublication {
    return new OwnedTrackPublication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedTrackPublication {
    return new OwnedTrackPublication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedTrackPublication {
    return new OwnedTrackPublication().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedTrackPublication | PlainMessage<OwnedTrackPublication> | undefined, b: OwnedTrackPublication | PlainMessage<OwnedTrackPublication> | undefined): boolean {
    return proto3.util.equals(OwnedTrackPublication, a, b);
  }
}

/**
 * @generated from message livekit.proto.TrackInfo
 */
export class TrackInfo extends Message<TrackInfo> {
  /**
   * @generated from field: string sid = 1;
   */
  sid = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: livekit.proto.TrackKind kind = 3;
   */
  kind = TrackKind.KIND_UNKNOWN;

  /**
   * @generated from field: livekit.proto.StreamState stream_state = 4;
   */
  streamState = StreamState.STATE_UNKNOWN;

  /**
   * @generated from field: bool muted = 5;
   */
  muted = false;

  /**
   * @generated from field: bool remote = 6;
   */
  remote = false;

  constructor(data?: PartialMessage<TrackInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.TrackInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kind", kind: "enum", T: proto3.getEnumType(TrackKind) },
    { no: 4, name: "stream_state", kind: "enum", T: proto3.getEnumType(StreamState) },
    { no: 5, name: "muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "remote", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackInfo {
    return new TrackInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackInfo {
    return new TrackInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackInfo {
    return new TrackInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TrackInfo | PlainMessage<TrackInfo> | undefined, b: TrackInfo | PlainMessage<TrackInfo> | undefined): boolean {
    return proto3.util.equals(TrackInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedTrack
 */
export class OwnedTrack extends Message<OwnedTrack> {
  /**
   * @generated from field: livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: livekit.proto.TrackInfo info = 2;
   */
  info?: TrackInfo;

  constructor(data?: PartialMessage<OwnedTrack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.proto.OwnedTrack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle },
    { no: 2, name: "info", kind: "message", T: TrackInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedTrack {
    return new OwnedTrack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedTrack {
    return new OwnedTrack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedTrack {
    return new OwnedTrack().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedTrack | PlainMessage<OwnedTrack> | undefined, b: OwnedTrack | PlainMessage<OwnedTrack> | undefined): boolean {
    return proto3.util.equals(OwnedTrack, a, b);
  }
}

