// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.js"
// @generated from file video_frame.proto (package livekit.proto, syntax proto2)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto2 } from "@bufbuild/protobuf";
import { TrackSource } from "./track_pb.js";
import { FfiOwnedHandle } from "./handle_pb.js";

/**
 * @generated from enum livekit.proto.VideoCodec
 */
export enum VideoCodec {
  /**
   * @generated from enum value: VP8 = 0;
   */
  VP8 = 0,

  /**
   * @generated from enum value: H264 = 1;
   */
  H264 = 1,

  /**
   * @generated from enum value: AV1 = 2;
   */
  AV1 = 2,

  /**
   * @generated from enum value: VP9 = 3;
   */
  VP9 = 3,
}
// Retrieve enum metadata with: proto2.getEnumType(VideoCodec)
proto2.util.setEnumType(VideoCodec, "livekit.proto.VideoCodec", [
  { no: 0, name: "VP8" },
  { no: 1, name: "H264" },
  { no: 2, name: "AV1" },
  { no: 3, name: "VP9" },
]);

/**
 * @generated from enum livekit.proto.VideoRotation
 */
export enum VideoRotation {
  /**
   * @generated from enum value: VIDEO_ROTATION_0 = 0;
   */
  VIDEO_ROTATION_0 = 0,

  /**
   * @generated from enum value: VIDEO_ROTATION_90 = 1;
   */
  VIDEO_ROTATION_90 = 1,

  /**
   * @generated from enum value: VIDEO_ROTATION_180 = 2;
   */
  VIDEO_ROTATION_180 = 2,

  /**
   * @generated from enum value: VIDEO_ROTATION_270 = 3;
   */
  VIDEO_ROTATION_270 = 3,
}
// Retrieve enum metadata with: proto2.getEnumType(VideoRotation)
proto2.util.setEnumType(VideoRotation, "livekit.proto.VideoRotation", [
  { no: 0, name: "VIDEO_ROTATION_0" },
  { no: 1, name: "VIDEO_ROTATION_90" },
  { no: 2, name: "VIDEO_ROTATION_180" },
  { no: 3, name: "VIDEO_ROTATION_270" },
]);

/**
 * @generated from enum livekit.proto.VideoBufferType
 */
export enum VideoBufferType {
  /**
   * @generated from enum value: RGBA = 0;
   */
  RGBA = 0,

  /**
   * @generated from enum value: ABGR = 1;
   */
  ABGR = 1,

  /**
   * @generated from enum value: ARGB = 2;
   */
  ARGB = 2,

  /**
   * @generated from enum value: BGRA = 3;
   */
  BGRA = 3,

  /**
   * @generated from enum value: RGB24 = 4;
   */
  RGB24 = 4,

  /**
   * @generated from enum value: I420 = 5;
   */
  I420 = 5,

  /**
   * @generated from enum value: I420A = 6;
   */
  I420A = 6,

  /**
   * @generated from enum value: I422 = 7;
   */
  I422 = 7,

  /**
   * @generated from enum value: I444 = 8;
   */
  I444 = 8,

  /**
   * @generated from enum value: I010 = 9;
   */
  I010 = 9,

  /**
   * @generated from enum value: NV12 = 10;
   */
  NV12 = 10,
}
// Retrieve enum metadata with: proto2.getEnumType(VideoBufferType)
proto2.util.setEnumType(VideoBufferType, "livekit.proto.VideoBufferType", [
  { no: 0, name: "RGBA" },
  { no: 1, name: "ABGR" },
  { no: 2, name: "ARGB" },
  { no: 3, name: "BGRA" },
  { no: 4, name: "RGB24" },
  { no: 5, name: "I420" },
  { no: 6, name: "I420A" },
  { no: 7, name: "I422" },
  { no: 8, name: "I444" },
  { no: 9, name: "I010" },
  { no: 10, name: "NV12" },
]);

/**
 * @generated from enum livekit.proto.VideoStreamType
 */
export enum VideoStreamType {
  /**
   * @generated from enum value: VIDEO_STREAM_NATIVE = 0;
   */
  VIDEO_STREAM_NATIVE = 0,

  /**
   * @generated from enum value: VIDEO_STREAM_WEBGL = 1;
   */
  VIDEO_STREAM_WEBGL = 1,

  /**
   * @generated from enum value: VIDEO_STREAM_HTML = 2;
   */
  VIDEO_STREAM_HTML = 2,
}
// Retrieve enum metadata with: proto2.getEnumType(VideoStreamType)
proto2.util.setEnumType(VideoStreamType, "livekit.proto.VideoStreamType", [
  { no: 0, name: "VIDEO_STREAM_NATIVE" },
  { no: 1, name: "VIDEO_STREAM_WEBGL" },
  { no: 2, name: "VIDEO_STREAM_HTML" },
]);

/**
 * @generated from enum livekit.proto.VideoSourceType
 */
export enum VideoSourceType {
  /**
   * @generated from enum value: VIDEO_SOURCE_NATIVE = 0;
   */
  VIDEO_SOURCE_NATIVE = 0,
}
// Retrieve enum metadata with: proto2.getEnumType(VideoSourceType)
proto2.util.setEnumType(VideoSourceType, "livekit.proto.VideoSourceType", [
  { no: 0, name: "VIDEO_SOURCE_NATIVE" },
]);

/**
 * Create a new VideoStream
 * VideoStream is used to receive video frames from a track
 *
 * @generated from message livekit.proto.NewVideoStreamRequest
 */
export class NewVideoStreamRequest extends Message<NewVideoStreamRequest> {
  /**
   * @generated from field: required uint64 track_handle = 1;
   */
  trackHandle?: bigint;

  /**
   * @generated from field: required livekit.proto.VideoStreamType type = 2;
   */
  type?: VideoStreamType;

  /**
   * Get the frame on a specific format
   *
   * @generated from field: optional livekit.proto.VideoBufferType format = 3;
   */
  format?: VideoBufferType;

  /**
   * if true, stride will be set to width/chroma_width
   *
   * @generated from field: optional bool normalize_stride = 4;
   */
  normalizeStride?: boolean;

  constructor(data?: PartialMessage<NewVideoStreamRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.NewVideoStreamRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "track_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "type", kind: "enum", T: proto2.getEnumType(VideoStreamType), req: true },
    { no: 3, name: "format", kind: "enum", T: proto2.getEnumType(VideoBufferType), opt: true },
    { no: 4, name: "normalize_stride", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewVideoStreamRequest {
    return new NewVideoStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewVideoStreamRequest {
    return new NewVideoStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewVideoStreamRequest {
    return new NewVideoStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewVideoStreamRequest | PlainMessage<NewVideoStreamRequest> | undefined, b: NewVideoStreamRequest | PlainMessage<NewVideoStreamRequest> | undefined): boolean {
    return proto2.util.equals(NewVideoStreamRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.NewVideoStreamResponse
 */
export class NewVideoStreamResponse extends Message<NewVideoStreamResponse> {
  /**
   * @generated from field: required livekit.proto.OwnedVideoStream stream = 1;
   */
  stream?: OwnedVideoStream;

  constructor(data?: PartialMessage<NewVideoStreamResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.NewVideoStreamResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "stream", kind: "message", T: OwnedVideoStream, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewVideoStreamResponse {
    return new NewVideoStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewVideoStreamResponse {
    return new NewVideoStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewVideoStreamResponse {
    return new NewVideoStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewVideoStreamResponse | PlainMessage<NewVideoStreamResponse> | undefined, b: NewVideoStreamResponse | PlainMessage<NewVideoStreamResponse> | undefined): boolean {
    return proto2.util.equals(NewVideoStreamResponse, a, b);
  }
}

/**
 * Request a video stream from a participant
 *
 * @generated from message livekit.proto.VideoStreamFromParticipantRequest
 */
export class VideoStreamFromParticipantRequest extends Message<VideoStreamFromParticipantRequest> {
  /**
   * @generated from field: required uint64 participant_handle = 1;
   */
  participantHandle?: bigint;

  /**
   * @generated from field: required livekit.proto.VideoStreamType type = 2;
   */
  type?: VideoStreamType;

  /**
   * @generated from field: required livekit.proto.TrackSource track_source = 3;
   */
  trackSource?: TrackSource;

  /**
   * @generated from field: optional livekit.proto.VideoBufferType format = 4;
   */
  format?: VideoBufferType;

  /**
   * @generated from field: optional bool normalize_stride = 5;
   */
  normalizeStride?: boolean;

  constructor(data?: PartialMessage<VideoStreamFromParticipantRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoStreamFromParticipantRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "participant_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "type", kind: "enum", T: proto2.getEnumType(VideoStreamType), req: true },
    { no: 3, name: "track_source", kind: "enum", T: proto2.getEnumType(TrackSource), req: true },
    { no: 4, name: "format", kind: "enum", T: proto2.getEnumType(VideoBufferType), opt: true },
    { no: 5, name: "normalize_stride", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoStreamFromParticipantRequest {
    return new VideoStreamFromParticipantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoStreamFromParticipantRequest {
    return new VideoStreamFromParticipantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoStreamFromParticipantRequest {
    return new VideoStreamFromParticipantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VideoStreamFromParticipantRequest | PlainMessage<VideoStreamFromParticipantRequest> | undefined, b: VideoStreamFromParticipantRequest | PlainMessage<VideoStreamFromParticipantRequest> | undefined): boolean {
    return proto2.util.equals(VideoStreamFromParticipantRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoStreamFromParticipantResponse
 */
export class VideoStreamFromParticipantResponse extends Message<VideoStreamFromParticipantResponse> {
  /**
   * @generated from field: required livekit.proto.OwnedVideoStream stream = 1;
   */
  stream?: OwnedVideoStream;

  constructor(data?: PartialMessage<VideoStreamFromParticipantResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoStreamFromParticipantResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "stream", kind: "message", T: OwnedVideoStream, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoStreamFromParticipantResponse {
    return new VideoStreamFromParticipantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoStreamFromParticipantResponse {
    return new VideoStreamFromParticipantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoStreamFromParticipantResponse {
    return new VideoStreamFromParticipantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VideoStreamFromParticipantResponse | PlainMessage<VideoStreamFromParticipantResponse> | undefined, b: VideoStreamFromParticipantResponse | PlainMessage<VideoStreamFromParticipantResponse> | undefined): boolean {
    return proto2.util.equals(VideoStreamFromParticipantResponse, a, b);
  }
}

/**
 * Create a new VideoSource
 * VideoSource is used to send video frame to a track
 *
 * @generated from message livekit.proto.NewVideoSourceRequest
 */
export class NewVideoSourceRequest extends Message<NewVideoSourceRequest> {
  /**
   * @generated from field: required livekit.proto.VideoSourceType type = 1;
   */
  type?: VideoSourceType;

  /**
   * Used to determine which encodings to use + simulcast layers
   * Most of the time it corresponds to the source resolution 
   *
   * @generated from field: required livekit.proto.VideoSourceResolution resolution = 2;
   */
  resolution?: VideoSourceResolution;

  constructor(data?: PartialMessage<NewVideoSourceRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.NewVideoSourceRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto2.getEnumType(VideoSourceType), req: true },
    { no: 2, name: "resolution", kind: "message", T: VideoSourceResolution, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewVideoSourceRequest {
    return new NewVideoSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewVideoSourceRequest {
    return new NewVideoSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewVideoSourceRequest {
    return new NewVideoSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewVideoSourceRequest | PlainMessage<NewVideoSourceRequest> | undefined, b: NewVideoSourceRequest | PlainMessage<NewVideoSourceRequest> | undefined): boolean {
    return proto2.util.equals(NewVideoSourceRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.NewVideoSourceResponse
 */
export class NewVideoSourceResponse extends Message<NewVideoSourceResponse> {
  /**
   * @generated from field: required livekit.proto.OwnedVideoSource source = 1;
   */
  source?: OwnedVideoSource;

  constructor(data?: PartialMessage<NewVideoSourceResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.NewVideoSourceResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "source", kind: "message", T: OwnedVideoSource, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewVideoSourceResponse {
    return new NewVideoSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewVideoSourceResponse {
    return new NewVideoSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewVideoSourceResponse {
    return new NewVideoSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: NewVideoSourceResponse | PlainMessage<NewVideoSourceResponse> | undefined, b: NewVideoSourceResponse | PlainMessage<NewVideoSourceResponse> | undefined): boolean {
    return proto2.util.equals(NewVideoSourceResponse, a, b);
  }
}

/**
 * Push a frame to a VideoSource
 *
 * @generated from message livekit.proto.CaptureVideoFrameRequest
 */
export class CaptureVideoFrameRequest extends Message<CaptureVideoFrameRequest> {
  /**
   * @generated from field: required uint64 source_handle = 1;
   */
  sourceHandle?: bigint;

  /**
   * @generated from field: required livekit.proto.VideoBufferInfo buffer = 2;
   */
  buffer?: VideoBufferInfo;

  /**
   * In microseconds
   *
   * @generated from field: required int64 timestamp_us = 3;
   */
  timestampUs?: bigint;

  /**
   * @generated from field: required livekit.proto.VideoRotation rotation = 4;
   */
  rotation?: VideoRotation;

  constructor(data?: PartialMessage<CaptureVideoFrameRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.CaptureVideoFrameRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "source_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "buffer", kind: "message", T: VideoBufferInfo, req: true },
    { no: 3, name: "timestamp_us", kind: "scalar", T: 3 /* ScalarType.INT64 */, req: true },
    { no: 4, name: "rotation", kind: "enum", T: proto2.getEnumType(VideoRotation), req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaptureVideoFrameRequest {
    return new CaptureVideoFrameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaptureVideoFrameRequest {
    return new CaptureVideoFrameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaptureVideoFrameRequest {
    return new CaptureVideoFrameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CaptureVideoFrameRequest | PlainMessage<CaptureVideoFrameRequest> | undefined, b: CaptureVideoFrameRequest | PlainMessage<CaptureVideoFrameRequest> | undefined): boolean {
    return proto2.util.equals(CaptureVideoFrameRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.CaptureVideoFrameResponse
 */
export class CaptureVideoFrameResponse extends Message<CaptureVideoFrameResponse> {
  constructor(data?: PartialMessage<CaptureVideoFrameResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.CaptureVideoFrameResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaptureVideoFrameResponse {
    return new CaptureVideoFrameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaptureVideoFrameResponse {
    return new CaptureVideoFrameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaptureVideoFrameResponse {
    return new CaptureVideoFrameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CaptureVideoFrameResponse | PlainMessage<CaptureVideoFrameResponse> | undefined, b: CaptureVideoFrameResponse | PlainMessage<CaptureVideoFrameResponse> | undefined): boolean {
    return proto2.util.equals(CaptureVideoFrameResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoConvertRequest
 */
export class VideoConvertRequest extends Message<VideoConvertRequest> {
  /**
   * @generated from field: optional bool flip_y = 1;
   */
  flipY?: boolean;

  /**
   * @generated from field: required livekit.proto.VideoBufferInfo buffer = 2;
   */
  buffer?: VideoBufferInfo;

  /**
   * @generated from field: required livekit.proto.VideoBufferType dst_type = 3;
   */
  dstType?: VideoBufferType;

  constructor(data?: PartialMessage<VideoConvertRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoConvertRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "flip_y", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "buffer", kind: "message", T: VideoBufferInfo, req: true },
    { no: 3, name: "dst_type", kind: "enum", T: proto2.getEnumType(VideoBufferType), req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoConvertRequest {
    return new VideoConvertRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoConvertRequest {
    return new VideoConvertRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoConvertRequest {
    return new VideoConvertRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VideoConvertRequest | PlainMessage<VideoConvertRequest> | undefined, b: VideoConvertRequest | PlainMessage<VideoConvertRequest> | undefined): boolean {
    return proto2.util.equals(VideoConvertRequest, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoConvertResponse
 */
export class VideoConvertResponse extends Message<VideoConvertResponse> {
  /**
   * @generated from oneof livekit.proto.VideoConvertResponse.message
   */
  message: {
    /**
     * @generated from field: string error = 1;
     */
    value: string;
    case: "error";
  } | {
    /**
     * @generated from field: livekit.proto.OwnedVideoBuffer buffer = 2;
     */
    value: OwnedVideoBuffer;
    case: "buffer";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<VideoConvertResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoConvertResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "message" },
    { no: 2, name: "buffer", kind: "message", T: OwnedVideoBuffer, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoConvertResponse {
    return new VideoConvertResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoConvertResponse {
    return new VideoConvertResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoConvertResponse {
    return new VideoConvertResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VideoConvertResponse | PlainMessage<VideoConvertResponse> | undefined, b: VideoConvertResponse | PlainMessage<VideoConvertResponse> | undefined): boolean {
    return proto2.util.equals(VideoConvertResponse, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoResolution
 */
export class VideoResolution extends Message<VideoResolution> {
  /**
   * @generated from field: required uint32 width = 1;
   */
  width?: number;

  /**
   * @generated from field: required uint32 height = 2;
   */
  height?: number;

  /**
   * @generated from field: required double frame_rate = 3;
   */
  frameRate?: number;

  constructor(data?: PartialMessage<VideoResolution>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoResolution";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
    { no: 2, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
    { no: 3, name: "frame_rate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoResolution {
    return new VideoResolution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoResolution {
    return new VideoResolution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoResolution {
    return new VideoResolution().fromJsonString(jsonString, options);
  }

  static equals(a: VideoResolution | PlainMessage<VideoResolution> | undefined, b: VideoResolution | PlainMessage<VideoResolution> | undefined): boolean {
    return proto2.util.equals(VideoResolution, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoBufferInfo
 */
export class VideoBufferInfo extends Message<VideoBufferInfo> {
  /**
   * @generated from field: required livekit.proto.VideoBufferType type = 1;
   */
  type?: VideoBufferType;

  /**
   * @generated from field: required uint32 width = 2;
   */
  width?: number;

  /**
   * @generated from field: required uint32 height = 3;
   */
  height?: number;

  /**
   * @generated from field: required uint64 data_ptr = 4;
   */
  dataPtr?: bigint;

  /**
   * only for packed formats
   *
   * @generated from field: required uint32 stride = 6;
   */
  stride?: number;

  /**
   * @generated from field: repeated livekit.proto.VideoBufferInfo.ComponentInfo components = 7;
   */
  components: VideoBufferInfo_ComponentInfo[] = [];

  constructor(data?: PartialMessage<VideoBufferInfo>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoBufferInfo";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto2.getEnumType(VideoBufferType), req: true },
    { no: 2, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
    { no: 3, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
    { no: 4, name: "data_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 6, name: "stride", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
    { no: 7, name: "components", kind: "message", T: VideoBufferInfo_ComponentInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoBufferInfo {
    return new VideoBufferInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoBufferInfo {
    return new VideoBufferInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoBufferInfo {
    return new VideoBufferInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VideoBufferInfo | PlainMessage<VideoBufferInfo> | undefined, b: VideoBufferInfo | PlainMessage<VideoBufferInfo> | undefined): boolean {
    return proto2.util.equals(VideoBufferInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoBufferInfo.ComponentInfo
 */
export class VideoBufferInfo_ComponentInfo extends Message<VideoBufferInfo_ComponentInfo> {
  /**
   * @generated from field: required uint64 data_ptr = 1;
   */
  dataPtr?: bigint;

  /**
   * @generated from field: required uint32 stride = 2;
   */
  stride?: number;

  /**
   * @generated from field: required uint32 size = 3;
   */
  size?: number;

  constructor(data?: PartialMessage<VideoBufferInfo_ComponentInfo>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoBufferInfo.ComponentInfo";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "data_ptr", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "stride", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
    { no: 3, name: "size", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoBufferInfo_ComponentInfo {
    return new VideoBufferInfo_ComponentInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoBufferInfo_ComponentInfo {
    return new VideoBufferInfo_ComponentInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoBufferInfo_ComponentInfo {
    return new VideoBufferInfo_ComponentInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VideoBufferInfo_ComponentInfo | PlainMessage<VideoBufferInfo_ComponentInfo> | undefined, b: VideoBufferInfo_ComponentInfo | PlainMessage<VideoBufferInfo_ComponentInfo> | undefined): boolean {
    return proto2.util.equals(VideoBufferInfo_ComponentInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedVideoBuffer
 */
export class OwnedVideoBuffer extends Message<OwnedVideoBuffer> {
  /**
   * @generated from field: required livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: required livekit.proto.VideoBufferInfo info = 2;
   */
  info?: VideoBufferInfo;

  constructor(data?: PartialMessage<OwnedVideoBuffer>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.OwnedVideoBuffer";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle, req: true },
    { no: 2, name: "info", kind: "message", T: VideoBufferInfo, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedVideoBuffer {
    return new OwnedVideoBuffer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedVideoBuffer {
    return new OwnedVideoBuffer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedVideoBuffer {
    return new OwnedVideoBuffer().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedVideoBuffer | PlainMessage<OwnedVideoBuffer> | undefined, b: OwnedVideoBuffer | PlainMessage<OwnedVideoBuffer> | undefined): boolean {
    return proto2.util.equals(OwnedVideoBuffer, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoStreamInfo
 */
export class VideoStreamInfo extends Message<VideoStreamInfo> {
  /**
   * @generated from field: required livekit.proto.VideoStreamType type = 1;
   */
  type?: VideoStreamType;

  constructor(data?: PartialMessage<VideoStreamInfo>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoStreamInfo";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto2.getEnumType(VideoStreamType), req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoStreamInfo {
    return new VideoStreamInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoStreamInfo {
    return new VideoStreamInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoStreamInfo {
    return new VideoStreamInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VideoStreamInfo | PlainMessage<VideoStreamInfo> | undefined, b: VideoStreamInfo | PlainMessage<VideoStreamInfo> | undefined): boolean {
    return proto2.util.equals(VideoStreamInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedVideoStream
 */
export class OwnedVideoStream extends Message<OwnedVideoStream> {
  /**
   * @generated from field: required livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: required livekit.proto.VideoStreamInfo info = 2;
   */
  info?: VideoStreamInfo;

  constructor(data?: PartialMessage<OwnedVideoStream>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.OwnedVideoStream";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle, req: true },
    { no: 2, name: "info", kind: "message", T: VideoStreamInfo, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedVideoStream {
    return new OwnedVideoStream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedVideoStream {
    return new OwnedVideoStream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedVideoStream {
    return new OwnedVideoStream().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedVideoStream | PlainMessage<OwnedVideoStream> | undefined, b: OwnedVideoStream | PlainMessage<OwnedVideoStream> | undefined): boolean {
    return proto2.util.equals(OwnedVideoStream, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoStreamEvent
 */
export class VideoStreamEvent extends Message<VideoStreamEvent> {
  /**
   * @generated from field: required uint64 stream_handle = 1;
   */
  streamHandle?: bigint;

  /**
   * @generated from oneof livekit.proto.VideoStreamEvent.message
   */
  message: {
    /**
     * @generated from field: livekit.proto.VideoFrameReceived frame_received = 2;
     */
    value: VideoFrameReceived;
    case: "frameReceived";
  } | {
    /**
     * @generated from field: livekit.proto.VideoStreamEOS eos = 3;
     */
    value: VideoStreamEOS;
    case: "eos";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<VideoStreamEvent>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoStreamEvent";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "stream_handle", kind: "scalar", T: 4 /* ScalarType.UINT64 */, req: true },
    { no: 2, name: "frame_received", kind: "message", T: VideoFrameReceived, oneof: "message" },
    { no: 3, name: "eos", kind: "message", T: VideoStreamEOS, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoStreamEvent {
    return new VideoStreamEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoStreamEvent {
    return new VideoStreamEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoStreamEvent {
    return new VideoStreamEvent().fromJsonString(jsonString, options);
  }

  static equals(a: VideoStreamEvent | PlainMessage<VideoStreamEvent> | undefined, b: VideoStreamEvent | PlainMessage<VideoStreamEvent> | undefined): boolean {
    return proto2.util.equals(VideoStreamEvent, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoFrameReceived
 */
export class VideoFrameReceived extends Message<VideoFrameReceived> {
  /**
   * @generated from field: required livekit.proto.OwnedVideoBuffer buffer = 1;
   */
  buffer?: OwnedVideoBuffer;

  /**
   * In microseconds
   *
   * @generated from field: required int64 timestamp_us = 2;
   */
  timestampUs?: bigint;

  /**
   * @generated from field: required livekit.proto.VideoRotation rotation = 3;
   */
  rotation?: VideoRotation;

  constructor(data?: PartialMessage<VideoFrameReceived>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoFrameReceived";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "buffer", kind: "message", T: OwnedVideoBuffer, req: true },
    { no: 2, name: "timestamp_us", kind: "scalar", T: 3 /* ScalarType.INT64 */, req: true },
    { no: 3, name: "rotation", kind: "enum", T: proto2.getEnumType(VideoRotation), req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoFrameReceived {
    return new VideoFrameReceived().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoFrameReceived {
    return new VideoFrameReceived().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoFrameReceived {
    return new VideoFrameReceived().fromJsonString(jsonString, options);
  }

  static equals(a: VideoFrameReceived | PlainMessage<VideoFrameReceived> | undefined, b: VideoFrameReceived | PlainMessage<VideoFrameReceived> | undefined): boolean {
    return proto2.util.equals(VideoFrameReceived, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoStreamEOS
 */
export class VideoStreamEOS extends Message<VideoStreamEOS> {
  constructor(data?: PartialMessage<VideoStreamEOS>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoStreamEOS";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoStreamEOS {
    return new VideoStreamEOS().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoStreamEOS {
    return new VideoStreamEOS().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoStreamEOS {
    return new VideoStreamEOS().fromJsonString(jsonString, options);
  }

  static equals(a: VideoStreamEOS | PlainMessage<VideoStreamEOS> | undefined, b: VideoStreamEOS | PlainMessage<VideoStreamEOS> | undefined): boolean {
    return proto2.util.equals(VideoStreamEOS, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoSourceResolution
 */
export class VideoSourceResolution extends Message<VideoSourceResolution> {
  /**
   * @generated from field: required uint32 width = 1;
   */
  width?: number;

  /**
   * @generated from field: required uint32 height = 2;
   */
  height?: number;

  constructor(data?: PartialMessage<VideoSourceResolution>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoSourceResolution";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
    { no: 2, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoSourceResolution {
    return new VideoSourceResolution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoSourceResolution {
    return new VideoSourceResolution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoSourceResolution {
    return new VideoSourceResolution().fromJsonString(jsonString, options);
  }

  static equals(a: VideoSourceResolution | PlainMessage<VideoSourceResolution> | undefined, b: VideoSourceResolution | PlainMessage<VideoSourceResolution> | undefined): boolean {
    return proto2.util.equals(VideoSourceResolution, a, b);
  }
}

/**
 * @generated from message livekit.proto.VideoSourceInfo
 */
export class VideoSourceInfo extends Message<VideoSourceInfo> {
  /**
   * @generated from field: required livekit.proto.VideoSourceType type = 1;
   */
  type?: VideoSourceType;

  constructor(data?: PartialMessage<VideoSourceInfo>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.VideoSourceInfo";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto2.getEnumType(VideoSourceType), req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoSourceInfo {
    return new VideoSourceInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoSourceInfo {
    return new VideoSourceInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoSourceInfo {
    return new VideoSourceInfo().fromJsonString(jsonString, options);
  }

  static equals(a: VideoSourceInfo | PlainMessage<VideoSourceInfo> | undefined, b: VideoSourceInfo | PlainMessage<VideoSourceInfo> | undefined): boolean {
    return proto2.util.equals(VideoSourceInfo, a, b);
  }
}

/**
 * @generated from message livekit.proto.OwnedVideoSource
 */
export class OwnedVideoSource extends Message<OwnedVideoSource> {
  /**
   * @generated from field: required livekit.proto.FfiOwnedHandle handle = 1;
   */
  handle?: FfiOwnedHandle;

  /**
   * @generated from field: required livekit.proto.VideoSourceInfo info = 2;
   */
  info?: VideoSourceInfo;

  constructor(data?: PartialMessage<OwnedVideoSource>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "livekit.proto.OwnedVideoSource";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "handle", kind: "message", T: FfiOwnedHandle, req: true },
    { no: 2, name: "info", kind: "message", T: VideoSourceInfo, req: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OwnedVideoSource {
    return new OwnedVideoSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OwnedVideoSource {
    return new OwnedVideoSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OwnedVideoSource {
    return new OwnedVideoSource().fromJsonString(jsonString, options);
  }

  static equals(a: OwnedVideoSource | PlainMessage<OwnedVideoSource> | undefined, b: OwnedVideoSource | PlainMessage<OwnedVideoSource> | undefined): boolean {
    return proto2.util.equals(OwnedVideoSource, a, b);
  }
}

